<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Obj\obj_debug_efm\ccm4202s_demo_efm.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Obj\obj_debug_efm\ccm4202s_demo_efm.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Dec 30 15:33:44 2021
<BR><P>
<H3>Maximum Stack Usage =       2084 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; AppUser_Init &rArr; APP_Power_Init &rArr; APP_GetBackBat &rArr; Menu_Comm_Service &rArr; Menu_Comm_BleRecvDeal &rArr; Menu_Comm_BleServerIssueChallenge &rArr; id2_client_get_challenge_auth_code &rArr; _id2_gen_auth_code &rArr; _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[24]">AES_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">AES_IRQHandler</a><BR>
 <LI><a href="#[409]">fn_WhenExitMenuOperation</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fc]">fn_JumpMenu</a><BR>
 <LI><a href="#[2a4]">Menu_CommMsgKeyStatusMenuEnter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fc]">fn_JumpMenu</a><BR>
 <LI><a href="#[40b]">fn_WhenEnterMenuOperation</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fc]">fn_JumpMenu</a><BR>
 <LI><a href="#[34b]">MergeSort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34b]">MergeSort</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">AES_IRQHandler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[5a]">APP_SysTimerHandler</a> from app_power.o(i.APP_SysTimerHandler) referenced from app_power.o(i.APP_SysTimerInit)
 <LI><a href="#[1f]">ASYNC_TIMER_IRQHandler</a> from pci_drv.o(i.ASYNC_TIMER_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[c]">BusFault_Handler</a> from system_armcm4.o(i.BusFault_Handler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[4b]">CLCD_IRQHandler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[27]">DAC_IRQHandler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[4c]">DCMI_IRQHandler</a> from c0_drv.o(i.DCMI_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[19]">DMA1_IRQHandler</a> from dmac_drv.o(i.DMA1_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[1b]">DMA2D_IRQHandler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[1a]">DMA2_IRQHandler</a> from dmac_drv.o(i.DMA2_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[f]">DebugMon_Handler</a> from system_armcm4.o(i.DebugMon_Handler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[12]">EFM_IRQHandler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[18]">ENCR1_IRQHandler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[17]">ENCR_IRQHandler</a> from edma_drv.o(i.ENCR_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[3b]">EPORT0_0_IRQHandler</a> from eport_drv.o(i.EPORT0_0_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[3c]">EPORT0_1_IRQHandler</a> from eport_drv.o(i.EPORT0_1_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[3d]">EPORT0_2_IRQHandler</a> from eport_drv.o(i.EPORT0_2_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[3e]">EPORT0_3_IRQHandler</a> from eport_drv.o(i.EPORT0_3_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[3f]">EPORT0_4_IRQHandler</a> from eport_drv.o(i.EPORT0_4_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[40]">EPORT0_5_IRQHandler</a> from eport_drv.o(i.EPORT0_5_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[41]">EPORT0_6_IRQHandler</a> from eport_drv.o(i.EPORT0_6_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[42]">EPORT0_7_IRQHandler</a> from eport_drv.o(i.EPORT0_7_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[43]">EPORT1_0_IRQHandler</a> from eport_drv.o(i.EPORT1_0_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[44]">EPORT1_1_IRQHandler</a> from eport_drv.o(i.EPORT1_1_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[45]">EPORT1_2_IRQHandler</a> from eport_drv.o(i.EPORT1_2_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[46]">EPORT1_3_IRQHandler</a> from eport_drv.o(i.EPORT1_3_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[47]">EPORT1_4_IRQHandler</a> from eport_drv.o(i.EPORT1_4_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[48]">EPORT1_5_IRQHandler</a> from eport_drv.o(i.EPORT1_5_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[49]">EPORT1_6_IRQHandler</a> from eport_drv.o(i.EPORT1_6_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[4a]">EPORT1_7_IRQHandler</a> from eport_drv.o(i.EPORT1_7_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[a]">HardFault_Handler</a> from cmb_fault.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[36]">I2C1_IRQHandler</a> from i2c_drv.o(i.I2C1_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[4d]">I2C2_IRQHandler</a> from i2c_drv.o(i.I2C2_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[4e]">I2C3_IRQHandler</a> from i2c_drv.o(i.I2C3_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[52]">LVD_EN</a> from system_armcm4.o(i.LVD_EN) referenced from startup_armcm4.o(.text)
 <LI><a href="#[28]">MCC_IRQHandler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[2b]">MIPI_IRQHandler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[b]">MemManage_Handler</a> from system_armcm4.o(i.MemManage_Handler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[5d]">Menu_Desktop</a> from menu_currentoperate.o(i.Menu_Desktop) referenced from menu_datastructure.o(.constdata)
 <LI><a href="#[5e]">Menu_FirstUse</a> from menu_currentoperate.o(i.Menu_FirstUse) referenced from menu_datastructure.o(.constdata)
 <LI><a href="#[61]">Menu_None</a> from menu_currentoperate.o(i.Menu_None) referenced 138 times from menu_datastructure.o(.constdata)
 <LI><a href="#[60]">Menu_PassWdFail</a> from menu_currentoperate.o(i.Menu_PassWdFail) referenced 3 times from menu_datastructure.o(.constdata)
 <LI><a href="#[5f]">Menu_PassWdPass</a> from menu_currentoperate.o(i.Menu_PassWdPass) referenced from menu_datastructure.o(.constdata)
 <LI><a href="#[5b]">Menu_SystemSleep</a> from menu_currentoperate.o(i.Menu_SystemSleep) referenced 6 times from menu_datastructure.o(.constdata)
 <LI><a href="#[5c]">Menu_Welcome</a> from menu_currentoperate.o(i.Menu_Welcome) referenced from menu_datastructure.o(.constdata)
 <LI><a href="#[9]">NMI_Handler</a> from system_armcm4.o(i.NMI_Handler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[1e]">PCI_DET_IRQHandler</a> from pci_drv.o(i.PCI_DET_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[20]">PCI_IRQHandler</a> from cpm_drv.o(i.PCI_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[15]">PIT1_IRQHandler</a> from pit32_drv.o(i.PIT1_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[16]">PIT2_IRQHandler</a> from pit32_drv.o(i.PIT2_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[13]">PMU_IRQHandler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[21]">PMU_RTC_IRQHandler</a> from rtc_drv.o(i.PMU_RTC_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[37]">PWM0_IRQHandler</a> from pwm_drv.o(i.PWM0_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[38]">PWM1_IRQHandler</a> from pwm_drv.o(i.PWM1_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[39]">PWM2_IRQHandler</a> from pwm_drv.o(i.PWM2_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[3a]">PWM3_IRQHandler</a> from pwm_drv.o(i.PWM3_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[10]">PendSV_Handler</a> from system_armcm4.o(i.PendSV_Handler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[26]">QADC_IRQHandler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[35]">RESERVED1</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[50]">RESERVED2</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[22]">RSA_IRQHandler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[8]">Reset_Handler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[32]">SCI1_IRQHandler</a> from uart_drv.o(i.SCI1_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[33]">SCI2_IRQHandler</a> from uart_drv.o(i.SCI2_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[4f]">SCI3_IRQHandler</a> from uart_drv.o(i.SCI3_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[1d]">SEC_PGD_LD_FD_IRQHandler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[23]">SHA_IRQHandler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[25]">SMS4_IRQHandler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[2c]">SPI1_IRQHandler</a> from spi_drv.o(i.SPI1_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[2d]">SPI2_IRQHandler</a> from spi_drv.o(i.SPI2_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[2e]">SPI3_IRQHandler</a> from spi_drv.o(i.SPI3_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[2f]">SPIM1_IRQHandler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[30]">SPIM2_IRQHandler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[31]">SPIM3_IRQHandler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[68]">SPI_Flash_Read</a> from flash.o(i.SPI_Flash_Read) referenced from bin_lib_table.o(.constdata)
 <LI><a href="#[69]">SPI_Flash_Write_Sectors</a> from flash.o(i.SPI_Flash_Write_Sectors) referenced from bin_lib_table.o(.constdata)
 <LI><a href="#[e]">SVC_Handler</a> from system_armcm4.o(i.SVC_Handler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[11]">SysTick_Handler</a> from systick_drv.o(i.SysTick_Handler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[53]">SystemInit</a> from system_armcm4.o(i.SystemInit) referenced from startup_armcm4.o(.text)
 <LI><a href="#[14]">TC_IRQHandler</a> from tc_drv.o(i.TC_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[1c]">TRNG_IRQHandler</a> from startup_armcm4.o(.text) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[29]">TSI_IRQHandler</a> from tsi_app.o(i.TSI_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[2a]">USBC_IRQHandler</a> from usb_drv.o(i.USBC_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[51]">USI1_IRQHandler</a> from apdu_drv.o(i.USI1_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[34]">USI2_IRQHandler</a> from apdu_drv.o(i.USI2_IRQHandler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[d]">UsageFault_Handler</a> from system_armcm4.o(i.UsageFault_Handler) referenced from startup_armcm4.o(RESET)
 <LI><a href="#[6b]">__main</a> from __main.o(!!!main) referenced from startup_armcm4.o(.text)
 <LI><a href="#[55]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[58]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[56]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[57]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[66]">eflash_bulk_program_withkey</a> from eflash_api.o(i.eflash_bulk_program_withkey) referenced from bin_lib_table.o(.constdata)
 <LI><a href="#[67]">eflash_page_erase_withkey</a> from eflash_api.o(i.eflash_page_erase_withkey) referenced from bin_lib_table.o(.constdata)
 <LI><a href="#[65]">eflash_program_withkey</a> from eflash_api.o(i.eflash_program_withkey) referenced from bin_lib_table.o(.constdata)
 <LI><a href="#[59]">fputc</a> from debug.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[6a]">fsmSendFrame</a> from fsm.o(i.fsmSendFrame) referenced from bin_lib_table.o(.constdata)
 <LI><a href="#[64]">sensorSpiWriteRead</a> from sensorspi.o(i.sensorSpiWriteRead) referenced from bin_lib_table.o(.constdata)
 <LI><a href="#[63]">systemTickMs</a> from timer_1.o(i.systemTickMs) referenced from bin_lib_table.o(.constdata)
 <LI><a href="#[62]">uartSendBuff</a> from uart.o(i.uartSendBuff) referenced from bin_lib_table.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[6e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[462]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[463]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[464]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[465]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[466]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[6f]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[bd]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[71]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[73]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[75]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[76]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[77]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[467]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[79]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7b]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7c]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7d]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[7f]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[81]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[83]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[84]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[85]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[87]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[468]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[89]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[8b]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[8d]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[8f]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[469]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[9d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[91]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[93]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[46a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[46b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[95]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[46c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[46d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[46e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[97]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[46f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[470]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[98]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[471]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[472]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[473]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[474]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[475]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[476]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[477]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[478]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[479]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[47a]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[47b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[47c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[47d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[a2]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[47e]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[47f]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[480]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[481]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[482]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[483]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[484]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[485]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[6d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[486]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[9a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[487]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[9e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 2084 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; AppUser_Init &rArr; APP_Power_Init &rArr; APP_GetBackBat &rArr; Menu_Comm_Service &rArr; Menu_Comm_BleRecvDeal &rArr; Menu_Comm_BleServerIssueChallenge &rArr; id2_client_get_challenge_auth_code &rArr; _id2_gen_auth_code &rArr; _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[488]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[e4]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a1]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[489]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[a3]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[48a]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[24]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EFM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ENCR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MIPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>QADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RESERVED1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>RESERVED2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RSA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SEC_PGD_LD_FD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SHA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SMS4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_armcm4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmb_fault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; cm_backtrace_fault &rArr; print_call_stack &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[48b]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[a7]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_malloc
</UL>

<P><STRONG><a name="[aa]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_free
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[ab]"></a>vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
</UL>

<P><STRONG><a name="[ad]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_snprintf
</UL>

<P><STRONG><a name="[af]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuNum
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeepTimeRefresh
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDeal_CloseLock
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyBackLightUpdate
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_WakeUpLight
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_HoldToRAM
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDealService
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_EnterDesktopVerifyStart
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ChkError
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TimeGetStm
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_SendDealStart
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_SysRamInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_WakeupRTCTimerGet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_VolumeSetInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SysWakeUpToMenu
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_StorageInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_EnterSleepConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetPowerValue
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetBackBat
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DefSet
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_WifiConnect
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyOk
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyFail
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Desktop
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Clear
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleShangTangCatEyeSingleDouble
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleR8CatEyeOTA
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleModifFaceSafetyLevel
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleFaceVersionGet
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleFaceDelId
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleConfigWifiData
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleCatEyeSN
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAliyunSecretKeySetParm
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAddFaceIng
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Bell
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AdminChkVerifyOk
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AdminChk
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AddFaceIng
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CatEyeConn
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_WifiLockLogUpdata
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_WifiCmdAlarmUpdata
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgKeyStatusMenuEnter
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Verify
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Reg
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_VerifyOk
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_Desktop
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_DelFinger
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_ClearAll
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleDelFinger
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerStep
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerFaill
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerConfirmFail
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_AdminChk
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_AddFingerStep
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AddError
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ClearUserData
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdDealStart
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPwd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuModPwdInputAgainFun
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuModPwdFun
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuDesktopFun
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterProjectModeCheck
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesktopKeyEnter
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_SetDistance
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenExitMenu_VosGui
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenExitMenuOperation
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenu_VosGui
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_TimeOutMenuReturn
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_Send
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SmartKeyMatch
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleWifiToolTest
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleWifiSetParm1
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleWifiFunctionSwitchSet
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleWakeSourceQuery
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleVoltageTest
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleVerifyPhoneEncrypt
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleUnlockUploadWifiSW
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleUnlockSmartKeyVerify
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleUnlockPwdSet
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleToolTestRWLockModel
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleToolTestFail
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleToolAddModel
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleTmpeSecretKeyGet
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleTimeSync
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleTestServerConnectionStatus
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleSmartKeySecretKeyGetRandom
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleSmartKeySecretKeyGet
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleSmartKeyAttributeModify
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleShangTangCatEyeSingleDouble
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerTokenVerify
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerIssueChallenge
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleSecondBatteryVoltageTest
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleR8CatEyeOTA
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleQueryLockConfigTable
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BlePhoneSecretKeyGet
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleNewConfirmFingerRegSucced
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleNewAddFinger
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleNFCSwitchSet
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleMotorTorqueSet
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleMotorDirSet
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleModifFaceSafetyLevel
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleMcuEnterUpdataMode
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockVolumeSet
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockUpdateProgramMode
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockTimeGet
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockRegSecretKeyGet
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockPwdVerifyAdmin
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockMacGet
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockFirmwareVersionGet
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLedOledTest
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleInfraredMonitoringDistanceSet
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleID2ServerSwitch
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleGyroscopeSet
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleGetMcuVersion
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleGetEventRecords
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFlashWriteTest
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFlashRWComp
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFingerAttributeModify
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceVersionGet
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceRegConfirm
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceReg
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceDelId
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceAttributeModify
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleEquipmentReg
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleEmptyUser
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDoorbellCapture
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDoorOpeningModeSet
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDisconnectBluetooth
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelSmartKey
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelPhoneAccount
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelFinger
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDHKeyExchangeAlgorithm
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleChannelPwdGet
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleCatEyeSN
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAutomaticLockIntervalSet
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAutoLockKeyConfig
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAutoLockConfig
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAliyunSecretKeySetParm
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddSmartKeyAccredit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddPhoneAccount
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddFinger
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleActiveDefense
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAKeyProtection
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESUnlockPwdSet
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESUnlockAlarmPwdSet
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESTmpeSecretKeyGet
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESAddPhoneAccount
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommOpenAndInfoUpload
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgMotorLock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgKeyStatus
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgEnterOTA
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgDisconnectBLE
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommGetBattery
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VoiceDeal
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_VoicePlay
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_VerifyUser
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_PowerDeal
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_GetVersion
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_DelOneUser
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_DelAllUser
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdPowerOn
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdPowerOffDir
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdPowerOff
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_AddUser
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_TriggerCaptureData
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FaceWifiDeal
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_RegModel
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_GenImg
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_DeletChar
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_SysWakeupChk
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_RAMToHold
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_EnterSleep
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_CPUInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BuFang_Time_Sleep
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BuFang_Time_Detet
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_EnterSleepConfig
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_RecvDataAndAnalysis
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_Cmd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_RecvDataUnblock
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_RecvDataAndAnalysis
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_CmdSend
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_PackDataAndSend
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_RecvDataUnblock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_Set
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_PackDataAndSend
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ID_Test
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_callback
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubC0_gint5_callback
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubC0_gint4_callback
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubC0_gint1_callback
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_RTC_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCI_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCI_DET_IRQHandler
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2_sym_op
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_diagnosis
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
</UL>

<P><STRONG><a name="[b0]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[b2]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[b3]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[b4]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b5]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b1]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[7a]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[70]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[b7]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[b9]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[7e]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[86]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[ba]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[80]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[88]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[72]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[bb]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[14d]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPwd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkTestMode
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_base64_decode
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerTokenVerify
</UL>

<P><STRONG><a name="[221]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuModPwdInputAgainFun
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_km_key_name
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2_sym_op
</UL>

<P><STRONG><a name="[3b1]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_HoldToRAM
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleFaceVersionGet
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleCatEyeSN
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgKeyStatusMenuEnter
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_id
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_decrypt
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SmartKeyMatch
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleWifiSetParm1
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleVerifyPhoneEncrypt
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerTokenVerify
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerIssueChallenge
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockUpdateProgramMode
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockFirmwareVersionGet
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleGetMcuVersion
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleEquipmentReg
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelSmartKey
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelPhoneAccount
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAliyunSecretKeySetParm
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddSmartKeyAccredit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddPhoneAccount
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESAddPhoneAccount
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_MatchId
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_RAMToHold
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_CmdSend
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetRecvData
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_DataAddBatch
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_GetRecvData
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFLASH_Write
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_sym_crypto
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_get_id2
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_transmit
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_update
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Data_BulkIn
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enum_realDisk
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendorWriteData
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frameSetPack
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_get_ID
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrypt_ID2_Key
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_cbc1
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_cbc1
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2_sym_op
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_rememberConfiguration
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_loadCbaseCoarse
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_algorithm_filter_NormalDistribution
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[be]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[48c]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2_sym_op
</UL>

<P><STRONG><a name="[c0]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[48d]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TimeGetStm
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTick
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CheckTimeVaild
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_base64_decode
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleTimeSync
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GuoXin2Date
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_RequestSense
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Inquiry
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_TestMode
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA_Init_Algo
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2_sym_op
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_adjustRegister
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[48e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[48f]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[490]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDealService
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgKeyStatusMenuEnter
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuModPwdFun
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPwdTmp
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_PowerDeal
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2_sym_op
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_adjustRegister
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ChkSysData
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Desktop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_DelGeneralFace
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleCatEyeSN
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAddFaceIng
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AddFaceIng
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_WifiLockLogUpdata
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_WifiCmdAlarmUpdata
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_VerifyOk
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerStep
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_GetchannelPwd
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ClearSysData
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SmartKeyMatch
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleVerifyPhoneEncrypt
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleTmpeSecretKeyGet
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleTestServerConnectionStatus
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleQueryLockConfigTable
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockFirmwareVersionGet
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleGetEventRecords
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFingerAttributeModify
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceAttributeModify
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelSmartKey
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelPhoneAccount
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAliyunSecretKeySetParm
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddSmartKeyAccredit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddPhoneAccount
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESTmpeSecretKeyGet
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESAddPhoneAccount
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_VerifyUser
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_GetVersion
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_DelOneUser
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_DelAllUser
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_AddUser
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FaceWifiDeal
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_Cmd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_ClearRxPar
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_ClearTxPar
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2_sym_op
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_rememberConfiguration
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_configInitStruct
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[c5]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[c4]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_SysRamInit
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_DelNUserReg
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_DelOneUserReg
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_Send
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_CealrSend
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_CealrRecv
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SmartKeyMatch
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerTokenVerify
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerIssueChallenge
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_AddUser
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_Store
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_GenImg
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_Play
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetAesKey
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_ClearRxPar
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_ClearRxPar
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_WithCheck
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_log_hex_dump
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_log_hex_dump
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_init
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_adjustRegister
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[491]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[492]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[c7]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerTokenVerify
</UL>

<P><STRONG><a name="[451]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[c9]"></a>mktime</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Stm2Tick
</UL>

<P><STRONG><a name="[493]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[494]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[495]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[96]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[496]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[497]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[cc]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[94]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[ce]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[498]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[ae]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[57]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[8a]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[8c]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[ac]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>

<P><STRONG><a name="[db]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[8e]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[90]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[82]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[b8]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[499]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[49a]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[c2]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[49b]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[49c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[49d]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[d5]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[dd]"></a>_fp_trap</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, _fptrap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
</UL>

<P><STRONG><a name="[df]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[d8]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[d1]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[da]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[cd]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[9b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[a0]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e1]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[de]"></a>__rt_SIGFPE</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_fpe_outer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE_inner
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trap
</UL>

<P><STRONG><a name="[e0]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e6]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE_inner
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[e5]"></a>__rt_SIGFPE_inner</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, defsig_fpe_inner.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE
</UL>

<P><STRONG><a name="[d2]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e9]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[e8]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[eb]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[ea]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[d3]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[d4]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[ec]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[f0]"></a>APP_DefInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_power.o(i.APP_DefInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_DefInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Bufang_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[f2]"></a>APP_DefSet</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_power.o(i.APP_DefSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = APP_DefSet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_BuFang_Time_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SysWakeUpToMenu
</UL>

<P><STRONG><a name="[f4]"></a>APP_FaceCatEyeInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_power.o(i.APP_FaceCatEyeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = APP_FaceCatEyeInit &rArr; HAL_Face_WifiPowClose &rArr; DRV_Face_WifiPowClose &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_IOInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Face_WifiPowClose
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_ClosePow
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[f8]"></a>APP_Finger_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_power.o(i.APP_Finger_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = APP_Finger_Init &rArr; HAL_Finger_Init &rArr; DRV_Finger_Init &rArr; SPI_Flash_ReadID &rArr; Read_ID_Test &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[fa]"></a>APP_GetBackBat</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, app_power.o(i.APP_GetBackBat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2068 + Unknown Stack Size
<LI>Call Chain = APP_GetBackBat &rArr; Menu_Comm_Service &rArr; Menu_Comm_BleRecvDeal &rArr; Menu_Comm_BleServerIssueChallenge &rArr; id2_client_get_challenge_auth_code &rArr; _id2_gen_auth_code &rArr; _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_Service
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_SendDealStart
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[ff]"></a>APP_GetPowerValue</STRONG> (Thumb, 370 bytes, Stack size 8 bytes, app_power.o(i.APP_GetPowerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = APP_GetPowerValue &rArr; HAL_VoicePlayDir &rArr; DRV_Voice_Play &rArr; DRV_Voice_SendDataN &rArr; DRV_Voice_SendData &rArr; I2C_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VoicePlayDir
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLight_batterySetDir
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgKeyStatus
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommGetBattery
</UL>

<P><STRONG><a name="[102]"></a>APP_Power_EnterSleep</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_power.o(i.APP_Power_EnterSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = APP_Power_EnterSleep &rArr; HAL_Power_EnterSleep &rArr; DRV_Power_EnterSleep &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_EnterSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
</UL>

<P><STRONG><a name="[104]"></a>APP_Power_EnterSleepConfig</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, app_power.o(i.APP_Power_EnterSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = APP_Power_EnterSleepConfig &rArr; HAL_Face_EnterSleepConfig &rArr; DRV_Face_EnterSleepConfig &rArr; EPORT_Init &rArr; EPORT_ITConfig &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_EnterSleepConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_EnterSleepConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_ReservedSleepConfig
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeySacn_EnterSleepConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLight_EnterSleepConfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_EnterSleepConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Face_EnterSleepConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_COMM_EnterSleepConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Alarm_SetInterrpt
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Adc_EnterSleepConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_WifiShutdown
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_IRSleepConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
</UL>

<P><STRONG><a name="[10a]"></a>APP_Power_IRSleepConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_power.o(i.APP_Power_IRSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = APP_Power_IRSleepConfig &rArr; HAL_FaceId_IRSleepConfig &rArr; DRV_FaceId_IRSleepConfig &rArr; drv_Subc0_configIOPull
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_IRSleepConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_EnterSleepConfig
</UL>

<P><STRONG><a name="[112]"></a>APP_Power_Init</STRONG> (Thumb, 352 bytes, Stack size 8 bytes, app_power.o(i.APP_Power_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2076 + Unknown Stack Size
<LI>Call Chain = APP_Power_Init &rArr; APP_GetBackBat &rArr; Menu_Comm_Service &rArr; Menu_Comm_BleRecvDeal &rArr; Menu_Comm_BleServerIssueChallenge &rArr; id2_client_get_challenge_auth_code &rArr; _id2_gen_auth_code &rArr; _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WDTFeedDog
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_TrngInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_SysWakeupChk
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_ReuseInterruptWakeupConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_ReservedWakeupConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_CPUInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeySacnInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLightInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Alarm_SetWakeUp
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_SysRamInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Uart_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_WakeupRTCTimerGet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_VolumeSetInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SysWakeUpToMenu
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SysTimerInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_StorageInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetBackBat
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Finger_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FaceCatEyeInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DefInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Comm_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUser_Init
</UL>

<P><STRONG><a name="[10b]"></a>APP_Power_WifiShutdown</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_power.o(i.APP_Power_WifiShutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = APP_Power_WifiShutdown &rArr; HAL_Face_WifiPowClose &rArr; DRV_Face_WifiPowClose &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_LowPowerChk
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Face_WifiPowClose
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_EnterSleepConfig
</UL>

<P><STRONG><a name="[121]"></a>APP_StorageInit</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, app_power.o(i.APP_StorageInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = APP_StorageInit &rArr; HAL_Storage_ChkSysData &rArr; HAL_Storage_ReadSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ReadHardwareData
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ChkSysData
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_EncryptionParam
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[5a]"></a>APP_SysTimerHandler</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, app_power.o(i.APP_SysTimerHandler))
<BR>[Address Reference Count : 1]<UL><LI> app_power.o(i.APP_SysTimerInit)
</UL>
<P><STRONG><a name="[126]"></a>APP_SysTimerInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_power.o(i.APP_SysTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = APP_SysTimerInit &rArr; HAL_SysTimerInit &rArr; DRV_SysTimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SysTimerInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SysTimerHandlerReg
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[125]"></a>APP_SysWakeUpToMenu</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, app_power.o(i.APP_SysWakeUpToMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = APP_SysWakeUpToMenu &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_EnterDesktopVerifyStart
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ChkError
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DefSet
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[124]"></a>APP_VolumeSetInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_power.o(i.APP_VolumeSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = APP_VolumeSetInit &rArr; HAL_Voice_VolumeSet &rArr; DRV_Voice_VolumeSet &rArr; DRV_Voice_SendDataN &rArr; DRV_Voice_SendData &rArr; I2C_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_VolumeSet
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[122]"></a>APP_WakeupRTCTimerGet</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_power.o(i.APP_WakeupRTCTimerGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = APP_WakeupRTCTimerGet &rArr; HAL_RTC_TimeGetStm &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TimeGetStm
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetByTick
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[1f]"></a>ASYNC_TIMER_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, pci_drv.o(i.ASYNC_TIMER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ASYNC_TIMER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>ATR_Handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, apdu_drv.o(i.ATR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATR_Handler &rArr; SendATR
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATR
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIx_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>Aesop</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, aes_drv.o(i.Aesop))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMAC_2ALG
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_cbc1
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_cbc1
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2_sym_op
</UL>

<P><STRONG><a name="[137]"></a>AppUser_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, appuser.o(i.AppUser_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2084 + Unknown Stack Size
<LI>Call Chain = AppUser_Init &rArr; APP_Power_Init &rArr; APP_GetBackBat &rArr; Menu_Comm_Service &rArr; Menu_Comm_BleRecvDeal &rArr; Menu_Comm_BleServerIssueChallenge &rArr; id2_client_get_challenge_auth_code &rArr; _id2_gen_auth_code &rArr; _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>AppUser_Service</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, appuser.o(i.AppUser_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 2068 + Unknown Stack Size
<LI>Call Chain = AppUser_Service &rArr; Menu_Comm_Service &rArr; Menu_Comm_BleRecvDeal &rArr; Menu_Comm_BleServerIssueChallenge &rArr; id2_client_get_challenge_auth_code &rArr; _id2_gen_auth_code &rArr; _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_WifiService
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_VoiceService
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDealService
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyBackLightService
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FingerService
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AutoMenuReturn
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SysTimeDeal
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_Service
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WDTFeedDog
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[157]"></a>Audio_ISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dac_audio.o(i.Audio_ISR))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_IRQHandler
</UL>

<P><STRONG><a name="[155]"></a>BasicFunc_GetSumChk</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, basicfunc.o(i.BasicFunc_GetSumChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BasicFunc_GetSumChk
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_WifiDataPack
</UL>

<P><STRONG><a name="[c]"></a>BusFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, system_armcm4.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = BusFault_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[37b]"></a>CPM_OSC_Switch</STRONG> (Thumb, 452 bytes, Stack size 0 bytes, clk_switch_drv.o(i.CPM_OSC_Switch))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Clk_Init
</UL>

<P><STRONG><a name="[294]"></a>CPM_PWRCR_OptBits</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, reg_opt_drv.o(i.CPM_PWRCR_OptBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CPM_PWRCR_OptBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Latch_Clr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Standby
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVD_EN
</UL>

<P><STRONG><a name="[142]"></a>CPM_PowerOff_1p5</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, cpm_drv.o(i.CPM_PowerOff_1p5))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CPM_PowerOff_1p5 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Standby
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_overwrite_test_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_EnterSleep
</UL>

<P><STRONG><a name="[146]"></a>CPM_Sleep</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, cpm_drv.o(i.CPM_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CPM_Sleep &rArr; Sys_Standby &rArr; CPM_PWRCR_OptBits
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Standby
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_overwrite_test_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCI_AsyncTC_Init
</UL>

<P><STRONG><a name="[147]"></a>CPM_SysClkSelect</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, cpm_drv.o(i.CPM_SysClkSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CPM_SysClkSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFLASH_Set_RWSC
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpm_set_sysclk_div
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Clk_Init
</UL>

<P><STRONG><a name="[14a]"></a>CPM_Vref_Trim</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, cpm_drv.o(i.CPM_Vref_Trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPM_Vref_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_Write_CoreTestKey
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Clk_Init
</UL>

<P><STRONG><a name="[14b]"></a>CPM_Write_CoreTestKey</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, cpm_drv.o(i.CPM_Write_CoreTestKey))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_POR_Reset
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_Vref_Trim
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_overwrite_test_mode
</UL>

<P><STRONG><a name="[14c]"></a>ChkPwd</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, menu_getinputinfo.o(i.ChkPwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ChkPwd &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPwdTmp
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPwdSOS
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPwdNormal
</UL>

<P><STRONG><a name="[43c]"></a>ClearRx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbdev_control.o(i.ClearRx))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ep_buf
</UL>

<P><STRONG><a name="[153]"></a>Comm_WifiCmdSend</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hal_faceid.o(i.Comm_WifiCmdSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Comm_WifiCmdSend &rArr; Comm_WifiDataPack &rArr; BasicFunc_GetSumChk
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_WifiDataPack
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_WifiLockLogUpdata
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_WifiCmdAlarmUpdata
</UL>

<P><STRONG><a name="[37e]"></a>DCACHE_Init</STRONG> (Thumb, 340 bytes, Stack size 12 bytes, cache_drv.o(i.DCACHE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DCACHE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[4c]"></a>DCMI_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, c0_drv.o(i.DCMI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DCMI_IRQHandler &rArr; drv_SubC0_callback &rArr; SubC0_gint5_callback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, dmac_drv.o(i.DMA1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA2_IRQHandler</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, dmac_drv.o(i.DMA2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_ISR
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClrInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[158]"></a>DMA_ClrInt</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, dmac_drv.o(i.DMA_ClrInt))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_IRQHandler
</UL>

<P><STRONG><a name="[223]"></a>DRV_Adc_EnterSleepConfig</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_adc.o(i.DRV_Adc_EnterSleepConfig))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Adc_EnterSleepConfig
</UL>

<P><STRONG><a name="[159]"></a>DRV_Alarm_GetStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, drv_alarm.o(i.DRV_Alarm_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_Alarm_GetStatus &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ReadGpioData
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Alarm_GetStatus
</UL>

<P><STRONG><a name="[15b]"></a>DRV_Alarm_InterrptService</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_alarm.o(i.DRV_Alarm_InterrptService))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_Alarm_InterrptService &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ReadGpioData
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>DRV_Alarm_SetInterrpt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_alarm.o(i.DRV_Alarm_SetInterrpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DRV_Alarm_SetInterrpt &rArr; EPORT_Init &rArr; EPORT_ITConfig &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_PullupConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Alarm_SetInterrpt
</UL>

<P><STRONG><a name="[160]"></a>DRV_Alarm_SetWakeUp</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_alarm.o(i.DRV_Alarm_SetWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_Alarm_SetWakeUp &rArr; EPORT_ConfigGpio &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_PullupConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Alarm_SetWakeUp
</UL>

<P><STRONG><a name="[162]"></a>DRV_BuFang_Time_Detet</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, drv_power.o(i.DRV_BuFang_Time_Detet))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DRV_BuFang_Time_Detet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ReadGpioData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_BuFang_Time_Detet
</UL>

<P><STRONG><a name="[226]"></a>DRV_BuFang_Time_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_power.o(i.DRV_BuFang_Time_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_BuFang_Time_Init
</UL>

<P><STRONG><a name="[164]"></a>DRV_BuFang_Time_Sleep</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, drv_power.o(i.DRV_BuFang_Time_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DRV_BuFang_Time_Sleep &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCI_NVSRAM_WtiteByte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_BuFang_Time_Sleep
</UL>

<P><STRONG><a name="[166]"></a>DRV_COMM_EnterSleepConfig</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, drv_comm.o(i.DRV_COMM_EnterSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_COMM_EnterSleepConfig &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteGpioData
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigGpio
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_Subc0_configIOPull
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ITTypeConfig
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ITConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_COMM_EnterSleepConfig
</UL>

<P><STRONG><a name="[16e]"></a>DRV_COMM_GetRecvContent</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drv_comm.o(i.DRV_COMM_GetRecvContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DRV_COMM_GetRecvContent &rArr; DRV_Comm_GetRecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_GetRecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_GetRecvReply
</UL>

<P><STRONG><a name="[232]"></a>DRV_COMM_GetRecvContentSize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_comm.o(i.DRV_COMM_GetRecvContentSize))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_GetRecvReply
</UL>

<P><STRONG><a name="[235]"></a>DRV_COMM_GetRecvMsgType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_comm.o(i.DRV_COMM_GetRecvMsgType))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_RevcDeal
</UL>

<P><STRONG><a name="[170]"></a>DRV_Comm_ClearRxPar</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drv_comm.o(i.DRV_Comm_ClearRxPar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_Comm_ClearRxPar
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_RevcDeal
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_Init
</UL>

<P><STRONG><a name="[172]"></a>DRV_Comm_CmdSend</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, drv_comm.o(i.DRV_Comm_CmdSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_ecb
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_GetSumChk
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_GetRandomuEncrypt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_GetRandom
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_GetAesKey
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_PackDataAndSend
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_ClearTxPar
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_CmdSend
</UL>

<P><STRONG><a name="[176]"></a>DRV_Comm_GetAesKey</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, drv_comm.o(i.DRV_Comm_GetAesKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DRV_Comm_GetAesKey
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_RecvDataAndAnalysis
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_CmdSend
</UL>

<P><STRONG><a name="[174]"></a>DRV_Comm_GetRandom</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_comm.o(i.DRV_Comm_GetRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DRV_Comm_GetRandom
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Trng
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandomWord
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_CmdSend
</UL>

<P><STRONG><a name="[175]"></a>DRV_Comm_GetRandomuEncrypt</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_comm.o(i.DRV_Comm_GetRandomuEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DRV_Comm_GetRandomuEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Trng
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandomWord
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_CmdSend
</UL>

<P><STRONG><a name="[173]"></a>DRV_Comm_GetSumChk</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_comm.o(i.DRV_Comm_GetSumChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_Comm_GetSumChk
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_RecvDataAndAnalysis
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_CmdSend
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleDataPack
</UL>

<P><STRONG><a name="[17b]"></a>DRV_Comm_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, drv_comm.o(i.DRV_Comm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DRV_Comm_Init &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_ClearRxPar
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_Subc0_configIOPull
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_Init
</UL>

<P><STRONG><a name="[17e]"></a>DRV_Comm_RecvDataAndAnalysis</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, drv_comm.o(i.DRV_Comm_RecvDataAndAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = DRV_Comm_RecvDataAndAnalysis &rArr; aes_decrypt_ecb &rArr; aes_decrypt &rArr; inv_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_ecb
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_GetSumChk
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_GetAesKey
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_RevcDeal
</UL>

<P><STRONG><a name="[180]"></a>DRV_Comm_RecvDataUnblock</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, drv_comm.o(i.DRV_Comm_RecvDataUnblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = DRV_Comm_RecvDataUnblock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RecvByte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_RevcDeal
</UL>

<P><STRONG><a name="[182]"></a>DRV_Comm_RstBack</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drv_comm.o(i.DRV_Comm_RstBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_Comm_RstBack &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_RstBack
</UL>

<P><STRONG><a name="[184]"></a>DRV_Comm_WakeupBack</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_comm.o(i.DRV_Comm_WakeupBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_Comm_WakeupBack &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_WakeupBack
</UL>

<P><STRONG><a name="[185]"></a>DRV_FaceId_ClearRxPar</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drv_faceid.o(i.DRV_FaceId_ClearRxPar))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DRV_FaceId_ClearRxPar &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_RevcDeal
</UL>

<P><STRONG><a name="[187]"></a>DRV_FaceId_ClosePow</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_faceid.o(i.DRV_FaceId_ClosePow))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_FaceId_ClosePow &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_ClosePow
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_PowerDeal
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdPowerOffDir
</UL>

<P><STRONG><a name="[188]"></a>DRV_FaceId_CmdSend</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, drv_faceid.o(i.DRV_FaceId_CmdSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = DRV_FaceId_CmdSend &rArr; DRV_FaceId_PackDataAndSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_SyncWordSet
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_SizeSet
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_PackDataAndSend
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_MsgIdSet
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_DataAddBatch
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_ClearTxPar
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdSend
</UL>

<P><STRONG><a name="[18f]"></a>DRV_FaceId_GetAesKey</STRONG> (Thumb, 164 bytes, Stack size 152 bytes, drv_faceid.o(i.DRV_FaceId_GetAesKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = DRV_FaceId_GetAesKey &rArr; MD5Final &rArr; MD5Update &rArr; MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_PowerDeal
</UL>

<P><STRONG><a name="[249]"></a>DRV_FaceId_GetRecvMsgSize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_faceid.o(i.DRV_FaceId_GetRecvMsgSize))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_GetRecvReply
</UL>

<P><STRONG><a name="[24e]"></a>DRV_FaceId_GetRecvMsgType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_faceid.o(i.DRV_FaceId_GetRecvMsgType))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_RevcDeal
</UL>

<P><STRONG><a name="[194]"></a>DRV_FaceId_GetRecvNoteData</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drv_faceid.o(i.DRV_FaceId_GetRecvNoteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DRV_FaceId_GetRecvNoteData &rArr; DRV_FaceId_GetRecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetRecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_GetRecvNote
</UL>

<P><STRONG><a name="[195]"></a>DRV_FaceId_GetRecvNoteNid</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_faceid.o(i.DRV_FaceId_GetRecvNoteNid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DRV_FaceId_GetRecvNoteNid &rArr; DRV_FaceId_GetRecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetRecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_GetRecvNote
</UL>

<P><STRONG><a name="[196]"></a>DRV_FaceId_GetRecvReplyData</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drv_faceid.o(i.DRV_FaceId_GetRecvReplyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DRV_FaceId_GetRecvReplyData &rArr; DRV_FaceId_GetRecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetRecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_GetRecvReply
</UL>

<P><STRONG><a name="[197]"></a>DRV_FaceId_GetRecvReplyMid</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_faceid.o(i.DRV_FaceId_GetRecvReplyMid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DRV_FaceId_GetRecvReplyMid &rArr; DRV_FaceId_GetRecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetRecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_GetRecvReply
</UL>

<P><STRONG><a name="[198]"></a>DRV_FaceId_IRSleepConfig</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, drv_faceid.o(i.DRV_FaceId_IRSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DRV_FaceId_IRSleepConfig &rArr; drv_Subc0_configIOPull
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_Subc0_configIOPull
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ITTypeConfig
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ITConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_IRSleepConfig
</UL>

<P><STRONG><a name="[199]"></a>DRV_FaceId_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, drv_faceid.o(i.DRV_FaceId_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DRV_FaceId_Init &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_WriteGpioData
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ConfigGpio
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_PullupConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_Init
</UL>

<P><STRONG><a name="[19b]"></a>DRV_FaceId_OpenPow</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_faceid.o(i.DRV_FaceId_OpenPow))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_FaceId_OpenPow &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_PowerDeal
</UL>

<P><STRONG><a name="[1a0]"></a>DRV_FaceId_RecvDataAndAnalysis</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, drv_faceid.o(i.DRV_FaceId_RecvDataAndAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = DRV_FaceId_RecvDataAndAnalysis &rArr; aes_decrypt_ecb &rArr; aes_decrypt &rArr; inv_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_ecb
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_MoveData
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetOrChk
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_RevcDeal
</UL>

<P><STRONG><a name="[1a1]"></a>DRV_FaceId_RecvDataUnblock</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, drv_faceid.o(i.DRV_FaceId_RecvDataUnblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DRV_FaceId_RecvDataUnblock &rArr; UART_RecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RecvByte
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_RevcDeal
</UL>

<P><STRONG><a name="[1a2]"></a>DRV_Face_CateyeFaceSw</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drv_faceid.o(i.DRV_Face_CateyeFaceSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DRV_Face_CateyeFaceSw &rArr; drv_SubC0_WriteGpioData
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_WriteGpioData
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_PowerDeal
</UL>

<P><STRONG><a name="[1a3]"></a>DRV_Face_EnterSleepConfig</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, drv_faceid.o(i.DRV_Face_EnterSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DRV_Face_EnterSleepConfig &rArr; EPORT_Init &rArr; EPORT_ITConfig &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteGpioData
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigGpio
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_WriteGpioData
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_PullupConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Face_EnterSleepConfig
</UL>

<P><STRONG><a name="[1a4]"></a>DRV_Face_WifiPowClose</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, drv_faceid.o(i.DRV_Face_WifiPowClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_Face_WifiPowClose &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_WriteGpioData
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ConfigGpio
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteGpioData
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Face_WifiPowClose
</UL>

<P><STRONG><a name="[1a7]"></a>DRV_Face_WifiPowOpen</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_faceid.o(i.DRV_Face_WifiPowOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_Face_WifiPowOpen &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdDealStart
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_SetLinkKeyStart
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_GetDeviceNameStart
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_ConfigWifiDataStart
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_PowerDeal
</UL>

<P><STRONG><a name="[255]"></a>DRV_Finger_ChkFingerLeave</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drv_finger.o(i.DRV_Finger_ChkFingerLeave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_Finger_ChkFingerLeave
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_ChkFingerLeave
</UL>

<P><STRONG><a name="[1a8]"></a>DRV_Finger_DeletChar</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, drv_finger.o(i.DRV_Finger_DeletChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_Finger_DeletChar &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Del
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_Empty
</UL>

<P><STRONG><a name="[1a9]"></a>DRV_Finger_Empty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_finger.o(i.DRV_Finger_Empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DRV_Finger_Empty &rArr; DRV_Finger_DeletChar &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_DeletChar
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Empty
</UL>

<P><STRONG><a name="[1aa]"></a>DRV_Finger_EnterSleepConfig</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, drv_finger.o(i.DRV_Finger_EnterSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_Finger_EnterSleepConfig &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_Subc0_configIOPull
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ITTypeConfig
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ITConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ConfigGpio
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteGpioData
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_EnterSleepConfig
</UL>

<P><STRONG><a name="[1ab]"></a>DRV_Finger_GenImg</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, drv_finger.o(i.DRV_Finger_GenImg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DRV_Finger_GenImg &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ReadGpioData
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Verify
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Reg
</UL>

<P><STRONG><a name="[25a]"></a>DRV_Finger_GetAckData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_finger.o(i.DRV_Finger_GetAckData))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Init
</UL>

<P><STRONG><a name="[1ac]"></a>DRV_Finger_HardWareInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_finger.o(i.DRV_Finger_HardWareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_Finger_HardWareInit &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSpiInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_Init
</UL>

<P><STRONG><a name="[25c]"></a>DRV_Finger_Img2Tz</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_finger.o(i.DRV_Finger_Img2Tz))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Verify
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Reg
</UL>

<P><STRONG><a name="[1b0]"></a>DRV_Finger_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, drv_finger.o(i.DRV_Finger_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DRV_Finger_Init &rArr; SPI_Flash_ReadID &rArr; Read_ID_Test &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_Subc0_configIOPull
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ITConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ConfigGpio
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadID
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_HardWareInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Init
</UL>

<P><STRONG><a name="[1b2]"></a>DRV_Finger_RegModel</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, drv_finger.o(i.DRV_Finger_RegModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = DRV_Finger_RegModel &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Reg
</UL>

<P><STRONG><a name="[257]"></a>DRV_Finger_ResetCmd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_finger.o(i.DRV_Finger_ResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Verify
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Reg
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Empty
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Del
</UL>

<P><STRONG><a name="[25e]"></a>DRV_Finger_Serach</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, drv_finger.o(i.DRV_Finger_Serach))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DRV_Finger_Serach
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Verify
</UL>

<P><STRONG><a name="[1b3]"></a>DRV_Finger_Store</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, drv_finger.o(i.DRV_Finger_Store))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DRV_Finger_Store &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Reg
</UL>

<P><STRONG><a name="[1b4]"></a>DRV_IR_ClearRxPar</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_ir.o(i.DRV_IR_ClearRxPar))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DRV_IR_ClearRxPar &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_ClearRxPar
</UL>

<P><STRONG><a name="[1b5]"></a>DRV_IR_IOInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_ir.o(i.DRV_IR_IOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DRV_IR_IOInit &rArr; drv_Subc0_configIOPull
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_Subc0_configIOPull
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ITConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_IOInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_Init
</UL>

<P><STRONG><a name="[1b6]"></a>DRV_IR_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_ir.o(i.DRV_IR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DRV_IR_Init &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_WriteGpioData
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ConfigGpio
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_IOInit
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_Init
</UL>

<P><STRONG><a name="[1b7]"></a>DRV_IR_ReadIRQ</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_ir.o(i.DRV_IR_ReadIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DRV_IR_ReadIRQ &rArr; drv_SubC0_ReadGpioData
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ReadGpioData
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_ReadIRQ
</UL>

<P><STRONG><a name="[1b8]"></a>DRV_IR_RecvDataUnblock</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, drv_ir.o(i.DRV_IR_RecvDataUnblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DRV_IR_RecvDataUnblock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RecvByte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_RecvDataUnblock
</UL>

<P><STRONG><a name="[1b9]"></a>DRV_IR_SendData</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_ir.o(i.DRV_IR_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DRV_IR_SendData &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_SendData
</UL>

<P><STRONG><a name="[1ba]"></a>DRV_IR_UartColse</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_ir.o(i.DRV_IR_UartColse))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_IR_UartColse &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_WriteGpioData
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_UartColse
</UL>

<P><STRONG><a name="[1bb]"></a>DRV_KeySacn_EnterSleepConfig</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_keysacn.o(i.DRV_KeySacn_EnterSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DRV_KeySacn_EnterSleepConfig &rArr; app_tsi_sleep &rArr; hal_tsi_switchLowpower &rArr; hal_tsi_loadDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeySacn_EnterSleepConfig
</UL>

<P><STRONG><a name="[1bd]"></a>DRV_KeySacn_GetValue</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, drv_keysacn.o(i.DRV_KeySacn_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = DRV_KeySacn_GetValue &rArr; TouchTask_ReadAction &rArr; Touch_GetKeyValue &rArr; app_tsi_handle &rArr; hal_tsi_adjustRegister &rArr; hal_tsi_switchFineMode &rArr; hal_tsi_waitScanFinished
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchTask_ReadAction
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeySacnGet
</UL>

<P><STRONG><a name="[1bf]"></a>DRV_KeySacn_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_keysacn.o(i.DRV_KeySacn_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DRV_KeySacn_Init &rArr; app_tsi_init &rArr; hal_tsi_loadCbaseCoarse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeySacnInit
</UL>

<P><STRONG><a name="[1c2]"></a>DRV_MBI5024_EnterSleepConfig</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, drv_mbi5024.o(i.DRV_MBI5024_EnterSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_MBI5024_EnterSleepConfig &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_SysStatusSet
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLight_EnterSleepConfig
</UL>

<P><STRONG><a name="[1c4]"></a>DRV_MBI5024_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, drv_mbi5024.o(i.DRV_MBI5024_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DRV_MBI5024_Init &rArr; DRV_MBI5024_Out &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_Out
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_LEDInit
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLightInit
</UL>

<P><STRONG><a name="[1c7]"></a>DRV_MBI5024_LEDClose</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_mbi5024.o(i.DRV_MBI5024_LEDClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_MBI5024_LEDClose &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLightStatusRun
</UL>

<P><STRONG><a name="[1c8]"></a>DRV_MBI5024_LEDOpen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_mbi5024.o(i.DRV_MBI5024_LEDOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_MBI5024_LEDOpen &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLightStatusRun
</UL>

<P><STRONG><a name="[1c5]"></a>DRV_MBI5024_Out</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, drv_mbi5024.o(i.DRV_MBI5024_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DRV_MBI5024_Out &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLightDeal
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLight_batterySetDir
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLight_DirDispaly
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_Init
</UL>

<P><STRONG><a name="[1c3]"></a>DRV_MBI5024_SysStatusSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_mbi5024.o(i.DRV_MBI5024_SysStatusSet))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_EnterSleepConfig
</UL>

<P><STRONG><a name="[1ca]"></a>DRV_OnChipFlash_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, drv_onchipflash.o(i.DRV_OnChipFlash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DRV_OnChipFlash_Init &rArr; EFLASH_Init &rArr; EFM_Init &rArr; eflash_set_verify_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFLASH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OnChipFlash_Init
</UL>

<P><STRONG><a name="[1d0]"></a>DRV_OnChipFlash_Write</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, drv_onchipflash.o(i.DRV_OnChipFlash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DRV_OnChipFlash_Write &rArr; EFLASH_Write &rArr; EFLASH_WordsProg &rArr; EFlash_Bulk_Program
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFLASH_Write
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_OnChipFlash_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_OnChipFlash_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OnChipFlash_Write
</UL>

<P><STRONG><a name="[1d2]"></a>DRV_Power_CPUInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, drv_power.o(i.DRV_Power_CPUInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = DRV_Power_CPUInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Latch_Clr
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrput_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_CPUInit
</UL>

<P><STRONG><a name="[1d7]"></a>DRV_Power_CPURst</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_power.o(i.DRV_Power_CPURst))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DRV_Power_CPURst &rArr; Set_POR_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_POR_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_CPURst
</UL>

<P><STRONG><a name="[1d9]"></a>DRV_Power_EnterSleep</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, drv_power.o(i.DRV_Power_EnterSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = DRV_Power_EnterSleep &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ReTry_Time_Set
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_sleep
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCI_AsyncTC_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_PowerOff_1p5
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_EnterSleep
</UL>

<P><STRONG><a name="[1dd]"></a>DRV_Power_GetRandomWord</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_power.o(i.DRV_Power_GetRandomWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_Power_GetRandomWord
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandomWord
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_GetRandomWord
</UL>

<P><STRONG><a name="[1de]"></a>DRV_Power_HoldToRAM</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, drv_power.o(i.DRV_Power_HoldToRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DRV_Power_HoldToRAM &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_SysRamInit
</UL>

<P><STRONG><a name="[1df]"></a>DRV_Power_RAMToHold</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, drv_power.o(i.DRV_Power_RAMToHold))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DRV_Power_RAMToHold &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_RAMToHold
</UL>

<P><STRONG><a name="[1e0]"></a>DRV_Power_ReservedSleepConfig</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, drv_power.o(i.DRV_Power_ReservedSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_Power_ReservedSleepConfig &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_WriteGpioData
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ConfigGpio
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteGpioData
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ConfigGpio
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_ReservedSleepConfig
</UL>

<P><STRONG><a name="[1e2]"></a>DRV_Power_ReservedWakeupConfig</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, drv_power.o(i.DRV_Power_ReservedWakeupConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_Power_ReservedWakeupConfig &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_WriteGpioData
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ConfigGpio
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteGpioData
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ConfigGpio
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_ReservedWakeupConfig
</UL>

<P><STRONG><a name="[211]"></a>DRV_Power_ReuseInterrptService</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_power.o(i.DRV_Power_ReuseInterrptService))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_IRQHandler
</UL>

<P><STRONG><a name="[271]"></a>DRV_Power_ReuseInterruptWakeupConfig</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_power.o(i.DRV_Power_ReuseInterruptWakeupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_ReuseInterruptWakeupConfig
</UL>

<P><STRONG><a name="[1e3]"></a>DRV_Power_SysWakeupChk</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, drv_power.o(i.DRV_Power_SysWakeupChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DRV_Power_SysWakeupChk &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_SysWakeupChk
</UL>

<P><STRONG><a name="[1e4]"></a>DRV_Power_TrngInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_power.o(i.DRV_Power_TrngInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_Power_TrngInit
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Trng
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_TrngInit
</UL>

<P><STRONG><a name="[1e5]"></a>DRV_RTC_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_rtc.o(i.DRV_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_RTC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1e7]"></a>DRV_RTC_SetByTick</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, drv_rtc.o(i.DRV_RTC_SetByTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DRV_RTC_SetByTick &rArr; RTC_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Seconds2Date
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetByTick
</UL>

<P><STRONG><a name="[1ea]"></a>DRV_RTC_TimeGet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_rtc.o(i.DRV_RTC_TimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DRV_RTC_TimeGet &rArr; RTC_GuoXin2Date &rArr; RTC_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GuoXin2Date
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TimeGetStm
</UL>

<P><STRONG><a name="[1db]"></a>DRV_ReTry_Time_Set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_power.o(i.DRV_ReTry_Time_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DRV_ReTry_Time_Set &rArr; Nvram_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCI_NVSRAM_WtiteByte
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvram_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_EnterSleep
</UL>

<P><STRONG><a name="[1ed]"></a>DRV_Storage_EnterSleepConfig</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, drv_storage.o(i.DRV_Storage_EnterSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_Storage_EnterSleepConfig &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_EnterSleepConfig
</UL>

<P><STRONG><a name="[1ee]"></a>DRV_Storage_EraseSector</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_storage.o(i.DRV_Storage_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DRV_Storage_EraseSector &rArr; W25QXX_Erase_Sector &rArr; SSI_EFlash_Sector_Erase &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ClearUserData
</UL>

<P><STRONG><a name="[1f0]"></a>DRV_Storage_ReadWrite</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, drv_storage.o(i.DRV_Storage_ReadWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_Rw
</UL>

<P><STRONG><a name="[379]"></a>DRV_SysTimerHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_systimer.o(i.DRV_SysTimerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_SysTimerHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[285]"></a>DRV_SysTimerHandlerReg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_systimer.o(i.DRV_SysTimerHandlerReg))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SysTimerHandlerReg
</UL>

<P><STRONG><a name="[1f3]"></a>DRV_SysTimerInit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, drv_systimer.o(i.DRV_SysTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DRV_SysTimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SysTimerInit
</UL>

<P><STRONG><a name="[1f5]"></a>DRV_Voice_Bell</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_voice.o(i.DRV_Voice_Bell))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_Voice_Bell &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VoiceDeal
</UL>

<P><STRONG><a name="[1f6]"></a>DRV_Voice_BellEnterSleepConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_voice.o(i.DRV_Voice_BellEnterSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_Voice_BellEnterSleepConfig &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_EnterSleepConfig
</UL>

<P><STRONG><a name="[1f7]"></a>DRV_Voice_EnterSleepConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drv_voice.o(i.DRV_Voice_EnterSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_Voice_EnterSleepConfig &rArr; I2C_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteGpioData
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_EnterSleepConfig
</UL>

<P><STRONG><a name="[1f9]"></a>DRV_Voice_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, drv_voice.o(i.DRV_Voice_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_Voice_Init &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteGpioData
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_Init
</UL>

<P><STRONG><a name="[1fa]"></a>DRV_Voice_Play</STRONG> (Thumb, 2446 bytes, Stack size 48 bytes, drv_voice.o(i.DRV_Voice_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = DRV_Voice_Play &rArr; DRV_Voice_SendDataN &rArr; DRV_Voice_SendData &rArr; I2C_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_SendDataN
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VoicePlayDir
</UL>

<P><STRONG><a name="[1fe]"></a>DRV_Voice_VolumeSet</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, drv_voice.o(i.DRV_Voice_VolumeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = DRV_Voice_VolumeSet &rArr; DRV_Voice_SendDataN &rArr; DRV_Voice_SendData &rArr; I2C_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_SendDataN
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_VolumeSet
</UL>

<P><STRONG><a name="[1ff]"></a>DRV_WDTFeedDog</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_power.o(i.DRV_WDTFeedDog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_WDTFeedDog
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_FeedDog
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WDTFeedDog
</UL>

<P><STRONG><a name="[f]"></a>DebugMon_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, system_armcm4.o(i.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = DebugMon_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>Debug_Uart_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_power.o(i.Debug_Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Debug_Uart_Init &rArr; UART_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[fd]"></a>DelayMS</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, delay.o(i.DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetPowerValue
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetBackBat
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuModPwdInputAgainFun
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleToolTestFail
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleMcuEnterUpdataMode
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleGetEventRecords
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Storage_ReadWrite
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_RstBack
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_SendDataN
</UL>

<P><STRONG><a name="[1fd]"></a>DelayUS</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, delay.o(i.DelayUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_SendData
</UL>

<P><STRONG><a name="[136]"></a>EDMAC_2ALG</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, edma_drv.o(i.EDMAC_2ALG))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_edmac_new
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_op
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aesop
</UL>

<P><STRONG><a name="[447]"></a>EDMAC_ControlConfig</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, edma.o(i.EDMAC_ControlConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EDMAC_ControlConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSpiWriteRead
</UL>

<P><STRONG><a name="[446]"></a>EDMAC_Disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, edma.o(i.EDMAC_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSpiWriteRead
</UL>

<P><STRONG><a name="[448]"></a>EDMAC_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, edma.o(i.EDMAC_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSpiWriteRead
</UL>

<P><STRONG><a name="[449]"></a>EDMAC_IsDone</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, edma.o(i.EDMAC_IsDone))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSpiWriteRead
</UL>

<P><STRONG><a name="[1cd]"></a>EFLASH_ClrWritePermission</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, eflash_drv.o(i.EFLASH_ClrWritePermission))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EFLASH_ClrWritePermission
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFlash_Set_Main_Permission
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_OnChipFlash_Lock
</UL>

<P><STRONG><a name="[1cb]"></a>EFLASH_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, eflash_drv.o(i.EFLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EFLASH_Init &rArr; EFM_Init &rArr; eflash_set_verify_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_OnChipFlash_Init
</UL>

<P><STRONG><a name="[208]"></a>EFLASH_PageErase</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, eflash_drv.o(i.EFLASH_PageErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EFLASH_PageErase &rArr; EFlash_Page_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFlash_Page_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFLASH_Write
</UL>

<P><STRONG><a name="[1cf]"></a>EFLASH_SetWritePermission</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, eflash_drv.o(i.EFLASH_SetWritePermission))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EFLASH_SetWritePermission
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFlash_Set_Main_Permission
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_OnChipFlash_Unlock
</UL>

<P><STRONG><a name="[148]"></a>EFLASH_Set_RWSC</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, eflash_drv.o(i.EFLASH_Set_RWSC))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_SysClkSelect
</UL>

<P><STRONG><a name="[20a]"></a>EFLASH_WordsProg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, eflash_drv.o(i.EFLASH_WordsProg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EFLASH_WordsProg &rArr; EFlash_Bulk_Program
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFlash_Bulk_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFLASH_Write
</UL>

<P><STRONG><a name="[1d1]"></a>EFLASH_Write</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, eflash_drv.o(i.EFLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EFLASH_Write &rArr; EFLASH_WordsProg &rArr; EFlash_Bulk_Program
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFLASH_PageErase
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFLASH_WordsProg
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_checkAddr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_OnChipFlash_Write
</UL>

<P><STRONG><a name="[207]"></a>EFM_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, eflash.o(i.EFM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EFM_Init &rArr; eflash_set_verify_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_set_verify_cnt
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_set_rwsc
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFLASH_Init
</UL>

<P><STRONG><a name="[20b]"></a>EFlash_Bulk_Program</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, eflash.o(i.EFlash_Bulk_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EFlash_Bulk_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFLASH_WordsProg
</UL>

<P><STRONG><a name="[209]"></a>EFlash_Page_Erase</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eflash.o(i.EFlash_Page_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EFlash_Page_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFLASH_PageErase
</UL>

<P><STRONG><a name="[206]"></a>EFlash_Set_Main_Permission</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, eflash.o(i.EFlash_Set_Main_Permission))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFLASH_SetWritePermission
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFLASH_ClrWritePermission
</UL>

<P><STRONG><a name="[17]"></a>ENCR_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, edma_drv.o(i.ENCR_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EPORT0_0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, eport_drv.o(i.EPORT0_0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = EPORT0_0_IRQHandler &rArr; EPORT_IRQHandler &rArr; DRV_Alarm_InterrptService &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EPORT0_1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, eport_drv.o(i.EPORT0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = EPORT0_1_IRQHandler &rArr; EPORT_IRQHandler &rArr; DRV_Alarm_InterrptService &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EPORT0_2_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, eport_drv.o(i.EPORT0_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = EPORT0_2_IRQHandler &rArr; EPORT_IRQHandler &rArr; DRV_Alarm_InterrptService &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EPORT0_3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, eport_drv.o(i.EPORT0_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = EPORT0_3_IRQHandler &rArr; EPORT_IRQHandler &rArr; DRV_Alarm_InterrptService &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EPORT0_4_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, eport_drv.o(i.EPORT0_4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = EPORT0_4_IRQHandler &rArr; EPORT_IRQHandler &rArr; DRV_Alarm_InterrptService &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EPORT0_5_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, eport_drv.o(i.EPORT0_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = EPORT0_5_IRQHandler &rArr; EPORT_IRQHandler &rArr; DRV_Alarm_InterrptService &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EPORT0_6_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, eport_drv.o(i.EPORT0_6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = EPORT0_6_IRQHandler &rArr; EPORT_IRQHandler &rArr; DRV_Alarm_InterrptService &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EPORT0_7_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, eport_drv.o(i.EPORT0_7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = EPORT0_7_IRQHandler &rArr; EPORT_IRQHandler &rArr; DRV_Alarm_InterrptService &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EPORT1_0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, eport_drv.o(i.EPORT1_0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = EPORT1_0_IRQHandler &rArr; EPORT_IRQHandler &rArr; DRV_Alarm_InterrptService &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EPORT1_1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, eport_drv.o(i.EPORT1_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = EPORT1_1_IRQHandler &rArr; EPORT_IRQHandler &rArr; DRV_Alarm_InterrptService &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EPORT1_2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, eport_drv.o(i.EPORT1_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = EPORT1_2_IRQHandler &rArr; EPORT_IRQHandler &rArr; DRV_Alarm_InterrptService &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EPORT1_3_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, eport_drv.o(i.EPORT1_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = EPORT1_3_IRQHandler &rArr; EPORT_IRQHandler &rArr; DRV_Alarm_InterrptService &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EPORT1_4_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, eport_drv.o(i.EPORT1_4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = EPORT1_4_IRQHandler &rArr; EPORT_IRQHandler &rArr; DRV_Alarm_InterrptService &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EPORT1_5_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, eport_drv.o(i.EPORT1_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = EPORT1_5_IRQHandler &rArr; EPORT_IRQHandler &rArr; DRV_Alarm_InterrptService &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EPORT1_6_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, eport_drv.o(i.EPORT1_6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = EPORT1_6_IRQHandler &rArr; EPORT_IRQHandler &rArr; DRV_Alarm_InterrptService &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EPORT1_7_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, eport_drv.o(i.EPORT1_7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = EPORT1_7_IRQHandler &rArr; EPORT_IRQHandler &rArr; DRV_Alarm_InterrptService &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[15d]"></a>EPORT_ConfigGpio</STRONG> (Thumb, 686 bytes, Stack size 16 bytes, eport_drv.o(i.EPORT_ConfigGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = EPORT_ConfigGpio &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_InitBack
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_EnterSleepConfig
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Storage_EnterSleepConfig
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_BellEnterSleepConfig
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_ReservedWakeupConfig
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_ReservedSleepConfig
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_Out
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_EnterSleepConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_WifiPowOpen
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_WifiPowClose
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_EnterSleepConfig
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_OpenPow
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_ClosePow
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_WakeupBack
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_RstBack
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_COMM_EnterSleepConfig
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_LEDInit
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_UartColse
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Alarm_SetWakeUp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Alarm_SetInterrpt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_HardWareInit
</UL>

<P><STRONG><a name="[161]"></a>EPORT_ITConfig</STRONG> (Thumb, 460 bytes, Stack size 16 bytes, eport_drv.o(i.EPORT_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = EPORT_ITConfig &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Alarm_SetWakeUp
</UL>

<P><STRONG><a name="[212]"></a>EPORT_ITTypeConfig</STRONG> (Thumb, 1726 bytes, Stack size 16 bytes, eport_drv.o(i.EPORT_ITTypeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = EPORT_ITTypeConfig &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_Init
</UL>

<P><STRONG><a name="[15f]"></a>EPORT_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, eport_drv.o(i.EPORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = EPORT_Init &rArr; EPORT_ITConfig &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ITConfig
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ITTypeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_EnterSleepConfig
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Alarm_SetInterrpt
</UL>

<P><STRONG><a name="[15e]"></a>EPORT_PullupConfig</STRONG> (Thumb, 452 bytes, Stack size 16 bytes, eport_drv.o(i.EPORT_PullupConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = EPORT_PullupConfig &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_EnterSleepConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Alarm_SetWakeUp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Alarm_SetInterrpt
</UL>

<P><STRONG><a name="[15a]"></a>EPORT_ReadGpioData</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, eport_drv.o(i.EPORT_ReadGpioData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Alarm_GetStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Alarm_InterrptService
</UL>

<P><STRONG><a name="[169]"></a>EPORT_WriteGpioData</STRONG> (Thumb, 536 bytes, Stack size 16 bytes, eport_drv.o(i.EPORT_WriteGpioData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_InitBack
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_EnterSleepConfig
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Storage_EnterSleepConfig
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_BellEnterSleepConfig
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_Bell
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_ReservedWakeupConfig
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_ReservedSleepConfig
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_Out
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_LEDOpen
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_LEDClose
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_EnterSleepConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_WifiPowOpen
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_WifiPowClose
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_EnterSleepConfig
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_OpenPow
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_ClosePow
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_WakeupBack
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_RstBack
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_COMM_EnterSleepConfig
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_LEDInit
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_UartColse
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_HardWareInit
</UL>

<P><STRONG><a name="[215]"></a>Function_KeyRandomCreate</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, function.o(i.Function_KeyRandomCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Function_KeyRandomCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_KeyRandomGet
</UL>

<P><STRONG><a name="[214]"></a>Function_KeyRandomGet</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, function.o(i.Function_KeyRandomGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Function_KeyRandomGet &rArr; Function_KeyRandomCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_KeyRandomCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_WakeUpLight
</UL>

<P><STRONG><a name="[216]"></a>Function_KeyRandomLight</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, function.o(i.Function_KeyRandomLight))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Function_KeyRandomLight &rArr; HAL_KeyLightUniteData
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLightUniteData
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_WakeUpLight
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuDesktopFun
</UL>

<P><STRONG><a name="[218]"></a>Function_SysRamBackup</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, function.o(i.Function_SysRamBackup))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Function_SysRamBackup &rArr; HAL_Power_RAMToHold &rArr; DRV_Power_RAMToHold &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_RAMToHold
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
</UL>

<P><STRONG><a name="[11d]"></a>Function_SysRamInit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, function.o(i.Function_SysRamInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Function_SysRamInit &rArr; HAL_Power_RAMToHold &rArr; DRV_Power_RAMToHold &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_RAMToHold
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_HoldToRAM
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[17a]"></a>GetRandomWord</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, trng_drv.o(i.GetRandomWord))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_GetRandomWord
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_GetRandomuEncrypt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_GetRandom
</UL>

<P><STRONG><a name="[37d]"></a>Get_Sys_Clock</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, cpm_drv.o(i.Get_Sys_Clock))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Clk_Init
</UL>

<P><STRONG><a name="[110]"></a>HAL_Adc_EnterSleepConfig</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_adc.o(i.HAL_Adc_EnterSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Adc_EnterSleepConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Adc_EnterSleepConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_EnterSleepConfig
</UL>

<P><STRONG><a name="[224]"></a>HAL_Alarm_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_alarm.o(i.HAL_Alarm_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_Alarm_GetStatus &rArr; DRV_Alarm_GetStatus &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Alarm_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
</UL>

<P><STRONG><a name="[106]"></a>HAL_Alarm_SetInterrpt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_alarm.o(i.HAL_Alarm_SetInterrpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = HAL_Alarm_SetInterrpt &rArr; DRV_Alarm_SetInterrpt &rArr; EPORT_Init &rArr; EPORT_ITConfig &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Alarm_SetInterrpt
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_EnterSleepConfig
</UL>

<P><STRONG><a name="[11f]"></a>HAL_Alarm_SetWakeUp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_alarm.o(i.HAL_Alarm_SetWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_Alarm_SetWakeUp &rArr; DRV_Alarm_SetWakeUp &rArr; EPORT_ConfigGpio &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Alarm_SetWakeUp
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[225]"></a>HAL_BuFang_Time_Detet</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hal_power.o(i.HAL_BuFang_Time_Detet))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_BuFang_Time_Detet &rArr; DRV_BuFang_Time_Detet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BuFang_Time_Detet
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
</UL>

<P><STRONG><a name="[f3]"></a>HAL_BuFang_Time_Init</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hal_power.o(i.HAL_BuFang_Time_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_BuFang_Time_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BuFang_Time_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DefSet
</UL>

<P><STRONG><a name="[227]"></a>HAL_BuFang_Time_Sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hal_power.o(i.HAL_BuFang_Time_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_BuFang_Time_Sleep &rArr; DRV_BuFang_Time_Sleep &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BuFang_Time_Sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
</UL>

<P><STRONG><a name="[f1]"></a>HAL_Bufang_Clear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_power.o(i.HAL_Bufang_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DefInit
</UL>

<P><STRONG><a name="[10e]"></a>HAL_COMM_EnterSleepConfig</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_comm.o(i.HAL_COMM_EnterSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_COMM_EnterSleepConfig &rArr; DRV_COMM_EnterSleepConfig &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_COMM_EnterSleepConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_EnterSleepConfig
</UL>

<P><STRONG><a name="[412]"></a>HAL_Comm_AesKeySet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_comm.o(i.HAL_Comm_AesKeySet))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
</UL>

<P><STRONG><a name="[2eb]"></a>HAL_Comm_BleGetRecvMsgType</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_comm.o(i.HAL_Comm_BleGetRecvMsgType))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[22a]"></a>HAL_Comm_BleSendDir</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_comm.o(i.HAL_Comm_BleSendDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleR8CatEyeOTA
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleFaceVersionGet
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleFaceDelId
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleConfigWifiData
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleCatEyeSN
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAliyunSecretKeySetParm
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAddFaceIng
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleDelFinger
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerStep
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleWifiFunctionSwitchSet
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleWakeSourceQuery
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleVoltageTest
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleVerifyPhoneEncrypt
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleUnlockUploadWifiSW
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleUnlockSmartKeyVerify
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleUnlockPwdSet
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleToolTestRWLockModel
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleToolTestFail
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleToolAddModel
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleTmpeSecretKeyGet
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleTimeSync
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleSmartKeySecretKeyGetRandom
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleSmartKeySecretKeyGet
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleSmartKeyAttributeModify
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleShangTangCatEyeSingleDouble
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleSecondBatteryVoltageTest
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleR8CatEyeOTA
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleQueryLockConfigTable
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BlePhoneSecretKeyGet
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleNewConfirmFingerRegSucced
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleNewAddFinger
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleNFCSwitchSet
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleMotorTorqueSet
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleMotorDirSet
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockVolumeSet
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockTimeGet
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockRegSecretKeyGet
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockPwdVerifyAdmin
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockMacGet
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockFirmwareVersionGet
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLedOledTest
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleID2ServerSwitch
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleGyroscopeSet
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleGetEventRecords
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFlashWriteTest
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFlashRWComp
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFingerAttributeModify
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceRegConfirm
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceReg
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceDelId
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceAttributeModify
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleEmptyUser
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDoorbellCapture
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDoorOpeningModeSet
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDisconnectBluetooth
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelSmartKey
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelPhoneAccount
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleChannelPwdGet
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAutomaticLockIntervalSet
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddSmartKeyAccredit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddPhoneAccount
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddFinger
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleActiveDefense
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAKeyProtection
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESUnlockPwdSet
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESUnlockAlarmPwdSet
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESAddPhoneAccount
</UL>

<P><STRONG><a name="[22c]"></a>HAL_Comm_BleSendDirWithLen</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hal_comm.o(i.HAL_Comm_BleSendDirWithLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = HAL_Comm_BleSendDirWithLen &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleModifFaceSafetyLevel
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleTestServerConnectionStatus
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerTokenVerify
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerIssueChallenge
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleMcuEnterUpdataMode
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleInfraredMonitoringDistanceSet
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleGetMcuVersion
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDHKeyExchangeAlgorithm
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAutoLockKeyConfig
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAutoLockConfig
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESTmpeSecretKeyGet
</UL>

<P><STRONG><a name="[22d]"></a>HAL_Comm_BleSendStart</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hal_comm.o(i.HAL_Comm_BleSendStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_Comm_BleSendStart &rArr; HAL_Comm_SendDealStart &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_SendDealStart
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerStep
</UL>

<P><STRONG><a name="[22e]"></a>HAL_Comm_CealrRecv</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_comm.o(i.HAL_Comm_CealrRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_Comm_CealrRecv &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_Service
</UL>

<P><STRONG><a name="[22f]"></a>HAL_Comm_CealrSend</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_comm.o(i.HAL_Comm_CealrSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_Comm_CealrSend &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_Service
</UL>

<P><STRONG><a name="[30f]"></a>HAL_Comm_ChkBusy</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_comm.o(i.HAL_Comm_ChkBusy))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
</UL>

<P><STRONG><a name="[12a]"></a>HAL_Comm_EncryptionParam</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_comm.o(i.HAL_Comm_EncryptionParam))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_StorageInit
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
</UL>

<P><STRONG><a name="[30a]"></a>HAL_Comm_GetRecvMsgType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_comm.o(i.HAL_Comm_GetRecvMsgType))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_Service
</UL>

<P><STRONG><a name="[231]"></a>HAL_Comm_GetRecvReply</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_comm.o(i.HAL_Comm_GetRecvReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Comm_GetRecvReply &rArr; DRV_COMM_GetRecvContent &rArr; DRV_Comm_GetRecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_COMM_GetRecvContentSize
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_COMM_GetRecvContent
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_RevcDeal
</UL>

<P><STRONG><a name="[ef]"></a>HAL_Comm_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_comm.o(i.HAL_Comm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_Comm_Init &rArr; DRV_Comm_Init &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_Init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_WakeupBack
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Comm_Init
</UL>

<P><STRONG><a name="[ee]"></a>HAL_Comm_InitBack</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_comm.o(i.HAL_Comm_InitBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HAL_Comm_InitBack &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Comm_Init
</UL>

<P><STRONG><a name="[234]"></a>HAL_Comm_RevcDeal</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hal_comm.o(i.HAL_Comm_RevcDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = HAL_Comm_RevcDeal &rArr; DRV_Comm_RecvDataAndAnalysis &rArr; aes_decrypt_ecb &rArr; aes_decrypt &rArr; inv_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_RecvDataUnblock
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_RecvDataAndAnalysis
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_ClearRxPar
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_COMM_GetRecvMsgType
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_GetRecvReply
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_Service
</UL>

<P><STRONG><a name="[236]"></a>HAL_Comm_RstBack</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_comm.o(i.HAL_Comm_RstBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_Comm_RstBack &rArr; DRV_Comm_RstBack &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_RstBack
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_Service
</UL>

<P><STRONG><a name="[22b]"></a>HAL_Comm_Send</STRONG> (Thumb, 622 bytes, Stack size 8 bytes, hal_comm.o(i.HAL_Comm_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_CmdSend
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleCmdSend
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDirWithLen
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_SendDeal
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleMcuEnterUpdataMode
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgKeyStatus
</UL>

<P><STRONG><a name="[237]"></a>HAL_Comm_SendDeal</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, hal_comm.o(i.HAL_Comm_SendDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = HAL_Comm_SendDeal &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_Service
</UL>

<P><STRONG><a name="[fb]"></a>HAL_Comm_SendDealStart</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hal_comm.o(i.HAL_Comm_SendDealStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = HAL_Comm_SendDealStart &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetBackBat
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgKeyStatusMenuEnter
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendStart
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockUpdateProgramMode
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDisconnectBluetooth
</UL>

<P><STRONG><a name="[2a3]"></a>HAL_Comm_SetEncrypt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_comm.o(i.HAL_Comm_SetEncrypt))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgKeyStatus
</UL>

<P><STRONG><a name="[233]"></a>HAL_Comm_WakeupBack</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_comm.o(i.HAL_Comm_WakeupBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_Comm_WakeupBack &rArr; DRV_Comm_WakeupBack &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_WakeupBack
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_Init
</UL>

<P><STRONG><a name="[238]"></a>HAL_FaceId_AddUser</STRONG> (Thumb, 846 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_AddUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_AddUser &rArr; HAL_FaceId_CmdSend &rArr; DRV_FaceId_CmdSend &rArr; DRV_FaceId_PackDataAndSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdSend
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAddFaceIng
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AddFaceIng
</UL>

<P><STRONG><a name="[2c9]"></a>HAL_FaceId_AddUserStart</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_faceid.o(i.HAL_FaceId_AddUserStart))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceReg
</UL>

<P><STRONG><a name="[40f]"></a>HAL_FaceId_AddUserStop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_faceid.o(i.HAL_FaceId_AddUserStop))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
</UL>

<P><STRONG><a name="[2bf]"></a>HAL_FaceId_ChkBusy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_faceid.o(i.HAL_FaceId_ChkBusy))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDisconnectBluetooth
</UL>

<P><STRONG><a name="[30c]"></a>HAL_FaceId_ChkPowerBusy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_faceid.o(i.HAL_FaceId_ChkPowerBusy))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
</UL>

<P><STRONG><a name="[f5]"></a>HAL_FaceId_ClosePow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_ClosePow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_ClosePow &rArr; DRV_FaceId_ClosePow &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_ClosePow
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FaceCatEyeInit
</UL>

<P><STRONG><a name="[23b]"></a>HAL_FaceId_CmdDeal</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hal_faceid.o(i.HAL_FaceId_CmdDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_CmdDeal &rArr; HAL_FaceId_Cmd &rArr; HAL_FaceId_CmdSend &rArr; DRV_FaceId_CmdSend &rArr; DRV_FaceId_PackDataAndSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Clear
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleR8CatEyeOTA
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleModifFaceSafetyLevel
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Bell
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CatEyeConn
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_TriggerCaptureData
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FaceWifiDeal
</UL>

<P><STRONG><a name="[23c]"></a>HAL_FaceId_CmdDealStart</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hal_faceid.o(i.HAL_FaceId_CmdDealStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_CmdDealStart &rArr; DRV_Face_WifiPowOpen &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_WifiPowOpen
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdStart
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Clear
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Bell
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CatEyeConn
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleR8CatEyeOTA
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleModifFaceSafetyLevel
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FaceWifiDeal
</UL>

<P><STRONG><a name="[23e]"></a>HAL_FaceId_CmdPowerOff</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_CmdPowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_CmdPowerOff &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Desktop
</UL>

<P><STRONG><a name="[23f]"></a>HAL_FaceId_CmdPowerOffDir</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_CmdPowerOffDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_CmdPowerOffDir &rArr; DRV_FaceId_ClosePow &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteGpioData
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigGpio
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_ClosePow
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
</UL>

<P><STRONG><a name="[240]"></a>HAL_FaceId_CmdPowerOn</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_CmdPowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_CmdPowerOn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
</UL>

<P><STRONG><a name="[239]"></a>HAL_FaceId_CmdSend</STRONG> (Thumb, 626 bytes, Stack size 16 bytes, hal_faceid.o(i.HAL_FaceId_CmdSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_CmdSend &rArr; DRV_FaceId_CmdSend &rArr; DRV_FaceId_PackDataAndSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_CmdSend
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_SetDemoMode
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_VerifyUser
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_PowerDeal
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_GetVersion
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_DelOneUser
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_DelAllUser
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_AddUser
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_Cmd
</UL>

<P><STRONG><a name="[29c]"></a>HAL_FaceId_CmdStop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_faceid.o(i.HAL_FaceId_CmdStop))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Clear
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleR8CatEyeOTA
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleModifFaceSafetyLevel
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleConfigWifiData
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleCatEyeSN
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAliyunSecretKeySetParm
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Bell
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CatEyeConn
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDisconnectBluetooth
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_TriggerCaptureData
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FaceWifiDeal
</UL>

<P><STRONG><a name="[253]"></a>HAL_FaceId_ComStart</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_faceid.o(i.HAL_FaceId_ComStart))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_VerifyUserStop
</UL>

<P><STRONG><a name="[241]"></a>HAL_FaceId_ConfigWifiData</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_ConfigWifiData))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_ConfigWifiData &rArr; HAL_FaceId_Cmd &rArr; HAL_FaceId_CmdSend &rArr; DRV_FaceId_CmdSend &rArr; DRV_FaceId_PackDataAndSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleConfigWifiData
</UL>

<P><STRONG><a name="[242]"></a>HAL_FaceId_ConfigWifiDataStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_ConfigWifiDataStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_ConfigWifiDataStart &rArr; DRV_Face_WifiPowOpen &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_WifiPowOpen
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdStart
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleWifiSetParm1
</UL>

<P><STRONG><a name="[243]"></a>HAL_FaceId_DelAllUser</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_DelAllUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_DelAllUser &rArr; HAL_FaceId_CmdSend &rArr; DRV_FaceId_CmdSend &rArr; DRV_FaceId_PackDataAndSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdSend
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Clear
</UL>

<P><STRONG><a name="[413]"></a>HAL_FaceId_DelAllUserStart</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_faceid.o(i.HAL_FaceId_DelAllUserStart))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
</UL>

<P><STRONG><a name="[326]"></a>HAL_FaceId_DelAllUserStop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_faceid.o(i.HAL_FaceId_DelAllUserStop))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Clear
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
</UL>

<P><STRONG><a name="[244]"></a>HAL_FaceId_DelOneUser</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_DelOneUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_DelOneUser &rArr; HAL_FaceId_CmdSend &rArr; DRV_FaceId_CmdSend &rArr; DRV_FaceId_PackDataAndSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdSend
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_DelGeneralFace
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleFaceDelId
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAddFaceUserFail
</UL>

<P><STRONG><a name="[2c7]"></a>HAL_FaceId_DelOneUserStart</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_faceid.o(i.HAL_FaceId_DelOneUserStart))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_DelGeneralFace
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceRegConfirm
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceDelId
</UL>

<P><STRONG><a name="[411]"></a>HAL_FaceId_DelOneUserStop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_faceid.o(i.HAL_FaceId_DelOneUserStop))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
</UL>

<P><STRONG><a name="[245]"></a>HAL_FaceId_GetDeviceName</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_GetDeviceName))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_GetDeviceName &rArr; HAL_FaceId_Cmd &rArr; HAL_FaceId_CmdSend &rArr; DRV_FaceId_CmdSend &rArr; DRV_FaceId_PackDataAndSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleCatEyeSN
</UL>

<P><STRONG><a name="[246]"></a>HAL_FaceId_GetDeviceNameStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_GetDeviceNameStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_GetDeviceNameStart &rArr; DRV_Face_WifiPowOpen &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_WifiPowOpen
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdStart
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleCatEyeSN
</UL>

<P><STRONG><a name="[247]"></a>HAL_FaceId_GetRecvNote</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_GetRecvNote))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FaceId_GetRecvNote &rArr; DRV_FaceId_GetRecvNoteNid &rArr; DRV_FaceId_GetRecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetRecvNoteNid
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetRecvNoteData
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_RevcDeal
</UL>

<P><STRONG><a name="[248]"></a>HAL_FaceId_GetRecvReply</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_GetRecvReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FaceId_GetRecvReply &rArr; DRV_FaceId_GetRecvReplyMid &rArr; DRV_FaceId_GetRecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetRecvReplyMid
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetRecvReplyData
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetRecvMsgSize
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_RevcDeal
</UL>

<P><STRONG><a name="[24a]"></a>HAL_FaceId_GetVersion</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_GetVersion &rArr; HAL_FaceId_CmdSend &rArr; DRV_FaceId_CmdSend &rArr; DRV_FaceId_PackDataAndSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdSend
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleFaceVersionGet
</UL>

<P><STRONG><a name="[2cc]"></a>HAL_FaceId_GetVersionStart</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_faceid.o(i.HAL_FaceId_GetVersionStart))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceVersionGet
</UL>

<P><STRONG><a name="[111]"></a>HAL_FaceId_IRSleepConfig</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_IRSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FaceId_IRSleepConfig &rArr; DRV_FaceId_IRSleepConfig &rArr; drv_Subc0_configIOPull
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_IRSleepConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_IRSleepConfig
</UL>

<P><STRONG><a name="[24b]"></a>HAL_FaceId_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_Init &rArr; DRV_FaceId_Init &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_PowerDeal
</UL>

<P><STRONG><a name="[24c]"></a>HAL_FaceId_PowerDeal</STRONG> (Thumb, 840 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_PowerDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_PowerDeal &rArr; DRV_FaceId_GetAesKey &rArr; MD5Final &rArr; MD5Update &rArr; MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_WifiPowOpen
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_CateyeFaceSw
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_OpenPow
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetAesKey
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_ClosePow
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_Init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdSend
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[24d]"></a>HAL_FaceId_RevcDeal</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_RevcDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_RevcDeal &rArr; DRV_FaceId_RecvDataAndAnalysis &rArr; aes_decrypt_ecb &rArr; aes_decrypt &rArr; inv_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_RecvDataUnblock
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_RecvDataAndAnalysis
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetRecvMsgType
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_ClearRxPar
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_GetRecvReply
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_GetRecvNote
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[24f]"></a>HAL_FaceId_SetDemoMode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_SetDemoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_SetDemoMode &rArr; HAL_FaceId_CmdSend &rArr; DRV_FaceId_CmdSend &rArr; DRV_FaceId_PackDataAndSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdSend
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
</UL>

<P><STRONG><a name="[250]"></a>HAL_FaceId_SetLinkKey</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_SetLinkKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_SetLinkKey &rArr; HAL_FaceId_Cmd &rArr; HAL_FaceId_CmdSend &rArr; DRV_FaceId_CmdSend &rArr; DRV_FaceId_PackDataAndSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAliyunSecretKeySetParm
</UL>

<P><STRONG><a name="[251]"></a>HAL_FaceId_SetLinkKeyStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_SetLinkKeyStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_SetLinkKeyStart &rArr; DRV_Face_WifiPowOpen &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_WifiPowOpen
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdStart
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAliyunSecretKeySetParm
</UL>

<P><STRONG><a name="[252]"></a>HAL_FaceId_VerifyUser</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_FaceId_VerifyUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_VerifyUser &rArr; HAL_FaceId_CmdSend &rArr; DRV_FaceId_CmdSend &rArr; DRV_FaceId_PackDataAndSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdSend
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Desktop
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AdminChk
</UL>

<P><STRONG><a name="[312]"></a>HAL_FaceId_VerifyUserStart</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_faceid.o(i.HAL_FaceId_VerifyUserStart))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_EnterDesktopVerifyStart
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenExitMenuOperation
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
</UL>

<P><STRONG><a name="[21d]"></a>HAL_FaceId_VerifyUserStop</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, hal_faceid.o(i.HAL_FaceId_VerifyUserStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FaceId_VerifyUserStop
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_ComStart
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Desktop
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AdminChkVerifyOk
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AdminChk
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgKeyStatusMenuEnter
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_Desktop
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuDesktopFun
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerTokenVerify
</UL>

<P><STRONG><a name="[109]"></a>HAL_Face_EnterSleepConfig</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_Face_EnterSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = HAL_Face_EnterSleepConfig &rArr; DRV_Face_EnterSleepConfig &rArr; EPORT_Init &rArr; EPORT_ITConfig &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_EnterSleepConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_EnterSleepConfig
</UL>

<P><STRONG><a name="[f6]"></a>HAL_Face_WifiPowClose</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_faceid.o(i.HAL_Face_WifiPowClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_Face_WifiPowClose &rArr; DRV_Face_WifiPowClose &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_WifiPowClose
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_WifiShutdown
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FaceCatEyeInit
</UL>

<P><STRONG><a name="[254]"></a>HAL_Finger_ChkFingerLeave</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_finger.o(i.HAL_Finger_ChkFingerLeave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Finger_ChkFingerLeave &rArr; DRV_Finger_ChkFingerLeave
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_ChkFingerLeave
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerStepOK
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_AddFingerStepOK
</UL>

<P><STRONG><a name="[256]"></a>HAL_Finger_Del</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, hal_finger.o(i.HAL_Finger_Del))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_Finger_Del &rArr; DRV_Finger_DeletChar &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_ResetCmd
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_DeletChar
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_DelFinger
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleDelFinger
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerFaill
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerConfirmFail
</UL>

<P><STRONG><a name="[2bb]"></a>HAL_Finger_DelStart</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_finger.o(i.HAL_Finger_DelStart))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelFinger
</UL>

<P><STRONG><a name="[258]"></a>HAL_Finger_Empty</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, hal_finger.o(i.HAL_Finger_Empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_Finger_Empty &rArr; DRV_Finger_Empty &rArr; DRV_Finger_DeletChar &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_ResetCmd
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_ClearAll
</UL>

<P><STRONG><a name="[414]"></a>HAL_Finger_EmptyStart</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_finger.o(i.HAL_Finger_EmptyStart))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
</UL>

<P><STRONG><a name="[107]"></a>HAL_Finger_EnterSleepConfig</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_finger.o(i.HAL_Finger_EnterSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_Finger_EnterSleepConfig &rArr; DRV_Finger_EnterSleepConfig &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_EnterSleepConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_EnterSleepConfig
</UL>

<P><STRONG><a name="[259]"></a>HAL_Finger_HavePress</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_finger.o(i.HAL_Finger_HavePress))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_Finger_HavePress &rArr; drv_SubC0_ReadGpioData
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_ReadGpioData
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_Desktop
</UL>

<P><STRONG><a name="[f9]"></a>HAL_Finger_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_finger.o(i.HAL_Finger_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = HAL_Finger_Init &rArr; DRV_Finger_Init &rArr; SPI_Flash_ReadID &rArr; Read_ID_Test &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_Init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_GetAckData
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Finger_Init
</UL>

<P><STRONG><a name="[25b]"></a>HAL_Finger_Reg</STRONG> (Thumb, 464 bytes, Stack size 16 bytes, hal_finger.o(i.HAL_Finger_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_Finger_Reg &rArr; DRV_Finger_GenImg &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_Store
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_ResetCmd
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_RegModel
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_Img2Tz
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_GenImg
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerStep
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_AddFingerStep
</UL>

<P><STRONG><a name="[33b]"></a>HAL_Finger_RegReStart</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_finger.o(i.HAL_Finger_RegReStart))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerStepOK
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_AddFingerStepOK
</UL>

<P><STRONG><a name="[2e5]"></a>HAL_Finger_RegStart</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_finger.o(i.HAL_Finger_RegStart))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleNewAddFinger
</UL>

<P><STRONG><a name="[339]"></a>HAL_Finger_SaveBufGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_finger.o(i.HAL_Finger_SaveBufGet))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerStepOK
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerStep
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_AddFingerStepOK
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_AddFingerStep
</UL>

<P><STRONG><a name="[25d]"></a>HAL_Finger_Verify</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, hal_finger.o(i.HAL_Finger_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_Finger_Verify &rArr; DRV_Finger_GenImg &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_Serach
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_ResetCmd
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_Img2Tz
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_GenImg
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_Desktop
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_AdminChk
</UL>

<P><STRONG><a name="[32d]"></a>HAL_Finger_VerifyStart</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_finger.o(i.HAL_Finger_VerifyStart))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyOk
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_Desktop
</UL>

<P><STRONG><a name="[25f]"></a>HAL_IR_ClearRxPar</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_ir.o(i.HAL_IR_ClearRxPar))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_IR_ClearRxPar &rArr; DRV_IR_ClearRxPar &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_ClearRxPar
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_SetStart
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_Set
</UL>

<P><STRONG><a name="[f7]"></a>HAL_IR_IOInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_ir.o(i.HAL_IR_IOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_IR_IOInit &rArr; DRV_IR_IOInit &rArr; drv_Subc0_configIOPull
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_IOInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FaceCatEyeInit
</UL>

<P><STRONG><a name="[260]"></a>HAL_IR_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_ir.o(i.HAL_IR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_IR_Init &rArr; DRV_IR_Init &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleInfraredMonitoringDistanceSet
</UL>

<P><STRONG><a name="[261]"></a>HAL_IR_ReadIRQ</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_ir.o(i.HAL_IR_ReadIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_IR_ReadIRQ &rArr; DRV_IR_ReadIRQ &rArr; drv_SubC0_ReadGpioData
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_ReadIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
</UL>

<P><STRONG><a name="[262]"></a>HAL_IR_RecvDataUnblock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_ir.o(i.HAL_IR_RecvDataUnblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HAL_IR_RecvDataUnblock &rArr; DRV_IR_RecvDataUnblock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_RecvDataUnblock
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_Set
</UL>

<P><STRONG><a name="[263]"></a>HAL_IR_SendData</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hal_ir.o(i.HAL_IR_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_IR_SendData &rArr; DRV_IR_SendData &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_Set
</UL>

<P><STRONG><a name="[264]"></a>HAL_IR_Set</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, hal_ir.o(i.HAL_IR_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = HAL_IR_Set &rArr; HAL_IR_RecvDataUnblock &rArr; DRV_IR_RecvDataUnblock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_SendData
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_RecvDataUnblock
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_ClearRxPar
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_SetDistance
</UL>

<P><STRONG><a name="[265]"></a>HAL_IR_SetDistance</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, hal_ir.o(i.HAL_IR_SetDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = HAL_IR_SetDistance &rArr; HAL_IR_Set &rArr; HAL_IR_RecvDataUnblock &rArr; DRV_IR_RecvDataUnblock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_SetStart
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_Set
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
</UL>

<P><STRONG><a name="[2d5]"></a>HAL_IR_SetDistanceStart</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, hal_ir.o(i.HAL_IR_SetDistanceStart))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleInfraredMonitoringDistanceSet
</UL>

<P><STRONG><a name="[266]"></a>HAL_IR_SetStart</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hal_ir.o(i.HAL_IR_SetStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_IR_SetStart &rArr; HAL_IR_ClearRxPar &rArr; DRV_IR_ClearRxPar &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_ClearRxPar
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_SetDistance
</UL>

<P><STRONG><a name="[267]"></a>HAL_IR_UartColse</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_ir.o(i.HAL_IR_UartColse))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_IR_UartColse &rArr; DRV_IR_UartColse &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_UartColse
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
</UL>

<P><STRONG><a name="[33f]"></a>HAL_KeyLightDataSet</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hal_keylight.o(i.HAL_KeyLightDataSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_KeyLightDataSet
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyBackLightUpdate
</UL>

<P><STRONG><a name="[268]"></a>HAL_KeyLightDeal</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, hal_keylight.o(i.HAL_KeyLightDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_KeyLightDeal &rArr; DRV_MBI5024_Out &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_Out
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyBackLightService
</UL>

<P><STRONG><a name="[119]"></a>HAL_KeyLightInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_keylight.o(i.HAL_KeyLightInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = HAL_KeyLightInit &rArr; DRV_MBI5024_Init &rArr; DRV_MBI5024_Out &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[21c]"></a>HAL_KeyLightOnce</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hal_keylight.o(i.HAL_KeyLightOnce))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyBackLightUpdate
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_WakeUpLight
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDealService
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuDesktopFun
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLedOledTest
</UL>

<P><STRONG><a name="[345]"></a>HAL_KeyLightPressKey</STRONG> (Thumb, 318 bytes, Stack size 12 bytes, hal_keylight.o(i.HAL_KeyLightPressKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_KeyLightPressKey
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDeal_VoiceAndLight
</UL>

<P><STRONG><a name="[269]"></a>HAL_KeyLightStatusRun</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_keylight.o(i.HAL_KeyLightStatusRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_KeyLightStatusRun &rArr; DRV_MBI5024_LEDOpen &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_LEDOpen
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_LEDClose
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLight_sysStatusSet
</UL>

<P><STRONG><a name="[217]"></a>HAL_KeyLightUniteData</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, hal_keylight.o(i.HAL_KeyLightUniteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_KeyLightUniteData
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_KeyRandomLight
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockMacGet
</UL>

<P><STRONG><a name="[30d]"></a>HAL_KeyLight_ChkBusy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_keylight.o(i.HAL_KeyLight_ChkBusy))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
</UL>

<P><STRONG><a name="[26a]"></a>HAL_KeyLight_DirDispaly</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_keylight.o(i.HAL_KeyLight_DirDispaly))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_KeyLight_DirDispaly &rArr; DRV_MBI5024_Out &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_Out
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleToolTestFail
</UL>

<P><STRONG><a name="[10c]"></a>HAL_KeyLight_EnterSleepConfig</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_keylight.o(i.HAL_KeyLight_EnterSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_KeyLight_EnterSleepConfig &rArr; DRV_MBI5024_EnterSleepConfig &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_EnterSleepConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_EnterSleepConfig
</UL>

<P><STRONG><a name="[100]"></a>HAL_KeyLight_batterySetDir</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, hal_keylight.o(i.HAL_KeyLight_batterySetDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = HAL_KeyLight_batterySetDir &rArr; DRV_MBI5024_Out &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_Out
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetPowerValue
</UL>

<P><STRONG><a name="[26b]"></a>HAL_KeyLight_sysStatusSet</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, hal_keylight.o(i.HAL_KeyLight_sysStatusSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = HAL_KeyLight_sysStatusSet &rArr; HAL_KeyLightStatusRun &rArr; DRV_MBI5024_LEDOpen &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLightStatusRun
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyBackLightUpdate
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[26c]"></a>HAL_KeySacnGet</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_keysacn.o(i.HAL_KeySacnGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = HAL_KeySacnGet &rArr; DRV_KeySacn_GetValue &rArr; TouchTask_ReadAction &rArr; Touch_GetKeyValue &rArr; app_tsi_handle &rArr; hal_tsi_adjustRegister &rArr; hal_tsi_switchFineMode &rArr; hal_tsi_waitScanFinished
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_KeySacn_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDealService
</UL>

<P><STRONG><a name="[123]"></a>HAL_KeySacnInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_keysacn.o(i.HAL_KeySacnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_KeySacnInit &rArr; DRV_KeySacn_Init &rArr; app_tsi_init &rArr; hal_tsi_loadCbaseCoarse
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_KeySacn_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[108]"></a>HAL_KeySacn_EnterSleepConfig</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_keysacn.o(i.HAL_KeySacn_EnterSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_KeySacn_EnterSleepConfig &rArr; DRV_KeySacn_EnterSleepConfig &rArr; app_tsi_sleep &rArr; hal_tsi_switchLowpower &rArr; hal_tsi_loadDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_KeySacn_EnterSleepConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_EnterSleepConfig
</UL>

<P><STRONG><a name="[26d]"></a>HAL_OnChipFlash_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_onchipflash.o(i.HAL_OnChipFlash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_OnChipFlash_Init &rArr; DRV_OnChipFlash_Init &rArr; EFLASH_Init &rArr; EFM_Init &rArr; eflash_set_verify_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_OnChipFlash_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgEnterOTA
</UL>

<P><STRONG><a name="[26e]"></a>HAL_OnChipFlash_Write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hal_onchipflash.o(i.HAL_OnChipFlash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_OnChipFlash_Write &rArr; DRV_OnChipFlash_Write &rArr; EFLASH_Write &rArr; EFLASH_WordsProg &rArr; EFlash_Bulk_Program
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_OnChipFlash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgEnterOTA
</UL>

<P><STRONG><a name="[114]"></a>HAL_Power_CPUInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_power.o(i.HAL_Power_CPUInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = HAL_Power_CPUInit &rArr; DRV_Power_CPUInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_CPUInit
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[26f]"></a>HAL_Power_CPURst</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_power.o(i.HAL_Power_CPURst))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Power_CPURst &rArr; DRV_Power_CPURst &rArr; Set_POR_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_CPURst
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleToolTestFail
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgEnterOTA
</UL>

<P><STRONG><a name="[103]"></a>HAL_Power_EnterSleep</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_power.o(i.HAL_Power_EnterSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HAL_Power_EnterSleep &rArr; DRV_Power_EnterSleep &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_EnterSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_EnterSleep
</UL>

<P><STRONG><a name="[270]"></a>HAL_Power_GetRandomWord</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_power.o(i.HAL_Power_GetRandomWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Power_GetRandomWord &rArr; DRV_Power_GetRandomWord
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_GetRandomWord
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDHKeyExchangeAlgorithm
</UL>

<P><STRONG><a name="[219]"></a>HAL_Power_RAMToHold</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hal_power.o(i.HAL_Power_RAMToHold))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_Power_RAMToHold &rArr; DRV_Power_RAMToHold &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_RAMToHold
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_SysRamBackup
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_SysRamInit
</UL>

<P><STRONG><a name="[10d]"></a>HAL_Power_ReservedSleepConfig</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_power.o(i.HAL_Power_ReservedSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_Power_ReservedSleepConfig &rArr; DRV_Power_ReservedSleepConfig &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_ReservedSleepConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_EnterSleepConfig
</UL>

<P><STRONG><a name="[11a]"></a>HAL_Power_ReservedWakeupConfig</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_power.o(i.HAL_Power_ReservedWakeupConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_Power_ReservedWakeupConfig &rArr; DRV_Power_ReservedWakeupConfig &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_ReservedWakeupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[11b]"></a>HAL_Power_ReuseInterruptWakeupConfig</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_power.o(i.HAL_Power_ReuseInterruptWakeupConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Power_ReuseInterruptWakeupConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_ReuseInterruptWakeupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[115]"></a>HAL_Power_SysWakeupChk</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, hal_power.o(i.HAL_Power_SysWakeupChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HAL_Power_SysWakeupChk &rArr; DRV_Power_SysWakeupChk &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_SysWakeupChk
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[117]"></a>HAL_Power_TrngInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_power.o(i.HAL_Power_TrngInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Power_TrngInit &rArr; DRV_Power_TrngInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_TrngInit
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[272]"></a>HAL_RTC_GetTick</STRONG> (Thumb, 32 bytes, Stack size 80 bytes, hal_rtc.o(i.HAL_RTC_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = HAL_RTC_GetTick &rArr; HAL_RTC_TimeGetStm &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TimeGetStm
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Stm2Tick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ChkError
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AddError
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
</UL>

<P><STRONG><a name="[11c]"></a>HAL_RTC_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_Init &rArr; DRV_RTC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[132]"></a>HAL_RTC_SetByTick</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_rtc.o(i.HAL_RTC_SetByTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RTC_SetByTick &rArr; DRV_RTC_SetByTick &rArr; RTC_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_RTC_SetByTick
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_WakeupRTCTimerGet
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleTimeSync
</UL>

<P><STRONG><a name="[273]"></a>HAL_RTC_Stm2Tick</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hal_rtc.o(i.HAL_RTC_Stm2Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RTC_Stm2Tick &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTick
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CheckTimeVaild
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleTimeSync
</UL>

<P><STRONG><a name="[131]"></a>HAL_RTC_TimeGetStm</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, hal_rtc.o(i.HAL_RTC_TimeGetStm))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = HAL_RTC_TimeGetStm &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_RTC_TimeGet
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_WakeupRTCTimerGet
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTick
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RTCTimerGet
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SecretKeyGet
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockRegSecretKeyGet
</UL>

<P><STRONG><a name="[128]"></a>HAL_Storage_ChkSysData</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hal_storage.o(i.HAL_Storage_ChkSysData))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = HAL_Storage_ChkSysData &rArr; HAL_Storage_ReadSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ReadSysData
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_StorageInit
</UL>

<P><STRONG><a name="[275]"></a>HAL_Storage_ClearSysData</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hal_storage.o(i.HAL_Storage_ClearSysData))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = HAL_Storage_ClearSysData &rArr; HAL_Storage_WriteSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
</UL>

<P><STRONG><a name="[276]"></a>HAL_Storage_ClearUserData</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_storage.o(i.HAL_Storage_ClearUserData))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = HAL_Storage_ClearUserData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Storage_EraseSector
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_Rw
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
</UL>

<P><STRONG><a name="[278]"></a>HAL_Storage_DelNUserReg</STRONG> (Thumb, 64 bytes, Stack size 88 bytes, hal_storage.o(i.HAL_Storage_DelNUserReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = HAL_Storage_DelNUserReg &rArr; HAL_Storage_WriteOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteOneUserReg
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_GetAddressWithId
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_DelFinger
</UL>

<P><STRONG><a name="[27b]"></a>HAL_Storage_DelOneUserReg</STRONG> (Thumb, 52 bytes, Stack size 80 bytes, hal_storage.o(i.HAL_Storage_DelOneUserReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = HAL_Storage_DelOneUserReg &rArr; HAL_Storage_WriteOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteOneUserReg
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_GetAddressWithId
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_DelGeneralFace
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceRegConfirm
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceDelId
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelSmartKey
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelPhoneAccount
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelFinger
</UL>

<P><STRONG><a name="[10f]"></a>HAL_Storage_EnterSleepConfig</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_storage.o(i.HAL_Storage_EnterSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_Storage_EnterSleepConfig &rArr; DRV_Storage_EnterSleepConfig &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Storage_EnterSleepConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_EnterSleepConfig
</UL>

<P><STRONG><a name="[27c]"></a>HAL_Storage_GetOneUserReg</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, hal_storage.o(i.HAL_Storage_GetOneUserReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = HAL_Storage_GetOneUserReg &rArr; HAL_Storage_ReadOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ReadOneUserReg
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_GetAddressWithId
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_DelGeneralFace
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_VerifyOk
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerStep
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SmartKeyMatch
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFingerAttributeModify
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceAttributeModify
</UL>

<P><STRONG><a name="[27e]"></a>HAL_Storage_MatchId</STRONG> (Thumb, 176 bytes, Stack size 96 bytes, hal_storage.o(i.HAL_Storage_MatchId))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = HAL_Storage_MatchId &rArr; HAL_Storage_ReadOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_Rw
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ReadOneUserReg
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_GetAddressWithId
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyOk
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AdminChkVerifyOk
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleVerifyPhoneEncrypt
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceDelId
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelSmartKey
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelPhoneAccount
</UL>

<P><STRONG><a name="[129]"></a>HAL_Storage_ReadHardwareData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_storage.o(i.HAL_Storage_ReadHardwareData))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = HAL_Storage_ReadHardwareData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_Rw
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_StorageInit
</UL>

<P><STRONG><a name="[27f]"></a>HAL_Storage_ReadLockLog</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hal_storage.o(i.HAL_Storage_ReadLockLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = HAL_Storage_ReadLockLog &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_Rw
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleGetEventRecords
</UL>

<P><STRONG><a name="[274]"></a>HAL_Storage_ReadSysData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_storage.o(i.HAL_Storage_ReadSysData))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = HAL_Storage_ReadSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_Rw
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ChkSysData
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleToolTestRWLockModel
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFlashRWComp
</UL>

<P><STRONG><a name="[277]"></a>HAL_Storage_Rw</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hal_storage.o(i.HAL_Storage_Rw))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Storage_ReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ReadHardwareData
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteLockLog
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteHardwareData
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SearchEmpty
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ReadLockLog
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ClearUserData
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ReadSysData
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_MatchId
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteOneUserReg
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ReadOneUserReg
</UL>

<P><STRONG><a name="[280]"></a>HAL_Storage_SaveOneUserReg</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, hal_storage.o(i.HAL_Storage_SaveOneUserReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = HAL_Storage_SaveOneUserReg &rArr; HAL_Storage_WriteOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteOneUserReg
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_GetAddressWithId
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAddFaceIng
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AddFaceIng
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerStep
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFingerAttributeModify
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceAttributeModify
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddSmartKeyAccredit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddPhoneAccount
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESAddPhoneAccount
</UL>

<P><STRONG><a name="[281]"></a>HAL_Storage_SearchEmpty</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, hal_storage.o(i.HAL_Storage_SearchEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = HAL_Storage_SearchEmpty &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_Rw
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_GetAddressWithId
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAddFaceIng
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AddFaceIng
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleNewAddFinger
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddSmartKeyAccredit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddPhoneAccount
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESAddPhoneAccount
</UL>

<P><STRONG><a name="[282]"></a>HAL_Storage_WriteHardwareData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_storage.o(i.HAL_Storage_WriteHardwareData))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = HAL_Storage_WriteHardwareData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_Rw
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleToolAddModel
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleMotorTorqueSet
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleMotorDirSet
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockPwdVerifyAdmin
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAutoLockConfig
</UL>

<P><STRONG><a name="[283]"></a>HAL_Storage_WriteLockLog</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hal_storage.o(i.HAL_Storage_WriteLockLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = HAL_Storage_WriteLockLog &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_Rw
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
</UL>

<P><STRONG><a name="[151]"></a>HAL_Storage_WriteSysData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_storage.o(i.HAL_Storage_WriteSysData))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = HAL_Storage_WriteSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_Rw
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_DelGeneralFace
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAddFaceIng
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AddFaceIng
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_DelFinger
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerStep
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ClearSysData
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuModPwdInputAgainFun
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPwdTmp
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenExitMenuOperation
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleWifiFunctionSwitchSet
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleUnlockUploadWifiSW
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleUnlockPwdSet
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleTmpeSecretKeyGet
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleShangTangCatEyeSingleDouble
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockVolumeSet
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleInfraredMonitoringDistanceSet
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleID2ServerSwitch
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleGyroscopeSet
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFlashWriteTest
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceDelId
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDoorOpeningModeSet
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelSmartKey
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelPhoneAccount
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelFinger
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAutomaticLockIntervalSet
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAutoLockKeyConfig
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddSmartKeyAccredit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddPhoneAccount
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleActiveDefense
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAKeyProtection
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESUnlockPwdSet
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESUnlockAlarmPwdSet
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESTmpeSecretKeyGet
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESAddPhoneAccount
</UL>

<P><STRONG><a name="[139]"></a>HAL_SysTimeDeal</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_systimer.o(i.HAL_SysTimeDeal))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUser_Service
</UL>

<P><STRONG><a name="[12c]"></a>HAL_SysTimerHandlerReg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_systimer.o(i.HAL_SysTimerHandlerReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SysTimerHandlerReg
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SysTimerHandlerReg
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SysTimerInit
</UL>

<P><STRONG><a name="[12b]"></a>HAL_SysTimerInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_systimer.o(i.HAL_SysTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SysTimerInit &rArr; DRV_SysTimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SysTimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SysTimerInit
</UL>

<P><STRONG><a name="[33a]"></a>HAL_SysTimer_ClearCnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_systimer.o(i.HAL_SysTimer_ClearCnt))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_AddFingerStep
</UL>

<P><STRONG><a name="[286]"></a>HAL_VoiceDeal</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, hal_voice.o(i.HAL_VoiceDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = HAL_VoiceDeal &rArr; HAL_VoicePlayDir &rArr; DRV_Voice_Play &rArr; DRV_Voice_SendDataN &rArr; DRV_Voice_SendData &rArr; I2C_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VoicePlayDir
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_Bell
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_VoiceService
</UL>

<P><STRONG><a name="[34a]"></a>HAL_VoicePlay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_voice.o(i.HAL_VoicePlay))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_VoicePlay
</UL>

<P><STRONG><a name="[101]"></a>HAL_VoicePlayDir</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hal_voice.o(i.HAL_VoicePlayDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = HAL_VoicePlayDir &rArr; DRV_Voice_Play &rArr; DRV_Voice_SendDataN &rArr; DRV_Voice_SendData &rArr; I2C_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_Play
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDeal_VoiceAndLight
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDealService
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetPowerValue
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyOk
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Desktop
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgKeyStatusMenuEnter
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuDesktopFun
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleToolTestFail
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VoiceDeal
</UL>

<P><STRONG><a name="[340]"></a>HAL_Voice_Bell</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_voice.o(i.HAL_Voice_Bell))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDealService
</UL>

<P><STRONG><a name="[30e]"></a>HAL_Voice_ChkBusy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_voice.o(i.HAL_Voice_ChkBusy))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
</UL>

<P><STRONG><a name="[105]"></a>HAL_Voice_EnterSleepConfig</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_voice.o(i.HAL_Voice_EnterSleepConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_Voice_EnterSleepConfig &rArr; DRV_Voice_EnterSleepConfig &rArr; I2C_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_EnterSleepConfig
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_BellEnterSleepConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_EnterSleepConfig
</UL>

<P><STRONG><a name="[118]"></a>HAL_Voice_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_voice.o(i.HAL_Voice_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_Voice_Init &rArr; DRV_Voice_Init &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[130]"></a>HAL_Voice_VolumeSet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_voice.o(i.HAL_Voice_VolumeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HAL_Voice_VolumeSet &rArr; DRV_Voice_VolumeSet &rArr; DRV_Voice_SendDataN &rArr; DRV_Voice_SendData &rArr; I2C_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_VolumeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_VolumeSetInit
</UL>

<P><STRONG><a name="[113]"></a>HAL_WDTFeedDog</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_power.o(i.HAL_WDTFeedDog))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_WDTFeedDog &rArr; DRV_WDTFeedDog
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_WDTFeedDog
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUser_Service
</UL>

<P><STRONG><a name="[36]"></a>I2C1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, i2c_drv.o(i.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C1_IRQHandler &rArr; I2C_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, i2c_drv.o(i.I2C2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C2_IRQHandler &rArr; I2C_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, i2c_drv.o(i.I2C3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C3_IRQHandler &rArr; I2C_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[1e1]"></a>I2C_ConfigGpio</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, i2c_drv.o(i.I2C_ConfigGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = I2C_ConfigGpio &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_EnterSleepConfig
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_ReservedWakeupConfig
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_ReservedSleepConfig
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_SendDataN
</UL>

<P><STRONG><a name="[1f8]"></a>I2C_WriteGpioData</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, i2c_drv.o(i.I2C_WriteGpioData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = I2C_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_EnterSleepConfig
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_SendDataN
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_SendData
</UL>

<P><STRONG><a name="[37f]"></a>ICACHE_Init</STRONG> (Thumb, 340 bytes, Stack size 12 bytes, cache_drv.o(i.ICACHE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ICACHE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[288]"></a>ID2_hash_op</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, apdu_algo_cmd.o(i.ID2_hash_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ID2_hash_op &rArr; SHA_Update_Algo &rArr; sha_read_mid_data &rArr; sha_read_mid_result
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA_Update_Algo
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA_Init_Algo
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA_Final_Algo
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_hash
</UL>

<P><STRONG><a name="[28c]"></a>ID2_sym_op</STRONG> (Thumb, 1528 bytes, Stack size 200 bytes, apdu_algo_cmd.o(i.ID2_sym_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_op
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrypt_ID2_Key
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_cbc1
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_cbc1
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_AesKey
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_reset
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aesop
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_sym_op
</UL>

<P><STRONG><a name="[1d6]"></a>INTX_ENABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.INTX_ENABLE))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_CPUInit
</UL>

<P><STRONG><a name="[1d3]"></a>IO_Latch_Clr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, system_armcm4.o(i.IO_Latch_Clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IO_Latch_Clr &rArr; CPM_PWRCR_OptBits
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_PWRCR_OptBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_CPUInit
</UL>

<P><STRONG><a name="[37c]"></a>IPS_Clk_Op</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, cpm_drv.o(i.IPS_Clk_Op))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IPS_Clk_Op
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Clk_Init
</UL>

<P><STRONG><a name="[179]"></a>Init_Trng</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, trng_drv.o(i.Init_Trng))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_TrngInit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_GetRandomuEncrypt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_GetRandom
</UL>

<P><STRONG><a name="[1d5]"></a>Interrput_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_power.o(i.Interrput_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Interrput_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_CPUInit
</UL>

<P><STRONG><a name="[52]"></a>LVD_EN</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_armcm4.o(i.LVD_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LVD_EN &rArr; CPM_PWRCR_OptBits
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_PWRCR_OptBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(.text)
</UL>
<P><STRONG><a name="[298]"></a>MD5Decode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, md5.o(i.MD5Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MD5Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>

<P><STRONG><a name="[296]"></a>MD5Encode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, md5.o(i.MD5Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MD5Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[192]"></a>MD5Final</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, md5.o(i.MD5Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = MD5Final &rArr; MD5Update &rArr; MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Encode
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetAesKey
</UL>

<P><STRONG><a name="[190]"></a>MD5Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, md5.o(i.MD5Init))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetAesKey
</UL>

<P><STRONG><a name="[297]"></a>MD5Transform</STRONG> (Thumb, 1898 bytes, Stack size 284 bytes, md5.o(i.MD5Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL>

<P><STRONG><a name="[191]"></a>MD5Update</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, md5.o(i.MD5Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = MD5Update &rArr; MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetAesKey
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[b]"></a>MemManage_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, system_armcm4.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MemManage_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[299]"></a>Menu_AddError</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, menu_currentoperate.o(i.Menu_AddError))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Menu_AddError &rArr; HAL_RTC_GetTick &rArr; HAL_RTC_TimeGetStm &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTick
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyFail
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AdminChkVerifyOk
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleVerifyPhoneEncrypt
</UL>

<P><STRONG><a name="[2a5]"></a>Menu_AppRegChk</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, menu_currentoperate.o(i.Menu_AppRegChk))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyOk
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyFail
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgKeyStatusMenuEnter
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleUnlockPwdSet
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleTmpeSecretKeyGet
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockPwdVerifyAdmin
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelPhoneAccount
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESUnlockPwdSet
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESUnlockAlarmPwdSet
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESTmpeSecretKeyGet
</UL>

<P><STRONG><a name="[13f]"></a>Menu_AutoMenuReturn</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, menu.o(i.Menu_AutoMenuReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Menu_AutoMenuReturn &rArr; fn_TimeOutMenuReturn &rArr; fn_MenuSwitchToParentIndex &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_TimeOutMenuReturn
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUser_Service
</UL>

<P><STRONG><a name="[203]"></a>Menu_CheckCombine</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, menu_currentoperate.o(i.Menu_CheckCombine))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyOk
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyFail
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_VerifyOk
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_Desktop
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuDesktopFun
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesktopKeyEnter
</UL>

<P><STRONG><a name="[29d]"></a>Menu_CheckTimeVaild</STRONG> (Thumb, 270 bytes, Stack size 200 bytes, menu_currentoperate.o(i.Menu_CheckTimeVaild))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Menu_CheckTimeVaild &rArr; HAL_RTC_Stm2Tick &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Stm2Tick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyOk
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_VerifyOk
</UL>

<P><STRONG><a name="[308]"></a>Menu_CheckWifiPower</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, menu_currentoperate.o(i.Menu_CheckWifiPower))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleTestServerConnectionStatus
</UL>

<P><STRONG><a name="[12e]"></a>Menu_ChkError</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, menu_currentoperate.o(i.Menu_ChkError))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Menu_ChkError &rArr; HAL_RTC_GetTick &rArr; HAL_RTC_TimeGetStm &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTick
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ClearError
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SysWakeUpToMenu
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyFail
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenExitMenu_VosGui
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenExitMenuOperation
</UL>

<P><STRONG><a name="[29e]"></a>Menu_ClearError</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, menu_currentoperate.o(i.Menu_ClearError))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ChkError
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyOk
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyFail
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AdminChkVerifyOk
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgKeyStatusMenuEnter
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
</UL>

<P><STRONG><a name="[415]"></a>Menu_ClearInputInfo</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, menu.o(i.Menu_ClearInputInfo))
<BR><BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenExitMenuOperation
</UL>

<P><STRONG><a name="[29f]"></a>Menu_CommGetBattery</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_CommGetBattery))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Menu_CommGetBattery &rArr; APP_GetPowerValue &rArr; HAL_VoicePlayDir &rArr; DRV_Voice_Play &rArr; DRV_Voice_SendDataN &rArr; DRV_Voice_SendData &rArr; I2C_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetPowerValue
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_Service
</UL>

<P><STRONG><a name="[2a0]"></a>Menu_CommMsgDisconnectBLE</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_CommMsgDisconnectBLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Menu_CommMsgDisconnectBLE &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_Service
</UL>

<P><STRONG><a name="[2a1]"></a>Menu_CommMsgEnterOTA</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_CommMsgEnterOTA))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Menu_CommMsgEnterOTA &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_CPURst
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OnChipFlash_Write
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OnChipFlash_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_Service
</UL>

<P><STRONG><a name="[2a2]"></a>Menu_CommMsgKeyStatus</STRONG> (Thumb, 452 bytes, Stack size 16 bytes, menu_comm.o(i.Menu_CommMsgKeyStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Menu_CommMsgKeyStatus &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetPowerValue
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgKeyStatusMenuEnter
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_SetEncrypt
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_Send
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_Service
</UL>

<P><STRONG><a name="[2a4]"></a>Menu_CommMsgKeyStatusMenuEnter</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, menu_comm.o(i.Menu_CommMsgKeyStatusMenuEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = Menu_CommMsgKeyStatusMenuEnter &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VoicePlayDir
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_SendDealStart
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AppRegChk
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ClearError
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_VerifyUserStop
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenExitMenuOperation
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgKeyStatus
</UL>

<P><STRONG><a name="[2a6]"></a>Menu_CommMsgMotorLock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_CommMsgMotorLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_CommMsgMotorLock &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_Service
</UL>

<P><STRONG><a name="[30b]"></a>Menu_CommMsgUpdateDeviceName</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu_comm.o(i.Menu_CommMsgUpdateDeviceName))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_Service
</UL>

<P><STRONG><a name="[2a7]"></a>Menu_CommOpenAndInfoUpload</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_CommOpenAndInfoUpload))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_CommOpenAndInfoUpload &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_Service
</UL>

<P><STRONG><a name="[2a8]"></a>Menu_Comm_BleAESAddPhoneAccount</STRONG> (Thumb, 482 bytes, Stack size 56 bytes, menu_comm.o(i.Menu_Comm_BleAESAddPhoneAccount))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleAESAddPhoneAccount &rArr; Menu_RecordLockLog &rArr; HAL_Storage_WriteLockLog &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SearchEmpty
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SaveOneUserReg
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_ecb
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2a9]"></a>Menu_Comm_BleAESTmpeSecretKeyGet</STRONG> (Thumb, 522 bytes, Stack size 40 bytes, menu_comm.o(i.Menu_Comm_BleAESTmpeSecretKeyGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleAESTmpeSecretKeyGet &rArr; HAL_Storage_WriteSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RTCTimerGet
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AppRegChk
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDirWithLen
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_ecb
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2ab]"></a>Menu_Comm_BleAESUnlockAlarmPwdSet</STRONG> (Thumb, 394 bytes, Stack size 32 bytes, menu_comm.o(i.Menu_Comm_BleAESUnlockAlarmPwdSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleAESUnlockAlarmPwdSet &rArr; Menu_RecordLockLog &rArr; HAL_Storage_WriteLockLog &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AppRegChk
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_ecb
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2ac]"></a>Menu_Comm_BleAESUnlockPwdSet</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, menu_comm.o(i.Menu_Comm_BleAESUnlockPwdSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleAESUnlockPwdSet &rArr; Menu_RecordLockLog &rArr; HAL_Storage_WriteLockLog &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AppRegChk
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_ecb
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2ad]"></a>Menu_Comm_BleAKeyProtection</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleAKeyProtection))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleAKeyProtection &rArr; HAL_Storage_WriteSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2ae]"></a>Menu_Comm_BleActiveDefense</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleActiveDefense))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleActiveDefense &rArr; HAL_Storage_WriteSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2af]"></a>Menu_Comm_BleAddFinger</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleAddFinger))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleAddFinger &rArr; HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2b0]"></a>Menu_Comm_BleAddPhoneAccount</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, menu_comm.o(i.Menu_Comm_BleAddPhoneAccount))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleAddPhoneAccount &rArr; Menu_RecordLockLog &rArr; HAL_Storage_WriteLockLog &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SearchEmpty
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SaveOneUserReg
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2b1]"></a>Menu_Comm_BleAddSmartKeyAccredit</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, menu_comm.o(i.Menu_Comm_BleAddSmartKeyAccredit))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleAddSmartKeyAccredit &rArr; Menu_RecordLockLog &rArr; HAL_Storage_WriteLockLog &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SearchEmpty
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SaveOneUserReg
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2b2]"></a>Menu_Comm_BleAliyunSecretKeySetParm</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleAliyunSecretKeySetParm))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleAliyunSecretKeySetParm &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_SetLinkKeyStart
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2b3]"></a>Menu_Comm_BleAutoLockConfig</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleAutoLockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleAutoLockConfig &rArr; HAL_Storage_WriteHardwareData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteHardwareData
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDirWithLen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2b4]"></a>Menu_Comm_BleAutoLockKeyConfig</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleAutoLockKeyConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleAutoLockKeyConfig &rArr; HAL_Storage_WriteSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDirWithLen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2b5]"></a>Menu_Comm_BleAutomaticLockIntervalSet</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleAutomaticLockIntervalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleAutomaticLockIntervalSet &rArr; HAL_Storage_WriteSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2b6]"></a>Menu_Comm_BleCatEyeSN</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleCatEyeSN))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleCatEyeSN &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_GetDeviceNameStart
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2b7]"></a>Menu_Comm_BleChannelPwdGet</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleChannelPwdGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleChannelPwdGet &rArr; HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2b8]"></a>Menu_Comm_BleDHKeyExchangeAlgorithm</STRONG> (Thumb, 500 bytes, Stack size 48 bytes, menu_comm.o(i.Menu_Comm_BleDHKeyExchangeAlgorithm))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleDHKeyExchangeAlgorithm &rArr; HAL_Comm_BleSendDirWithLen &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDirWithLen
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_GetRandomWord
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quick
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2ba]"></a>Menu_Comm_BleDelFinger</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleDelFinger))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleDelFinger &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_DelOneUserReg
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_DelStart
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2bc]"></a>Menu_Comm_BleDelPhoneAccount</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, menu_comm.o(i.Menu_Comm_BleDelPhoneAccount))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleDelPhoneAccount &rArr; HAL_Storage_MatchId &rArr; HAL_Storage_ReadOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AppRegChk
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_DelOneUserReg
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_MatchId
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2bd]"></a>Menu_Comm_BleDelSmartKey</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, menu_comm.o(i.Menu_Comm_BleDelSmartKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleDelSmartKey &rArr; HAL_Storage_MatchId &rArr; HAL_Storage_ReadOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_DelOneUserReg
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_MatchId
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2be]"></a>Menu_Comm_BleDisconnectBluetooth</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleDisconnectBluetooth))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleDisconnectBluetooth &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_SendDealStart
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_ChkBusy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdStop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2c0]"></a>Menu_Comm_BleDoorOpeningModeSet</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleDoorOpeningModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleDoorOpeningModeSet &rArr; HAL_Storage_WriteSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2c1]"></a>Menu_Comm_BleDoorbellCapture</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleDoorbellCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleDoorbellCapture &rArr; HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2c2]"></a>Menu_Comm_BleEmptyUser</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleEmptyUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleEmptyUser &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2c3]"></a>Menu_Comm_BleEquipmentReg</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleEquipmentReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleEquipmentReg &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_GetchannelPwd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2c5]"></a>Menu_Comm_BleFaceAttributeModify</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, menu_comm.o(i.Menu_Comm_BleFaceAttributeModify))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleFaceAttributeModify &rArr; HAL_Storage_GetOneUserReg &rArr; HAL_Storage_ReadOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_GetOneUserReg
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SaveOneUserReg
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2c6]"></a>Menu_Comm_BleFaceDelId</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, menu_comm.o(i.Menu_Comm_BleFaceDelId))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleFaceDelId &rArr; HAL_Storage_MatchId &rArr; HAL_Storage_ReadOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_DelOneUserReg
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_DelOneUserStart
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_MatchId
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2c8]"></a>Menu_Comm_BleFaceReg</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleFaceReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleFaceReg &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_AddUserStart
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2ca]"></a>Menu_Comm_BleFaceRegConfirm</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleFaceRegConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleFaceRegConfirm &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_DelOneUserReg
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_DelOneUserStart
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2cb]"></a>Menu_Comm_BleFaceVersionGet</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleFaceVersionGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleFaceVersionGet &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_GetVersionStart
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2cd]"></a>Menu_Comm_BleFingerAttributeModify</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, menu_comm.o(i.Menu_Comm_BleFingerAttributeModify))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleFingerAttributeModify &rArr; HAL_Storage_GetOneUserReg &rArr; HAL_Storage_ReadOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_GetOneUserReg
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SaveOneUserReg
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2ce]"></a>Menu_Comm_BleFlashRWComp</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleFlashRWComp))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleFlashRWComp &rArr; HAL_Storage_ReadSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ReadSysData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2cf]"></a>Menu_Comm_BleFlashWriteTest</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleFlashWriteTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleFlashWriteTest &rArr; HAL_Storage_WriteSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2d0]"></a>Menu_Comm_BleGetEventRecords</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleGetEventRecords))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleGetEventRecords &rArr; HAL_Storage_ReadLockLog &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ReadLockLog
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2d1]"></a>Menu_Comm_BleGetMcuVersion</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleGetMcuVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleGetMcuVersion &rArr; HAL_Comm_BleSendDirWithLen &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDirWithLen
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2d2]"></a>Menu_Comm_BleGyroscopeSet</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleGyroscopeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleGyroscopeSet &rArr; HAL_Storage_WriteSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2d3]"></a>Menu_Comm_BleID2ServerSwitch</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleID2ServerSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleID2ServerSwitch &rArr; HAL_Storage_WriteSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2d4]"></a>Menu_Comm_BleInfraredMonitoringDistanceSet</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleInfraredMonitoringDistanceSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleInfraredMonitoringDistanceSet &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDirWithLen
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_SetDistanceStart
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2d6]"></a>Menu_Comm_BleLedOledTest</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleLedOledTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleLedOledTest &rArr; HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLightOnce
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2d7]"></a>Menu_Comm_BleLockFirmwareVersionGet</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleLockFirmwareVersionGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleLockFirmwareVersionGet &rArr; HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2d8]"></a>Menu_Comm_BleLockMacGet</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleLockMacGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleLockMacGet &rArr; HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLightUniteData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2d9]"></a>Menu_Comm_BleLockPwdVerifyAdmin</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleLockPwdVerifyAdmin))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleLockPwdVerifyAdmin &rArr; HAL_Storage_WriteHardwareData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AppRegChk
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteHardwareData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2da]"></a>Menu_Comm_BleLockRegSecretKeyGet</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleLockRegSecretKeyGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleLockRegSecretKeyGet &rArr; HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TimeGetStm
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SecretKeyGet
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2dc]"></a>Menu_Comm_BleLockTimeGet</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleLockTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleLockTimeGet &rArr; HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RTCTimerGet
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2dd]"></a>Menu_Comm_BleLockUpdateProgramMode</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleLockUpdateProgramMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleLockUpdateProgramMode &rArr; HAL_Comm_SendDealStart &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_SendDealStart
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2de]"></a>Menu_Comm_BleLockVolumeSet</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleLockVolumeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleLockVolumeSet &rArr; HAL_Storage_WriteSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2df]"></a>Menu_Comm_BleMcuEnterUpdataMode</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleMcuEnterUpdataMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleMcuEnterUpdataMode &rArr; HAL_Comm_BleSendDirWithLen &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDirWithLen
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_Send
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2e0]"></a>Menu_Comm_BleModifFaceSafetyLevel</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleModifFaceSafetyLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleModifFaceSafetyLevel &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdDealStart
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2e1]"></a>Menu_Comm_BleMotorDirSet</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleMotorDirSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleMotorDirSet &rArr; HAL_Storage_WriteHardwareData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteHardwareData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2e2]"></a>Menu_Comm_BleMotorTorqueSet</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleMotorTorqueSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleMotorTorqueSet &rArr; HAL_Storage_WriteHardwareData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteHardwareData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2e3]"></a>Menu_Comm_BleNFCSwitchSet</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleNFCSwitchSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleNFCSwitchSet &rArr; HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2e4]"></a>Menu_Comm_BleNewAddFinger</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleNewAddFinger))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleNewAddFinger &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SearchEmpty
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_RegStart
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2e6]"></a>Menu_Comm_BleNewConfirmFingerRegSucced</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleNewConfirmFingerRegSucced))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleNewConfirmFingerRegSucced &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2e7]"></a>Menu_Comm_BlePhoneSecretKeyGet</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, menu_comm.o(i.Menu_Comm_BlePhoneSecretKeyGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BlePhoneSecretKeyGet &rArr; HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SecretKeyGet
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2e8]"></a>Menu_Comm_BleQueryLockConfigTable</STRONG> (Thumb, 870 bytes, Stack size 16 bytes, menu_comm.o(i.Menu_Comm_BleQueryLockConfigTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleQueryLockConfigTable &rArr; HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_GetchannelPwd
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2e9]"></a>Menu_Comm_BleR8CatEyeOTA</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleR8CatEyeOTA))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleR8CatEyeOTA &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdDealStart
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2ea]"></a>Menu_Comm_BleRecvDeal</STRONG> (Thumb, 1736 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleRecvDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 2052 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleRecvDeal &rArr; Menu_Comm_BleServerIssueChallenge &rArr; id2_client_get_challenge_auth_code &rArr; _id2_gen_auth_code &rArr; _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeepTimeRefresh
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLight_sysStatusSet
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLightOnce
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetPowerValue
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleGetRecvMsgType
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleWifiToolTest
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleWifiSetParm1
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleWifiFunctionSwitchSet
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleWakeSourceQuery
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleVoltageTest
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleVerifyPhoneEncrypt
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleUnlockUploadWifiSW
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleUnlockSmartKeyVerify
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleUnlockPwdSet
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleToolTestRWLockModel
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleToolTestFail
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleToolAddModel
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleTmpeSecretKeyGet
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleTimeSync
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleTestServerConnectionStatus
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleSmartKeySecretKeyGetRandom
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleSmartKeySecretKeyGet
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleSmartKeyAttributeModify
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleShangTangCatEyeSingleDouble
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerTokenVerify
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerIssueChallenge
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleSecondBatteryVoltageTest
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleR8CatEyeOTA
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleQueryLockConfigTable
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BlePhoneSecretKeyGet
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleNewConfirmFingerRegSucced
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleNewAddFinger
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleNFCSwitchSet
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleMotorTorqueSet
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleMotorDirSet
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleModifFaceSafetyLevel
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleMcuEnterUpdataMode
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockVolumeSet
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockUpdateProgramMode
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockTimeGet
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockRegSecretKeyGet
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockPwdVerifyAdmin
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockMacGet
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockFirmwareVersionGet
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLedOledTest
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleInfraredMonitoringDistanceSet
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleID2ServerSwitch
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleGyroscopeSet
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleGetMcuVersion
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleGetEventRecords
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFlashWriteTest
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFlashRWComp
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFingerAttributeModify
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceVersionGet
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceRegConfirm
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceReg
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceDelId
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceAttributeModify
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleEquipmentReg
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleEmptyUser
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDoorbellCapture
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDoorOpeningModeSet
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDisconnectBluetooth
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelSmartKey
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelPhoneAccount
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelFinger
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDHKeyExchangeAlgorithm
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleChannelPwdGet
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleCatEyeSN
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAutomaticLockIntervalSet
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAutoLockKeyConfig
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAutoLockConfig
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAliyunSecretKeySetParm
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddSmartKeyAccredit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddPhoneAccount
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddFinger
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleActiveDefense
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAKeyProtection
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESUnlockPwdSet
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESUnlockAlarmPwdSet
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESTmpeSecretKeyGet
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESAddPhoneAccount
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_Service
</UL>

<P><STRONG><a name="[301]"></a>Menu_Comm_BleSecondBatteryVoltageTest</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleSecondBatteryVoltageTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleSecondBatteryVoltageTest &rArr; HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2f9]"></a>Menu_Comm_BleServerIssueChallenge</STRONG> (Thumb, 194 bytes, Stack size 528 bytes, menu_comm.o(i.Menu_Comm_BleServerIssueChallenge))
<BR><BR>[Stack]<UL><LI>Max Depth = 2044 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleServerIssueChallenge &rArr; id2_client_get_challenge_auth_code &rArr; _id2_gen_auth_code &rArr; _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDirWithLen
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_challenge_auth_code
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2f8]"></a>Menu_Comm_BleServerTokenVerify</STRONG> (Thumb, 614 bytes, Stack size 608 bytes, menu_comm.o(i.Menu_Comm_BleServerTokenVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1828 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleServerTokenVerify &rArr; id2_client_decrypt &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_VerifyUserStop
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDirWithLen
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_int2char
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_base64_decode
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_id
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_decrypt
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2fb]"></a>Menu_Comm_BleShangTangCatEyeSingleDouble</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleShangTangCatEyeSingleDouble))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleShangTangCatEyeSingleDouble &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2ed]"></a>Menu_Comm_BleSmartKeyAttributeModify</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleSmartKeyAttributeModify))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleSmartKeyAttributeModify &rArr; HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2f2]"></a>Menu_Comm_BleSmartKeySecretKeyGet</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleSmartKeySecretKeyGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleSmartKeySecretKeyGet &rArr; HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SecretKeyGet
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2f0]"></a>Menu_Comm_BleSmartKeySecretKeyGetRandom</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleSmartKeySecretKeyGetRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleSmartKeySecretKeyGetRandom &rArr; HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SecretKeyGet
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2f4]"></a>Menu_Comm_BleTestServerConnectionStatus</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleTestServerConnectionStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleTestServerConnectionStatus &rArr; HAL_Comm_BleSendDirWithLen &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CheckWifiPower
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDirWithLen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2ec]"></a>Menu_Comm_BleTimeSync</STRONG> (Thumb, 364 bytes, Stack size 80 bytes, menu_comm.o(i.Menu_Comm_BleTimeSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleTimeSync &rArr; HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetByTick
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Stm2Tick
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2f3]"></a>Menu_Comm_BleTmpeSecretKeyGet</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, menu_comm.o(i.Menu_Comm_BleTmpeSecretKeyGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleTmpeSecretKeyGet &rArr; Menu_RecordLockLog &rArr; HAL_Storage_WriteLockLog &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RTCTimerGet
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AppRegChk
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2fc]"></a>Menu_Comm_BleToolAddModel</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleToolAddModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleToolAddModel &rArr; HAL_Storage_WriteHardwareData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteHardwareData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2fe]"></a>Menu_Comm_BleToolTestFail</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleToolTestFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleToolTestFail &rArr; HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VoicePlayDir
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Power_CPURst
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLight_DirDispaly
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2fd]"></a>Menu_Comm_BleToolTestRWLockModel</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleToolTestRWLockModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleToolTestRWLockModel &rArr; HAL_Storage_ReadSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ReadSysData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2ee]"></a>Menu_Comm_BleUnlockPwdSet</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, menu_comm.o(i.Menu_Comm_BleUnlockPwdSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleUnlockPwdSet &rArr; Menu_RecordLockLog &rArr; HAL_Storage_WriteLockLog &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AppRegChk
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2f1]"></a>Menu_Comm_BleUnlockSmartKeyVerify</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleUnlockSmartKeyVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleUnlockSmartKeyVerify &rArr; Menu_SmartKeyMatch &rArr; HAL_Storage_GetOneUserReg &rArr; HAL_Storage_ReadOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SmartKeyMatch
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2f7]"></a>Menu_Comm_BleUnlockUploadWifiSW</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleUnlockUploadWifiSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleUnlockUploadWifiSW &rArr; HAL_Storage_WriteSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2ef]"></a>Menu_Comm_BleVerifyPhoneEncrypt</STRONG> (Thumb, 622 bytes, Stack size 24 bytes, menu_comm.o(i.Menu_Comm_BleVerifyPhoneEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleVerifyPhoneEncrypt &rArr; HAL_Storage_MatchId &rArr; HAL_Storage_ReadOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_GetchannelPwd
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AddError
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_MatchId
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2ff]"></a>Menu_Comm_BleVoltageTest</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleVoltageTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleVoltageTest &rArr; HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2fa]"></a>Menu_Comm_BleWakeSourceQuery</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleWakeSourceQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleWakeSourceQuery &rArr; HAL_Comm_BleSendDir &rArr; HAL_Comm_Send &rArr; HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2f5]"></a>Menu_Comm_BleWifiFunctionSwitchSet</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleWifiFunctionSwitchSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleWifiFunctionSwitchSet &rArr; HAL_Storage_WriteSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[2f6]"></a>Menu_Comm_BleWifiSetParm1</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, menu_comm.o(i.Menu_Comm_BleWifiSetParm1))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleWifiSetParm1 &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_ConfigWifiDataStart
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[300]"></a>Menu_Comm_BleWifiToolTest</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_BleWifiToolTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_BleWifiToolTest &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[fe]"></a>Menu_Comm_Service</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, menu_comm.o(i.Menu_Comm_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 2060 + Unknown Stack Size
<LI>Call Chain = Menu_Comm_Service &rArr; Menu_Comm_BleRecvDeal &rArr; Menu_Comm_BleServerIssueChallenge &rArr; id2_client_get_challenge_auth_code &rArr; _id2_gen_auth_code &rArr; _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_SendDeal
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_RstBack
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_RevcDeal
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_GetRecvMsgType
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_CealrSend
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_CealrRecv
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommOpenAndInfoUpload
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgUpdateDeviceName
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgMotorLock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgKeyStatus
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgEnterOTA
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgDisconnectBLE
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommGetBattery
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetBackBat
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUser_Service
</UL>

<P><STRONG><a name="[13a]"></a>Menu_CycleScan</STRONG> (Thumb, 1620 bytes, Stack size 8 bytes, menu_cyclescanmenu.o(i.Menu_CycleScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_CycleScan &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_SysRamBackup
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VoicePlayDir
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_SendDealStart
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_EnterSleepConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_EnterSleep
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_WaitWifiComplete
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FaceId_WaitComplete
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_ChkBusy
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_DelOneUserReg
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLight_ChkBusy
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_UartColse
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_SetDistance
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IR_ReadIRQ
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_DelStart
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_VerifyUserStop
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_SetDemoMode
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_DelOneUserStart
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_ChkPowerBusy
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_ChkBusy
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDirWithLen
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_BuFang_Time_Detet
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Alarm_GetStatus
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUser_Service
</UL>

<P><STRONG><a name="[5d]"></a>Menu_Desktop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu_currentoperate.o(i.Menu_Desktop))
<BR>[Address Reference Count : 1]<UL><LI> menu_datastructure.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>Menu_EnterDesktopVerifyStart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, menu_currentoperate.o(i.Menu_EnterDesktopVerifyStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Menu_EnterDesktopVerifyStart &rArr; Menu_Face_PowerOnStart &rArr; HAL_RTC_GetTick &rArr; HAL_RTC_TimeGetStm &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_VoiceDesktop
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_VerifyUserStart
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SysWakeUpToMenu
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenExitMenuOperation
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
</UL>

<P><STRONG><a name="[310]"></a>Menu_FaceId_WaitComplete</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_face.o(i.Menu_FaceId_WaitComplete))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
</UL>

<P><STRONG><a name="[314]"></a>Menu_FaceWifiDeal</STRONG> (Thumb, 452 bytes, Stack size 8 bytes, menu_face.o(i.Menu_FaceWifiDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = Menu_FaceWifiDeal &rArr; HAL_FaceId_CmdDeal &rArr; HAL_FaceId_Cmd &rArr; HAL_FaceId_CmdSend &rArr; DRV_FaceId_CmdSend &rArr; DRV_FaceId_PackDataAndSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_LowPowerChk
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_WifiLockLogUpdata
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_WifiCmdAlarmUpdata
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdDealStart
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdStop
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdDeal
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[410]"></a>Menu_Face_DelGeneralFaceStart</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu_face.o(i.Menu_Face_DelGeneralFaceStart))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
</UL>

<P><STRONG><a name="[12f]"></a>Menu_Face_PowerOffStart</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, menu_face.o(i.Menu_Face_PowerOffStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Menu_Face_PowerOffStart &rArr; HAL_FaceId_CmdPowerOffDir &rArr; DRV_FaceId_ClosePow &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdPowerOffDir
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdPowerOff
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDeal_CloseLock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SysWakeUpToMenu
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_WifiConnect
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Clear
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleFaceVersionGet
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleConfigWifiData
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleCatEyeSN
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAliyunSecretKeySetParm
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AdminChkVerifyOk
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AdminChk
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgKeyStatusMenuEnter
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_Desktop
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuDesktopFun
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenExitMenuOperation
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleShangTangCatEyeSingleDouble
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerTokenVerify
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDisconnectBluetooth
</UL>

<P><STRONG><a name="[202]"></a>Menu_Face_PowerOnStart</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, menu_face.o(i.Menu_Face_PowerOnStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = Menu_Face_PowerOnStart &rArr; HAL_RTC_GetTick &rArr; HAL_RTC_TimeGetStm &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTick
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdPowerOn
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_EnterDesktopVerifyStart
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_DelGeneralFace
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Clear
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesktopKeyEnter
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenExitMenuOperation
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleWifiSetParm1
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleR8CatEyeOTA
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleModifFaceSafetyLevel
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceVersionGet
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceRegConfirm
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceReg
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceDelId
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleCatEyeSN
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAliyunSecretKeySetParm
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FaceWifiDeal
</UL>

<P><STRONG><a name="[13d]"></a>Menu_Face_Service</STRONG> (Thumb, 352 bytes, Stack size 8 bytes, menu_face.o(i.Menu_Face_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Menu_Face_Service &rArr; Menu_Face_Desktop &rArr; Menu_Face_VerifyOk &rArr; HAL_Storage_MatchId &rArr; HAL_Storage_ReadOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_WifiConnect
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Desktop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_DelGeneralFace
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Clear
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleShangTangCatEyeSingleDouble
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleR8CatEyeOTA
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleModifFaceSafetyLevel
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleFaceVersionGet
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleFaceDelId
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleConfigWifiData
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleCatEyeSN
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAliyunSecretKeySetParm
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAddFaceUserFail
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAddFaceIng
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Bell
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AdminChk
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AddFaceIng
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CatEyeConn
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_RevcDeal
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_PowerDeal
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_TriggerCaptureData
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FaceWifiDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUser_Service
</UL>

<P><STRONG><a name="[13e]"></a>Menu_FingerService</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, menu_finger.o(i.Menu_FingerService))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = Menu_FingerService &rArr; Menu_Finger_Desktop &rArr; Menu_Finger_VerifyOk &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerStepOK
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_Desktop
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_DelFinger
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_ClearAll
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleDelFinger
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerStep
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerFaill
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerConfirmFail
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_AdminChk
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_AddFingerStepOK
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_AddFingerStep
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUser_Service
</UL>

<P><STRONG><a name="[333]"></a>Menu_Finger_BleAddFingerStepOK</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, menu_finger.o(i.Menu_Finger_BleAddFingerStepOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Finger_BleAddFingerStepOK &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_SaveBufGet
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_RegReStart
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_ChkFingerLeave
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FingerService
</UL>

<P><STRONG><a name="[5e]"></a>Menu_FirstUse</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu_currentoperate.o(i.Menu_FirstUse))
<BR>[Address Reference Count : 1]<UL><LI> menu_datastructure.o(.constdata)
</UL>
<P><STRONG><a name="[2c4]"></a>Menu_GetchannelPwd</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, menu_currentoperate.o(i.Menu_GetchannelPwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Menu_GetchannelPwd
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SmartKeyMatch
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleVerifyPhoneEncrypt
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleQueryLockConfigTable
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleEquipmentReg
</UL>

<P><STRONG><a name="[21b]"></a>Menu_KeepTimeRefresh</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, menu.o(i.Menu_KeepTimeRefresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Menu_KeepTimeRefresh &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDeal_VoiceAndLight
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuDesktopFun
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleRecvDeal
</UL>

<P><STRONG><a name="[13c]"></a>Menu_KeyBackLightService</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, menu_keybacklight.o(i.Menu_KeyBackLightService))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Menu_KeyBackLightService &rArr; HAL_KeyLightDeal &rArr; DRV_MBI5024_Out &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLightDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUser_Service
</UL>

<P><STRONG><a name="[33d]"></a>Menu_KeyBackLightUpdate</STRONG> (Thumb, 1046 bytes, Stack size 16 bytes, menu_keybacklight.o(i.Menu_KeyBackLightUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Menu_KeyBackLightUpdate &rArr; HAL_KeyLight_sysStatusSet &rArr; HAL_KeyLightStatusRun &rArr; DRV_MBI5024_LEDOpen &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLight_sysStatusSet
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLightOnce
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLightDataSet
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_WakeUpLight
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
</UL>

<P><STRONG><a name="[13b]"></a>Menu_KeyDealService</STRONG> (Thumb, 654 bytes, Stack size 8 bytes, menu_keydeal.o(i.Menu_KeyDealService))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = Menu_KeyDealService &rArr; Menu_KeyForMenu &rArr; fn_MenuNum &rArr; fn_GetInputInfo &rArr; GetInputInfoMenuModPwdInputAgainFun &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyForMenu
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_Bell
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeySacnGet
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDeal_VoiceAndLight
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDeal_IsEnable
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDeal_CloseLock
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLightOnce
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VoicePlayDir
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUser_Service
</UL>

<P><STRONG><a name="[344]"></a>Menu_KeyForMenu</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, menu.o(i.Menu_KeyForMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = Menu_KeyForMenu &rArr; fn_MenuNum &rArr; fn_GetInputInfo &rArr; GetInputInfoMenuModPwdInputAgainFun &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuNum
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuEnter
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuReturn
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDealService
</UL>

<P><STRONG><a name="[127]"></a>Menu_LowPowerChk</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu_currentoperate.o(i.Menu_LowPowerChk))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_WifiShutdown
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Bell
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_WifiLockLogUpdata
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_WifiCmdAlarmUpdata
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FaceWifiDeal
</UL>

<P><STRONG><a name="[61]"></a>Menu_None</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu_currentoperate.o(i.Menu_None))
<BR>[Address Reference Count : 1]<UL><LI> menu_datastructure.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>Menu_PassWdFail</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu_currentoperate.o(i.Menu_PassWdFail))
<BR>[Address Reference Count : 1]<UL><LI> menu_datastructure.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>Menu_PassWdPass</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu_currentoperate.o(i.Menu_PassWdPass))
<BR>[Address Reference Count : 1]<UL><LI> menu_datastructure.o(.constdata)
</UL>
<P><STRONG><a name="[2aa]"></a>Menu_RTCTimerGet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_currentoperate.o(i.Menu_RTCTimerGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Menu_RTCTimerGet &rArr; HAL_RTC_TimeGetStm &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TimeGetStm
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleTmpeSecretKeyGet
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockTimeGet
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESTmpeSecretKeyGet
</UL>

<P><STRONG><a name="[204]"></a>Menu_RecordLockLog</STRONG> (Thumb, 778 bytes, Stack size 56 bytes, menu_currentoperate.o(i.Menu_RecordLockLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = Menu_RecordLockLog &rArr; HAL_Storage_WriteLockLog &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteLockLog
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyOk
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_DelGeneralFace
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAddFaceIng
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AdminChkVerifyOk
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AddFaceIng
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_VerifyOk
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerStep
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuModPwdInputAgainFun
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesktopKeyEnter
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleVerifyPhoneEncrypt
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleUnlockSmartKeyVerify
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleUnlockPwdSet
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleTmpeSecretKeyGet
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceRegConfirm
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelSmartKey
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelPhoneAccount
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddSmartKeyAccredit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAddPhoneAccount
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESUnlockPwdSet
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESUnlockAlarmPwdSet
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESAddPhoneAccount
</UL>

<P><STRONG><a name="[2db]"></a>Menu_SecretKeyGet</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, menu_comm.o(i.Menu_SecretKeyGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Menu_SecretKeyGet &rArr; HAL_RTC_TimeGetStm &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TimeGetStm
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleSmartKeySecretKeyGetRandom
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleSmartKeySecretKeyGet
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BlePhoneSecretKeyGet
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleLockRegSecretKeyGet
</UL>

<P><STRONG><a name="[309]"></a>Menu_SmartKeyMatch</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, menu_comm.o(i.Menu_SmartKeyMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = Menu_SmartKeyMatch &rArr; HAL_Storage_GetOneUserReg &rArr; HAL_Storage_ReadOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_GetOneUserReg
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_GetchannelPwd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_ecb
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleUnlockSmartKeyVerify
</UL>

<P><STRONG><a name="[5b]"></a>Menu_SystemSleep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu_currentoperate.o(i.Menu_SystemSleep))
<BR>[Address Reference Count : 1]<UL><LI> menu_datastructure.o(.constdata)
</UL>
<P><STRONG><a name="[32c]"></a>Menu_TriggerCaptureData</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, menu_face.o(i.Menu_TriggerCaptureData))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = Menu_TriggerCaptureData &rArr; HAL_FaceId_CmdDeal &rArr; HAL_FaceId_Cmd &rArr; HAL_FaceId_CmdSend &rArr; DRV_FaceId_CmdSend &rArr; DRV_FaceId_PackDataAndSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdStop
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdDeal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[313]"></a>Menu_VoiceDesktop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu_voice.o(i.Menu_VoiceDesktop))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Menu_VoiceDesktop &rArr; Menu_VoicePlay &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_VoicePlay
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_EnterDesktopVerifyStart
</UL>

<P><STRONG><a name="[140]"></a>Menu_VoiceService</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, menu_voice.o(i.Menu_VoiceService))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Menu_VoiceService &rArr; HAL_VoiceDeal &rArr; HAL_VoicePlayDir &rArr; DRV_Voice_Play &rArr; DRV_Voice_SendDataN &rArr; DRV_Voice_SendData &rArr; I2C_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VoiceDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUser_Service
</UL>

<P><STRONG><a name="[311]"></a>Menu_WaitWifiComplete</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_currentoperate.o(i.Menu_WaitWifiComplete))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
</UL>

<P><STRONG><a name="[5c]"></a>Menu_Welcome</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu_currentoperate.o(i.Menu_Welcome))
<BR>[Address Reference Count : 1]<UL><LI> menu_datastructure.o(.constdata)
</UL>
<P><STRONG><a name="[316]"></a>Menu_WifiCmdAlarmUpdata</STRONG> (Thumb, 340 bytes, Stack size 8 bytes, menu_currentoperate.o(i.Menu_WifiCmdAlarmUpdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Menu_WifiCmdAlarmUpdata &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_LowPowerChk
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_WifiCmdSend
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FaceWifiDeal
</UL>

<P><STRONG><a name="[315]"></a>Menu_WifiLockLogUpdata</STRONG> (Thumb, 428 bytes, Stack size 16 bytes, menu_currentoperate.o(i.Menu_WifiLockLogUpdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Menu_WifiLockLogUpdata &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_LowPowerChk
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_WifiCmdSend
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FaceWifiDeal
</UL>

<P><STRONG><a name="[141]"></a>Menu_WifiService</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu_wifi.o(i.Menu_WifiService))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUser_Service
</UL>

<P><STRONG><a name="[34c]"></a>Merge</STRONG> (Thumb, 136 bytes, Stack size 112 bytes, algorithm_hal.o(i.Merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Merge
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MergeSort
</UL>

<P><STRONG><a name="[34b]"></a>MergeSort</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, algorithm_hal.o(i.MergeSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + In Cycle
<LI>Call Chain = MergeSort &rArr;  MergeSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MergeSort
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Merge
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_algorithm_filter_NormalDistribution
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MergeSort
</UL>

<P><STRONG><a name="[9]"></a>NMI_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, system_armcm4.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = NMI_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[144]"></a>NVIC_Init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, sys.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCI_AsyncTC_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_PowerOff_1p5
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_IntInit
</UL>

<P><STRONG><a name="[295]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sys.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrput_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[1ec]"></a>Nvram_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pci_drv.o(i.Nvram_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Nvram_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvram_Init_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ReTry_Time_Set
</UL>

<P><STRONG><a name="[1dc]"></a>PCI_AsyncTC_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, pci_drv.o(i.PCI_AsyncTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PCI_AsyncTC_Init &rArr; TC_IntInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Close
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_Sleep
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_IntInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_EnterSleep
</UL>

<P><STRONG><a name="[1e]"></a>PCI_DET_IRQHandler</STRONG> (Thumb, 556 bytes, Stack size 24 bytes, pci_drv.o(i.PCI_DET_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = PCI_DET_IRQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCI_SDIO_Static_Set
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PCI_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, cpm_drv.o(i.PCI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = PCI_IRQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[1c0]"></a>PCI_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, pci_drv.o(i.PCI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCI_Init_Key
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCI_Clk_Init_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_KeySacn_Init
</UL>

<P><STRONG><a name="[165]"></a>PCI_NVSRAM_WtiteByte</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, pci_drv.o(i.PCI_NVSRAM_WtiteByte))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ReTry_Time_Set
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BuFang_Time_Sleep
</UL>

<P><STRONG><a name="[350]"></a>PCI_SDIO_Static_Set</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pci_drv.o(i.PCI_SDIO_Static_Set))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCI_DET_IRQHandler
</UL>

<P><STRONG><a name="[15]"></a>PIT1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pit32_drv.o(i.PIT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIT1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT32_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PIT2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pit32_drv.o(i.PIT2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIT2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT32_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[44c]"></a>PIT_ControlConfig</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, pit.o(i.PIT_ControlConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
</UL>

<P><STRONG><a name="[450]"></a>PIT_DisableInterrupt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pit.o(i.PIT_DisableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
</UL>

<P><STRONG><a name="[44f]"></a>PIT_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pit.o(i.PIT_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
</UL>

<P><STRONG><a name="[44e]"></a>PIT_EnableInterrupt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pit.o(i.PIT_EnableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
</UL>

<P><STRONG><a name="[44d]"></a>PIT_WritePMR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pit.o(i.PIT_WritePMR))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
</UL>

<P><STRONG><a name="[21]"></a>PMU_RTC_IRQHandler</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, rtc_drv.o(i.PMU_RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = PMU_RTC_IRQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[354]"></a>PPSManager</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, apdu_drv.o(i.PPSManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PPSManager &rArr; Send_PTS_ACK
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_PTS_ACK
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Default_ACK
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIx_IRQHandler
</UL>

<P><STRONG><a name="[37]"></a>PWM0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, pwm_drv.o(i.PWM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PWM0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PWM1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, pwm_drv.o(i.PWM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PWM1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>PWM2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, pwm_drv.o(i.PWM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PWM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>PWM3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, pwm_drv.o(i.PWM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PWM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[357]"></a>PWM_ISR</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, pwm_drv.o(i.PWM_ISR))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM3_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_IRQHandler
</UL>

<P><STRONG><a name="[10]"></a>PendSV_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, system_armcm4.o(i.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[2b9]"></a>Quick</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, menu_comm.o(i.Quick))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Quick
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDHKeyExchangeAlgorithm
</UL>

<P><STRONG><a name="[359]"></a>RTC_GetTime</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtc_drv.o(i.RTC_GetTime))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[1e6]"></a>RTC_Init</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, rtc_drv.o(i.RTC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_RTC_Init
</UL>

<P><STRONG><a name="[1e9]"></a>RTC_SetTime</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, rtc_drv.o(i.RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_RTC_SetByTick
</UL>

<P><STRONG><a name="[35c]"></a>Read_ID</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, ssi_drv.o(i.Read_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Read_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ID_Test
</UL>

<P><STRONG><a name="[35a]"></a>Read_ID_Test</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ssi_demo.o(i.Read_ID_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Read_ID_Test &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Standard_Init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ID
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadID
</UL>

<P><STRONG><a name="[32]"></a>SCI1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart_drv.o(i.SCI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SCI1_IRQHandler &rArr; UART_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SCI2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart_drv.o(i.SCI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SCI2_IRQHandler &rArr; UART_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SCI3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart_drv.o(i.SCI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SCI3_IRQHandler &rArr; UART_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[28a]"></a>SHA_Final_Algo</STRONG> (Thumb, 156 bytes, Stack size 28 bytes, sha_drv.o(i.SHA_Final_Algo))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SHA_Final_Algo &rArr; sha_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha_resume
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha_read_result
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2_hash_op
</UL>

<P><STRONG><a name="[289]"></a>SHA_Init_Algo</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, sha_drv.o(i.SHA_Init_Algo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SHA_Init_Algo &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2_hash_op
</UL>

<P><STRONG><a name="[28b]"></a>SHA_Update_Algo</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sha_drv.o(i.SHA_Update_Algo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SHA_Update_Algo &rArr; sha_read_mid_data &rArr; sha_read_mid_result
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha_resume
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha_read_mid_data
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2_hash_op
</UL>

<P><STRONG><a name="[2c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv.o(i.SPI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[1a5]"></a>SPI_ConfigGpio</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, spi_drv.o(i.SPI_ConfigGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_EnterSleepConfig
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_ReservedWakeupConfig
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_ReservedSleepConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_WifiPowClose
</UL>

<P><STRONG><a name="[43f]"></a>SPI_ControlConfig</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, spi.o(i.SPI_ControlConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSpiInit
</UL>

<P><STRONG><a name="[43d]"></a>SPI_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(i.SPI_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSpiInit
</UL>

<P><STRONG><a name="[445]"></a>SPI_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(i.SPI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSpiInit
</UL>

<P><STRONG><a name="[362]"></a>SPI_Flash_Erase_Sector</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, flash.o(i.SPI_Flash_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI_Flash_Erase_Sector &rArr; SSI_EFlash_Sector_Erase &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Write_Enable
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Sector_Erase
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Write_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Sectors
</UL>

<P><STRONG><a name="[366]"></a>SPI_Flash_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, flash.o(i.SPI_Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Flash_Init &rArr; SSI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashInit
</UL>

<P><STRONG><a name="[68]"></a>SPI_Flash_Read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, flash.o(i.SPI_Flash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_Flash_Read &rArr; SSI_EFlash_DUAL_Read &rArr; SSI_DUAL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_DUAL_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bin_lib_table.o(.constdata)
</UL>
<P><STRONG><a name="[1b1]"></a>SPI_Flash_ReadID</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, flash.o(i.SPI_Flash_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SPI_Flash_ReadID &rArr; Read_ID_Test &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ID_Test
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_Init
</UL>

<P><STRONG><a name="[369]"></a>SPI_Flash_Write_Multipages</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, flash.o(i.SPI_Flash_Write_Multipages))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_Flash_Write_Multipages &rArr; SPI_Flash_Write_Page &rArr; SSI_EFlash_Program &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Sectors
</UL>

<P><STRONG><a name="[36a]"></a>SPI_Flash_Write_Page</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, flash.o(i.SPI_Flash_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI_Flash_Write_Page &rArr; SSI_EFlash_Program &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Write_Enable
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Program
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Write_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Multipages
</UL>

<P><STRONG><a name="[69]"></a>SPI_Flash_Write_Sectors</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, flash.o(i.SPI_Flash_Write_Sectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SPI_Flash_Write_Sectors &rArr; SPI_Flash_Write_Multipages &rArr; SPI_Flash_Write_Page &rArr; SSI_EFlash_Program &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Multipages
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bin_lib_table.o(.constdata)
</UL>
<P><STRONG><a name="[43e]"></a>SPI_FrameConfig</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, spi.o(i.SPI_FrameConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSpiInit
</UL>

<P><STRONG><a name="[441]"></a>SPI_PinIOConfig</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spi.o(i.SPI_PinIOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_PinIOConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSpiInit
</UL>

<P><STRONG><a name="[444]"></a>SPI_ResetRXFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(i.SPI_ResetRXFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSpiInit
</UL>

<P><STRONG><a name="[443]"></a>SPI_ResetTXFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(i.SPI_ResetTXFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSpiInit
</UL>

<P><STRONG><a name="[440]"></a>SPI_SetBaudrate</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi.o(i.SPI_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_SetBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSpiInit
</UL>

<P><STRONG><a name="[1a6]"></a>SPI_WriteGpioData</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi_drv.o(i.SPI_WriteGpioData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_WriteGpioData
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_EnterSleepConfig
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_ReservedWakeupConfig
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_ReservedSleepConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_WifiPowClose
</UL>

<P><STRONG><a name="[442]"></a>SPI_WritePin</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spi.o(i.SPI_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSpiInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSpiWriteRead
</UL>

<P><STRONG><a name="[36c]"></a>SSI_DUAL_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ssi_drv.o(i.SSI_DUAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSI_DUAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_DUAL_Read
</UL>

<P><STRONG><a name="[373]"></a>SSI_Disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssi.o(i.SSI_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Init
</UL>

<P><STRONG><a name="[368]"></a>SSI_EFlash_DUAL_Read</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ssi_drv.o(i.SSI_EFlash_DUAL_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SSI_EFlash_DUAL_Read &rArr; SSI_DUAL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_DUAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
</UL>

<P><STRONG><a name="[36d]"></a>SSI_EFlash_Get_Status1</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ssi_drv.o(i.SSI_EFlash_Get_Status1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Standard_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Write_Enable
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Sector_Erase
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_QUAD_Program
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Program
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Prog_Status2
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Write_Disable
</UL>

<P><STRONG><a name="[36e]"></a>SSI_EFlash_Get_Status2</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ssi_drv.o(i.SSI_EFlash_Get_Status2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSI_EFlash_Get_Status2
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Standard_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Prog_Status2
</UL>

<P><STRONG><a name="[36f]"></a>SSI_EFlash_Prog_Status2</STRONG> (Thumb, 170 bytes, Stack size 28 bytes, ssi_drv.o(i.SSI_EFlash_Prog_Status2))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Write_Enable
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Get_Status2
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Get_Status1
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_QUAD_Read
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_QUAD_Program
</UL>

<P><STRONG><a name="[36b]"></a>SSI_EFlash_Program</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, ssi_drv.o(i.SSI_EFlash_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSI_EFlash_Program &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Write_Enable
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Get_Status1
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
</UL>

<P><STRONG><a name="[370]"></a>SSI_EFlash_QUAD_Program</STRONG> (Thumb, 196 bytes, Stack size 36 bytes, ssi_drv.o(i.SSI_EFlash_QUAD_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Write_Enable
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_QUAD_Init
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Prog_Status2
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Get_Status1
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>

<P><STRONG><a name="[372]"></a>SSI_EFlash_QUAD_Read</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ssi_drv.o(i.SSI_EFlash_QUAD_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SSI_EFlash_QUAD_Read &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_QUAD_Init
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Prog_Status2
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>

<P><STRONG><a name="[364]"></a>SSI_EFlash_Sector_Erase</STRONG> (Thumb, 168 bytes, Stack size 28 bytes, ssi_drv.o(i.SSI_EFlash_Sector_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SSI_EFlash_Sector_Erase &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Get_Status1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
</UL>

<P><STRONG><a name="[365]"></a>SSI_EFlash_Write_Disable</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ssi.o(i.SSI_EFlash_Write_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SSI_EFlash_Write_Disable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Get_Status1
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
</UL>

<P><STRONG><a name="[363]"></a>SSI_EFlash_Write_Enable</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ssi_drv.o(i.SSI_EFlash_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Standard_Init
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Get_Status1
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_QUAD_Program
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Program
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Prog_Status2
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
</UL>

<P><STRONG><a name="[374]"></a>SSI_Enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssi.o(i.SSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Init
</UL>

<P><STRONG><a name="[367]"></a>SSI_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ssi.o(i.SSI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Enable
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>

<P><STRONG><a name="[371]"></a>SSI_QUAD_Init</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, ssi_drv.o(i.SSI_QUAD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SSI_QUAD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_QUAD_Read
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_QUAD_Program
</UL>

<P><STRONG><a name="[35b]"></a>SSI_Standard_Init</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ssi_drv.o(i.SSI_Standard_Init))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Write_Enable
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ID_Test
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Get_Status2
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Get_Status1
</UL>

<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, system_armcm4.o(i.SVC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SVC_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[134]"></a>SendATR</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, apdu_drv.o(i.SendATR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendATR
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitByte
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATR_Handler
</UL>

<P><STRONG><a name="[355]"></a>Send_Default_ACK</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, apdu_drv.o(i.Send_Default_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Send_Default_ACK
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitByte
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPSManager
</UL>

<P><STRONG><a name="[356]"></a>Send_PTS_ACK</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, apdu_drv.o(i.Send_PTS_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Send_PTS_ACK
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitByte
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPSManager
</UL>

<P><STRONG><a name="[38f]"></a>SetFIFO_Addr</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, usbdev_control.o(i.SetFIFO_Addr))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_BusReset
</UL>

<P><STRONG><a name="[3a6]"></a>SetTx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbdev_control.o(i.SetTx))
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Packet_BulkIn
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbRead10
</UL>

<P><STRONG><a name="[1d8]"></a>Set_POR_Reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, reset_drv.o(i.Set_POR_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_POR_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_Write_CoreTestKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_CPURst
</UL>

<P><STRONG><a name="[401]"></a>SubC0_gint0_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, c0_drv.o(i.SubC0_gint0_callback))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_callback
</UL>

<P><STRONG><a name="[376]"></a>SubC0_gint1_callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, c0_drv.o(i.SubC0_gint1_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SubC0_gint1_callback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_callback
</UL>

<P><STRONG><a name="[377]"></a>SubC0_gint4_callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, c0_drv.o(i.SubC0_gint4_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SubC0_gint4_callback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_callback
</UL>

<P><STRONG><a name="[378]"></a>SubC0_gint5_callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, c0_drv.o(i.SubC0_gint5_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SubC0_gint5_callback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_callback
</UL>

<P><STRONG><a name="[1f4]"></a>SysTick_Enable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, systick_drv.o(i.SysTick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SysTimerInit
</UL>

<P><STRONG><a name="[11]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, systick_drv.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; DRV_SysTimerHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SysTimerHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[37a]"></a>Sys_Clk_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, cpm_drv.o(i.Sys_Clk_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sys_Clk_Init &rArr; CPM_SysClkSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Sys_Clock
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_OSC_Switch
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS_Clk_Op
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_Vref_Trim
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_SysClkSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[1d4]"></a>Sys_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sys.o(i.Sys_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sys_Init &rArr; Sys_Clk_Init &rArr; CPM_SysClkSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICACHE_Init
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_Init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Clk_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_CPUInit
</UL>

<P><STRONG><a name="[145]"></a>Sys_Standby</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sys.o(i.Sys_Standby))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sys_Standby &rArr; CPM_PWRCR_OptBits
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_PWRCR_OptBits
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WFI_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_PowerOff_1p5
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_Sleep
</UL>

<P><STRONG><a name="[53]"></a>SystemInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_armcm4.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(.text)
</UL>
<P><STRONG><a name="[34f]"></a>TC_Close</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tc_drv.o(i.TC_Close))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCI_AsyncTC_Init
</UL>

<P><STRONG><a name="[14]"></a>TC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, tc_drv.o(i.TC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[381]"></a>TC_ISR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tc_drv.o(i.TC_ISR))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_IRQHandler
</UL>

<P><STRONG><a name="[34e]"></a>TC_IntInit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, tc_drv.o(i.TC_IntInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TC_IntInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCI_AsyncTC_Init
</UL>

<P><STRONG><a name="[29]"></a>TSI_IRQHandler</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, tsi_app.o(i.TSI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TSI_IRQHandler &rArr; tsi_callback &rArr; hal_tsi_transferFineData
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GET_IE_SCANFINISH
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GET_IE_AWD
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_wakeup_callback
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_getIFScanFinish
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_getIFAWD
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_clearIFScanFinish
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsi_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[375]"></a>TransmitByte</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usi_drv.o(i.TransmitByte))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_PTS_ACK
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Default_ACK
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATR
</UL>

<P><STRONG><a name="[167]"></a>UART_ConfigGpio</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart_drv.o(i.UART_ConfigGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdPowerOffDir
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_EnterSleepConfig
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_COMM_EnterSleepConfig
</UL>

<P><STRONG><a name="[17c]"></a>UART_Init</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, uart_drv.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Uart_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_Init
</UL>

<P><STRONG><a name="[181]"></a>UART_RecvByte</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, uart_drv.o(i.UART_RecvByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_RecvByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_RecvDataUnblock
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_RecvDataUnblock
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_RecvDataUnblock
</UL>

<P><STRONG><a name="[38b]"></a>UART_SendByte</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, uart_drv.o(i.UART_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>

<P><STRONG><a name="[183]"></a>UART_SendData</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, uart_drv.o(i.UART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_SendData
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_SendData
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_SendData
</UL>

<P><STRONG><a name="[168]"></a>UART_WriteGpioData</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uart_drv.o(i.UART_WriteGpioData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_WriteGpioData
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdPowerOffDir
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_EnterSleepConfig
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_COMM_EnterSleepConfig
</UL>

<P><STRONG><a name="[2a]"></a>USBC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb_drv.o(i.USBC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBC_IRQHandler &rArr; USBDev_Polling &rArr; USBDev_EP0_ISR &rArr; USBDev_Ep0Handler &rArr; USBDev_GetDescriptor &rArr; write_ep0_buf &rArr; write_ep_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_MS_ISR
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Polling
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[38e]"></a>USBDev_BusReset</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, usbdev_control.o(i.USBDev_BusReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBDev_BusReset
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFIFO_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Polling
</UL>

<P><STRONG><a name="[390]"></a>USBDev_Data_BulkIn</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, usb_ms_control.o(i.USBDev_Data_BulkIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBDev_Data_BulkIn &rArr; enum_realDisk
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Packet_BulkIn
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enum_realDisk
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbRead10
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Data_BulkOut
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_EP1_TX_ISR
</UL>

<P><STRONG><a name="[394]"></a>USBDev_Data_BulkOut</STRONG> (Thumb, 472 bytes, Stack size 8 bytes, usb_ms_control.o(i.USBDev_Data_BulkOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBDev_Data_BulkOut &rArr; USBDev_Inquiry &rArr; USBDev_Packet_BulkIn &rArr; UsbSetTXsize
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_RequestSense
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_ReadCapacity
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Packet_BulkIn
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_ModeSense
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Inquiry
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Data_BulkIn
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendorWriteData
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ep_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_EP1_RX_ISR
</UL>

<P><STRONG><a name="[39b]"></a>USBDev_EP0_ISR</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbdev_isr.o(i.USBDev_EP0_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBDev_EP0_ISR &rArr; USBDev_Ep0Handler &rArr; USBDev_GetDescriptor &rArr; write_ep0_buf &rArr; write_ep_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Ep0Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Polling
</UL>

<P><STRONG><a name="[3a3]"></a>USBDev_EP0_SendStall</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbdev_control.o(i.USBDev_EP0_SendStall))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_GetStatus
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_GetDescriptor
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Ep0Handler
</UL>

<P><STRONG><a name="[39d]"></a>USBDev_EP1_RX_ISR</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbdev_isr.o(i.USBDev_EP1_RX_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBDev_EP1_RX_ISR &rArr; USBDev_Data_BulkOut &rArr; USBDev_Inquiry &rArr; USBDev_Packet_BulkIn &rArr; UsbSetTXsize
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Data_BulkOut
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Polling
</UL>

<P><STRONG><a name="[39e]"></a>USBDev_EP1_TX_ISR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbdev_isr.o(i.USBDev_EP1_TX_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBDev_EP1_TX_ISR &rArr; USBDev_Data_BulkIn &rArr; enum_realDisk
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Data_BulkIn
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Polling
</UL>

<P><STRONG><a name="[39c]"></a>USBDev_Ep0Handler</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, usbdev_control.o(i.USBDev_Ep0Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBDev_Ep0Handler &rArr; USBDev_GetDescriptor &rArr; write_ep0_buf &rArr; write_ep_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_GetStatus
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_GetDescriptor
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ep0_buf
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ep_buf
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_TestMode
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_EP0_SendStall
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_EP0_ISR
</UL>

<P><STRONG><a name="[396]"></a>USBDev_Inquiry</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, usbdev_control.o(i.USBDev_Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBDev_Inquiry &rArr; USBDev_Packet_BulkIn &rArr; UsbSetTXsize
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Packet_BulkIn
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Data_BulkOut
</UL>

<P><STRONG><a name="[398]"></a>USBDev_ModeSense</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbdev_control.o(i.USBDev_ModeSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBDev_ModeSense &rArr; USBDev_Packet_BulkIn &rArr; UsbSetTXsize
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Packet_BulkIn
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Data_BulkOut
</UL>

<P><STRONG><a name="[393]"></a>USBDev_Packet_BulkIn</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbdev_control.o(i.USBDev_Packet_BulkIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBDev_Packet_BulkIn &rArr; UsbSetTXsize
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbSetTXsize
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ep_buf
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTx
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_RequestSense
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_ReadCapacity
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_ModeSense
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Inquiry
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Data_BulkOut
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Data_BulkIn
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendorWriteData
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbRead10
</UL>

<P><STRONG><a name="[38d]"></a>USBDev_Polling</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, usbdev_control.o(i.USBDev_Polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBDev_Polling &rArr; USBDev_EP0_ISR &rArr; USBDev_Ep0Handler &rArr; USBDev_GetDescriptor &rArr; write_ep0_buf &rArr; write_ep_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_EP1_TX_ISR
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_EP1_RX_ISR
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_EP0_ISR
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_BusReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBC_IRQHandler
</UL>

<P><STRONG><a name="[397]"></a>USBDev_ReadCapacity</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbdev_control.o(i.USBDev_ReadCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBDev_ReadCapacity &rArr; USBDev_Packet_BulkIn &rArr; UsbSetTXsize
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Packet_BulkIn
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Data_BulkOut
</UL>

<P><STRONG><a name="[399]"></a>USBDev_RequestSense</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, usbdev_control.o(i.USBDev_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBDev_RequestSense &rArr; USBDev_Packet_BulkIn &rArr; UsbSetTXsize
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Packet_BulkIn
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Data_BulkOut
</UL>

<P><STRONG><a name="[3a0]"></a>USBDev_TestMode</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, usbdev_control.o(i.USBDev_TestMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBDev_TestMode &rArr; write_ep_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ep_buf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Ep0Handler
</UL>

<P><STRONG><a name="[38c]"></a>USB_MS_ISR</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, usbdev_isr.o(i.USB_MS_ISR))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBC_IRQHandler
</UL>

<P><STRONG><a name="[51]"></a>USI1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, apdu_drv.o(i.USI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USI1_IRQHandler &rArr; USIx_IRQHandler &rArr; PPSManager &rArr; Send_PTS_ACK
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USI2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, apdu_drv.o(i.USI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USI2_IRQHandler &rArr; USIx_IRQHandler &rArr; PPSManager &rArr; Send_PTS_ACK
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[3a7]"></a>USIx_IRQHandler</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, apdu_drv.o(i.USIx_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USIx_IRQHandler &rArr; PPSManager &rArr; Send_PTS_ACK
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPSManager
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USI2_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USI1_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>UsageFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, system_armcm4.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = UsageFault_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm4.o(RESET)
</UL>
<P><STRONG><a name="[3a4]"></a>UsbSetTXsize</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, usb_ms_control.o(i.UsbSetTXsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsbSetTXsize
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Packet_BulkIn
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbRead10
</UL>

<P><STRONG><a name="[1ef]"></a>W25QXX_Erase_Sector</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_storage.o(i.W25QXX_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = W25QXX_Erase_Sector &rArr; SSI_EFlash_Sector_Erase &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Write_Enable
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Sector_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Storage_EraseSector
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[1f2]"></a>W25QXX_Read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_storage.o(i.W25QXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = W25QXX_Read &rArr; SSI_EFlash_QUAD_Read &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_QUAD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Storage_ReadWrite
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_WithCheck
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[1f1]"></a>W25QXX_Write</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, drv_storage.o(i.W25QXX_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_WithCheck
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Storage_ReadWrite
</UL>

<P><STRONG><a name="[3ab]"></a>W25QXX_Write_Page</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_storage.o(i.W25QXX_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Write_Enable
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_QUAD_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_WithCheck
</UL>

<P><STRONG><a name="[3aa]"></a>W25QXX_Write_WithCheck</STRONG> (Thumb, 120 bytes, Stack size 280 bytes, drv_storage.o(i.W25QXX_Write_WithCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[200]"></a>WDT_FeedDog</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wdt_drv.o(i.WDT_FeedDog))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_WDTFeedDog
</UL>

<P><STRONG><a name="[380]"></a>WFI_SET</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.WFI_SET))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Standby
</UL>

<P><STRONG><a name="[382]"></a>_GET_IE_AWD</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tsi_drv.o(i._GET_IE_AWD))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_IRQHandler
</UL>

<P><STRONG><a name="[385]"></a>_GET_IE_SCANFINISH</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tsi_drv.o(i._GET_IE_SCANFINISH))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_IRQHandler
</UL>

<P><STRONG><a name="[424]"></a>_GET_IF_AWD</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tsi_drv.o(i._GET_IF_AWD))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_getIFAWD
</UL>

<P><STRONG><a name="[41d]"></a>_GET_IF_SCANFINISH</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tsi_drv.o(i._GET_IF_SCANFINISH))
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_waitScanFinished
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_clearScanFinishFlag
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_getIFScanFinish
</UL>

<P><STRONG><a name="[421]"></a>_SET_CHANNLENABLE</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tsi_drv.o(i._SET_CHANNLENABLE))
<BR><BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_configRegister
</UL>

<P><STRONG><a name="[422]"></a>_SET_DISABLETIME</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tsi_drv.o(i._SET_DISABLETIME))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_switchLowpower
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_switchInterrupt
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_configRegister
</UL>

<P><STRONG><a name="[423]"></a>_SET_SCANTIME</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tsi_drv.o(i._SET_SCANTIME))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_switchLowpower
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_switchInterrupt
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_configRegister
</UL>

<P><STRONG><a name="[d7]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[41a]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_algorithm_variance
</UL>

<P><STRONG><a name="[bc]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[a4]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, debug.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[e7]"></a>_ttywrch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, debug.o(i._ttywrch))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[3c3]"></a>aes_add_round_key</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, rijndael.o(i.aes_add_round_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aes_add_round_key
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
</UL>

<P><STRONG><a name="[3c1]"></a>aes_decrypt</STRONG> (Thumb, 190 bytes, Stack size 288 bytes, rijndael.o(i.aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = aes_decrypt &rArr; inv_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_add_round_key
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sub_bytes
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_shift_rows
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mix_columns
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_key_expansion
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_ecb
</UL>

<P><STRONG><a name="[293]"></a>aes_decrypt_cbc1</STRONG> (Thumb, 136 bytes, Stack size 80 bytes, apdu_algo_cmd.o(i.aes_decrypt_cbc1))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = aes_decrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aesop
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2_sym_op
</UL>

<P><STRONG><a name="[17f]"></a>aes_decrypt_ecb</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rijndael.o(i.aes_decrypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = aes_decrypt_ecb &rArr; aes_decrypt &rArr; inv_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESUnlockPwdSet
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESUnlockAlarmPwdSet
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESAddPhoneAccount
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_RecvDataAndAnalysis
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_RecvDataAndAnalysis
</UL>

<P><STRONG><a name="[3c7]"></a>aes_encrypt</STRONG> (Thumb, 192 bytes, Stack size 288 bytes, rijndael.o(i.aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_sub_bytes
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_shift_rows
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_mix_columns
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_add_round_key
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_key_expansion
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_ecb
</UL>

<P><STRONG><a name="[292]"></a>aes_encrypt_cbc1</STRONG> (Thumb, 110 bytes, Stack size 80 bytes, apdu_algo_cmd.o(i.aes_encrypt_cbc1))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aesop
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2_sym_op
</UL>

<P><STRONG><a name="[177]"></a>aes_encrypt_ecb</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rijndael.o(i.aes_encrypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SmartKeyMatch
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAESTmpeSecretKeyGet
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_CmdSend
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_PackDataAndSend
</UL>

<P><STRONG><a name="[3ca]"></a>aes_mix_columns</STRONG> (Thumb, 124 bytes, Stack size 44 bytes, rijndael.o(i.aes_mix_columns))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[3ce]"></a>aes_mul</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, rijndael.o(i.aes_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_xtimes
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_mix_columns
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mix_columns
</UL>

<P><STRONG><a name="[290]"></a>aes_reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, aes_drv.o(i.aes_reset))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2_sym_op
</UL>

<P><STRONG><a name="[3cb]"></a>aes_rot_dword</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rijndael.o(i.aes_rot_dword))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_key_expansion
</UL>

<P><STRONG><a name="[3c9]"></a>aes_shift_rows</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, rijndael.o(i.aes_shift_rows))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aes_shift_rows
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[3c8]"></a>aes_sub_bytes</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, rijndael.o(i.aes_sub_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aes_sub_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_sub_sbox
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[3cc]"></a>aes_sub_dword</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, rijndael.o(i.aes_sub_dword))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = aes_sub_dword
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_sub_sbox
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_key_expansion
</UL>

<P><STRONG><a name="[3d0]"></a>aes_sub_sbox</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rijndael.o(i.aes_sub_sbox))
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_sub_dword
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_sub_bytes
</UL>

<P><STRONG><a name="[3cd]"></a>aes_swap_dword</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rijndael.o(i.aes_swap_dword))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_key_expansion
</UL>

<P><STRONG><a name="[3d1]"></a>aes_xtime</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rijndael.o(i.aes_xtime))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_xtimes
</UL>

<P><STRONG><a name="[3cf]"></a>aes_xtimes</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, rijndael.o(i.aes_xtimes))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_xtime
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_mul
</UL>

<P><STRONG><a name="[3d2]"></a>ali_rand_gen</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, api_rand.o(i.ali_rand_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ali_rand_gen &rArr; ls_hal_get_random &rArr; ls_osa_print &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_get_random
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_gen
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_plat_get_random
</UL>

<P><STRONG><a name="[3d4]"></a>ali_seed</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, api_rand.o(i.ali_seed))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ali_seed &rArr; ls_osa_print &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_plat_get_random
</UL>

<P><STRONG><a name="[3d5]"></a>ali_sha256_final</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, api_hash.o(i.ali_sha256_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ali_sha256_final &rArr; ls_hal_sha256_finish &rArr; impl_sha256_finish &rArr; impl_sha256_update &rArr; impl_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_finish
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_trans_errno
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_plat_hash_sum
</UL>

<P><STRONG><a name="[3d8]"></a>ali_sha256_get_ctx_size</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, api_hash.o(i.ali_sha256_get_ctx_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ali_sha256_get_ctx_size &rArr; ls_osa_print &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_get_size
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_plat_hash_sum
</UL>

<P><STRONG><a name="[3da]"></a>ali_sha256_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, api_hash.o(i.ali_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ali_sha256_init &rArr; ls_hal_sha256_init &rArr; ls_osa_print &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_get_size
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_trans_errno
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_plat_hash_sum
</UL>

<P><STRONG><a name="[3dc]"></a>ali_sha256_update</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, api_hash.o(i.ali_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = ali_sha256_update &rArr; ls_hal_sha256_update &rArr; impl_sha256_update &rArr; impl_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_update
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_trans_errno
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_plat_hash_sum
</UL>

<P><STRONG><a name="[3de]"></a>apdu_get_ID</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, apdu_basic_cmd.o(i.apdu_get_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apdu_get_ID
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_transmit
</UL>

<P><STRONG><a name="[3df]"></a>apdu_hash</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, apdu_algo_cmd.o(i.apdu_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = apdu_hash &rArr; ID2_hash_op &rArr; SHA_Update_Algo &rArr; sha_read_mid_data &rArr; sha_read_mid_result
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2_hash_op
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_transmit
</UL>

<P><STRONG><a name="[3e0]"></a>apdu_sym_op</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, apdu_algo_cmd.o(i.apdu_sym_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2_sym_op
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_transmit
</UL>

<P><STRONG><a name="[38a]"></a>app_tsi_handle</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tsi_app.o(i.app_tsi_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = app_tsi_handle &rArr; hal_tsi_adjustRegister &rArr; hal_tsi_switchFineMode &rArr; hal_tsi_waitScanFinished
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_adjustRegister
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_updateTouch
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_updateBase
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_preprocess
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_GetKeyValue
</UL>

<P><STRONG><a name="[1c1]"></a>app_tsi_init</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, tsi_app.o(i.app_tsi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = app_tsi_init &rArr; hal_tsi_loadCbaseCoarse
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_switchInterrupt
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_switchFineMode
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_reset
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_rememberConfiguration
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_loadCbaseCoarse
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_configRegister
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_configInitStruct
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_checkFine
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_KeySacn_Init
</UL>

<P><STRONG><a name="[3e4]"></a>app_tsi_preprocess</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, tsi_app.o(i.app_tsi_preprocess))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = app_tsi_preprocess &rArr; hal_algorithm_filter_NormalDistribution &rArr; MergeSort &rArr;  MergeSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_getChannleValid
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_algorithm_variance
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_algorithm_filter_NormalDistribution
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_algorithm_average
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_algorithm_algMeanRoll
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_handle
</UL>

<P><STRONG><a name="[3f5]"></a>app_tsi_saveData</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, tsi_app.o(i.app_tsi_saveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_tsi_saveData
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_sleep
</UL>

<P><STRONG><a name="[1bc]"></a>app_tsi_sleep</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tsi_app.o(i.app_tsi_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = app_tsi_sleep &rArr; hal_tsi_switchLowpower &rArr; hal_tsi_loadDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_switchLowpower
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_saveData
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_KeySacn_EnterSleepConfig
</UL>

<P><STRONG><a name="[3e6]"></a>app_tsi_updateBase</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, tsi_app.o(i.app_tsi_updateBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_tsi_updateBase
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_getChannleValid
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_handle
</UL>

<P><STRONG><a name="[3e5]"></a>app_tsi_updateTouch</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, tsi_app.o(i.app_tsi_updateTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_tsi_updateTouch
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_getChannleValid
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_handle
</UL>

<P><STRONG><a name="[384]"></a>app_tsi_wakeup_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tsi_app.o(i.app_tsi_wakeup_callback))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_IRQHandler
</UL>

<P><STRONG><a name="[210]"></a>assert_failed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, debug.o(i.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_PullupConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ITConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ReadGpioData
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteGpioData
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ConfigGpio
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ITTypeConfig
</UL>

<P><STRONG><a name="[406]"></a>check_target_cache_attr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cache.o(i.check_target_cache_attr))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_page_erase_withkey
</UL>

<P><STRONG><a name="[3e2]"></a>chip_log_hex_dump</STRONG> (Thumb, 164 bytes, Stack size 104 bytes, chip_log.o(i.chip_log_hex_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = chip_log_hex_dump &rArr; ls_osa_print &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_snprintf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_transmit_wrap
</UL>

<P><STRONG><a name="[3f7]"></a>cm_backtrace_call_stack</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, cm_backtrace.o(i.cm_backtrace_call_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cm_backtrace_call_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disassembly_ins_is_bl_blx
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[a5]"></a>cm_backtrace_fault</STRONG> (Thumb, 414 bytes, Stack size 80 bytes, cm_backtrace.o(i.cm_backtrace_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = cm_backtrace_fault &rArr; print_call_stack &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statck_del_fpu_regs
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_diagnosis
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[3f9]"></a>cm_backtrace_firmware_info</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cm_backtrace.o(i.cm_backtrace_firmware_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = cm_backtrace_firmware_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[120]"></a>cm_backtrace_init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cm_backtrace.o(i.cm_backtrace_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = cm_backtrace_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[28e]"></a>decrypt_ID2_Key</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, apdu_algo_cmd.o(i.decrypt_ID2_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = decrypt_ID2_Key
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2_sym_op
</UL>

<P><STRONG><a name="[1c9]"></a>delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, delay.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_Out
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_EFlash_Program
</UL>

<P><STRONG><a name="[28f]"></a>des_op</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, des_drv.o(i.des_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = des_op &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMAC_2ALG
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deskey
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2_sym_op
</UL>

<P><STRONG><a name="[3fe]"></a>deskey</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, des_drv.o(i.deskey))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = deskey
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_op
</UL>

<P><STRONG><a name="[16a]"></a>drv_SubC0_ConfigGpio</STRONG> (Thumb, 202 bytes, Stack size 12 bytes, c0_drv.o(i.drv_SubC0_ConfigGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = drv_SubC0_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_EnterSleepConfig
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_ReservedWakeupConfig
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_ReservedSleepConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_WifiPowClose
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_CateyeFaceSw
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_IRSleepConfig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_COMM_EnterSleepConfig
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_UartColse
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_IOInit
</UL>

<P><STRONG><a name="[16d]"></a>drv_SubC0_ITConfig</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, c0_drv.o(i.drv_SubC0_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_SubC0_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_EnterSleepConfig
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_IRSleepConfig
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_COMM_EnterSleepConfig
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_IOInit
</UL>

<P><STRONG><a name="[16c]"></a>drv_SubC0_ITTypeConfig</STRONG> (Thumb, 372 bytes, Stack size 8 bytes, c0_drv.o(i.drv_SubC0_ITTypeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_SubC0_ITTypeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_EnterSleepConfig
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_IRSleepConfig
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_COMM_EnterSleepConfig
</UL>

<P><STRONG><a name="[163]"></a>drv_SubC0_ReadGpioData</STRONG> (Thumb, 190 bytes, Stack size 12 bytes, c0_drv.o(i.drv_SubC0_ReadGpioData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = drv_SubC0_ReadGpioData
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_HavePress
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_GenImg
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BuFang_Time_Detet
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_ReadIRQ
</UL>

<P><STRONG><a name="[19a]"></a>drv_SubC0_WriteGpioData</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, c0_drv.o(i.drv_SubC0_WriteGpioData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = drv_SubC0_WriteGpioData
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_ReservedWakeupConfig
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_ReservedSleepConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_WifiPowClose
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_EnterSleepConfig
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Face_CateyeFaceSw
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_UartColse
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_Init
</UL>

<P><STRONG><a name="[156]"></a>drv_SubC0_callback</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, c0_drv.o(i.drv_SubC0_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = drv_SubC0_callback &rArr; SubC0_gint5_callback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubC0_gint5_callback
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubC0_gint4_callback
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubC0_gint1_callback
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubC0_gint0_callback
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_waitReady
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_sendM2S
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[3ff]"></a>drv_SubC0_sendM2S</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, c0_drv.o(i.drv_SubC0_sendM2S))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_callback
</UL>

<P><STRONG><a name="[1da]"></a>drv_SubC0_sleep</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, c0_drv.o(i.drv_SubC0_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_EnterSleep
</UL>

<P><STRONG><a name="[400]"></a>drv_SubC0_waitReady</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, c0_drv.o(i.drv_SubC0_waitReady))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_SubC0_callback
</UL>

<P><STRONG><a name="[16b]"></a>drv_Subc0_configIOPull</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, c0_drv.o(i.drv_Subc0_configIOPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv_Subc0_configIOPull
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_EnterSleepConfig
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_IRSleepConfig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_COMM_EnterSleepConfig
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IR_IOInit
</UL>

<P><STRONG><a name="[66]"></a>eflash_bulk_program_withkey</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, eflash_api.o(i.eflash_bulk_program_withkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eflash_bulk_program_withkey
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_drv_clr_smw_err_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bin_lib_table.o(.constdata)
</UL>
<P><STRONG><a name="[402]"></a>eflash_drv_clr_smw_err_flag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, eflash_drv.o(i.eflash_drv_clr_smw_err_flag))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_program_withkey
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_page_erase_withkey
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_bulk_program_withkey
</UL>

<P><STRONG><a name="[404]"></a>eflash_drv_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, eflash_drv.o(i.eflash_drv_init))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_init
</UL>

<P><STRONG><a name="[405]"></a>eflash_drv_set_verify_cnt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, eflash_drv.o(i.eflash_drv_set_verify_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_set_verify_cnt
</UL>

<P><STRONG><a name="[403]"></a>eflash_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, eflash_api.o(i.eflash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eflash_init
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_drv_set_verify_cnt
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_drv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashInit
</UL>

<P><STRONG><a name="[67]"></a>eflash_page_erase_withkey</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, eflash_api.o(i.eflash_page_erase_withkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eflash_page_erase_withkey
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_page_DCache
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_target_cache_attr
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_drv_clr_smw_err_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bin_lib_table.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>eflash_program_withkey</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, eflash_api.o(i.eflash_program_withkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eflash_program_withkey
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_drv_clr_smw_err_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bin_lib_table.o(.constdata)
</UL>
<P><STRONG><a name="[20d]"></a>eflash_set_verify_cnt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, eflash_api.o(i.eflash_set_verify_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eflash_set_verify_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_drv_set_verify_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Init
</UL>

<P><STRONG><a name="[1ae]"></a>flashInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, flash.o(i.flashInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flashInit &rArr; SPI_Flash_Init &rArr; SSI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_init
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_HardWareInit
</UL>

<P><STRONG><a name="[408]"></a>fn_GetInputInfo</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, menu_getinputinfo.o(i.fn_GetInputInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = fn_GetInputInfo &rArr; GetInputInfoMenuModPwdInputAgainFun &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuModPwdInputAgainFun
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuModPwdFun
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuFactoryFun
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuDesktopFun
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuNum
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuEnter
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuReturn
</UL>

<P><STRONG><a name="[fc]"></a>fn_JumpMenu</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, menu.o(i.fn_JumpMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyBackLightUpdate
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenExitMenu_VosGui
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenExitMenuOperation
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenu_VosGui
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuNum
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDeal_CloseLock
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDealService
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CycleScan
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_Service
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SysWakeUpToMenu
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetBackBat
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_WifiConnect
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyOk
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyFail
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_DelGeneralFace
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleShangTangCatEyeSingleDouble
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleR8CatEyeOTA
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleModifFaceSafetyLevel
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleFaceVersionGet
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleFaceDelId
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleConfigWifiData
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleCatEyeSN
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAliyunSecretKeySetParm
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAddFaceUserFail
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_BleAddFaceIng
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Bell
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AdminChkVerifyOk
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AdminChk
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AddFaceIng
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CatEyeConn
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgKeyStatusMenuEnter
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerStepOK
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_VerifyOk
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_Desktop
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_DelFinger
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleDelFinger
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerStep
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerFaill
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_BleAddFingerConfirmFail
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_AdminChk
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_AddFingerStepOK
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_AddFingerStep
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuModPwdInputAgainFun
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuModPwdFun
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuFactoryFun
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesktopKeyEnter
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenExitMenuOperation
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenuOperation
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_TimeOutMenuReturn
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuSwitchToParentIndex
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuSwitchToFrontIndex
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleWifiSetParm1
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleVerifyPhoneEncrypt
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleUnlockSmartKeyVerify
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleShangTangCatEyeSingleDouble
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleR8CatEyeOTA
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleNewConfirmFingerRegSucced
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleNewAddFinger
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleModifFaceSafetyLevel
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleInfraredMonitoringDistanceSet
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceVersionGet
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceRegConfirm
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceReg
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleFaceDelId
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleEquipmentReg
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleEmptyUser
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDisconnectBluetooth
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleDelFinger
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleCatEyeSN
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleAliyunSecretKeySetParm
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommOpenAndInfoUpload
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgMotorLock
</UL>

<P><STRONG><a name="[40b]"></a>fn_WhenEnterMenuOperation</STRONG> (Thumb, 4282 bytes, Stack size 16 bytes, menu_whenentermenuoperation.o(i.fn_WhenEnterMenuOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLight_sysStatusSet
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_LowPowerChk
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_EnterDesktopVerifyStart
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_SendDealStart
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_EncryptionParam
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_GetchannelPwd
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_DelGeneralFaceStart
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ClearError
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AddError
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteLockLog
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteHardwareData
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SearchEmpty
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SaveOneUserReg
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ReadLockLog
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ClearUserData
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ClearSysData
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_RegStart
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_EmptyStart
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_VerifyUserStart
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_DelOneUserStop
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_DelAllUserStop
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_DelAllUserStart
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdDealStart
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_AddUserStop
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_AddUserStart
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_AesKeySet
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_BuFang_Time_Sleep
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_DelStart
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_VerifyUserStop
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
</UL>

<P><STRONG><a name="[40c]"></a>fn_WhenEnterMenu_VosGui</STRONG> (Thumb, 2338 bytes, Stack size 16 bytes, menu_voice.o(i.fn_WhenEnterMenu_VosGui))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = fn_WhenEnterMenu_VosGui &rArr; Menu_VoicePlay &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_VoicePlay
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
</UL>

<P><STRONG><a name="[409]"></a>fn_WhenExitMenuOperation</STRONG> (Thumb, 444 bytes, Stack size 8 bytes, menu_whenexitmenuoperation.o(i.fn_WhenExitMenuOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = fn_WhenExitMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_EnterDesktopVerifyStart
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ChkError
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CommMsgKeyStatusMenuEnter
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_VerifyUserStart
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ClearInputInfo
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
</UL>

<P><STRONG><a name="[40a]"></a>fn_WhenExitMenu_VosGui</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, menu_voice.o(i.fn_WhenExitMenu_VosGui))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = fn_WhenExitMenu_VosGui &rArr; Menu_ChkError &rArr; HAL_RTC_GetTick &rArr; HAL_RTC_TimeGetStm &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ChkError
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_VoicePlay
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
</UL>

<P><STRONG><a name="[59]"></a>fputc</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, debug.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[417]"></a>fsmCRC</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsm.o(i.fsmCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fsmCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frameSetPack
</UL>

<P><STRONG><a name="[6a]"></a>fsmSendFrame</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fsm.o(i.fsmSendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fsmSendFrame &rArr; frameSetPack &rArr; fsmCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendBuff
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frameSetPack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bin_lib_table.o(.constdata)
</UL>
<P><STRONG><a name="[3f2]"></a>hal_algorithm_algMeanRoll</STRONG> (Thumb, 56 bytes, Stack size 28 bytes, algorithm_hal.o(i.hal_algorithm_algMeanRoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_algorithm_algMeanRoll &rArr; hal_algorithm_average
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_algorithm_average
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_preprocess
</UL>

<P><STRONG><a name="[3f4]"></a>hal_algorithm_average</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, algorithm_hal.o(i.hal_algorithm_average))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_algorithm_average
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_algorithm_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_algorithm_variance
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_algorithm_algMeanRoll
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_preprocess
</UL>

<P><STRONG><a name="[3f1]"></a>hal_algorithm_filter_NormalDistribution</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, algorithm_hal.o(i.hal_algorithm_filter_NormalDistribution))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = hal_algorithm_filter_NormalDistribution &rArr; MergeSort &rArr;  MergeSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MergeSort
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_preprocess
</UL>

<P><STRONG><a name="[418]"></a>hal_algorithm_sum</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, algorithm_hal.o(i.hal_algorithm_sum))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_algorithm_average
</UL>

<P><STRONG><a name="[3f3]"></a>hal_algorithm_variance</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, algorithm_hal.o(i.hal_algorithm_variance))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hal_algorithm_variance &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_algorithm_average
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_preprocess
</UL>

<P><STRONG><a name="[3e7]"></a>hal_tsi_adjustRegister</STRONG> (Thumb, 366 bytes, Stack size 232 bytes, tsi_hal.o(i.hal_tsi_adjustRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = hal_tsi_adjustRegister &rArr; hal_tsi_switchFineMode &rArr; hal_tsi_waitScanFinished
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_switchFineMode
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_reset
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_getChannleValid
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_handle
</UL>

<P><STRONG><a name="[3ee]"></a>hal_tsi_checkFine</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, tsi_hal.o(i.hal_tsi_checkFine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_tsi_checkFine
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_getChannleValid
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_init
</UL>

<P><STRONG><a name="[426]"></a>hal_tsi_clearIFAWD</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tsi_hal.o(i.hal_tsi_clearIFAWD))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_switchLowpower
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_switchInterrupt
</UL>

<P><STRONG><a name="[387]"></a>hal_tsi_clearIFScanFinish</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tsi_hal.o(i.hal_tsi_clearIFScanFinish))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_switchLowpower
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_switchInterrupt
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_IRQHandler
</UL>

<P><STRONG><a name="[41c]"></a>hal_tsi_clearScanFinishFlag</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tsi_hal.o(i.hal_tsi_clearScanFinishFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_tsi_clearScanFinishFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GET_IF_SCANFINISH
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_switchFineMode
</UL>

<P><STRONG><a name="[41f]"></a>hal_tsi_closeIEAWD</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tsi_hal.o(i.hal_tsi_closeIEAWD))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_switchLowpower
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_switchInterrupt
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_configRegister
</UL>

<P><STRONG><a name="[420]"></a>hal_tsi_closeIEScan</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tsi_hal.o(i.hal_tsi_closeIEScan))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_switchLowpower
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_switchInterrupt
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_configRegister
</UL>

<P><STRONG><a name="[41e]"></a>hal_tsi_configBackupStruct</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, tsi_hal.o(i.hal_tsi_configBackupStruct))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_configInitStruct
</UL>

<P><STRONG><a name="[3e8]"></a>hal_tsi_configInitStruct</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tsi_hal.o(i.hal_tsi_configInitStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_tsi_configInitStruct
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_configBackupStruct
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_init
</UL>

<P><STRONG><a name="[3eb]"></a>hal_tsi_configRegister</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, tsi_hal.o(i.hal_tsi_configRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_tsi_configRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SET_SCANTIME
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SET_DISABLETIME
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SET_CHANNLENABLE
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_closeIEScan
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_closeIEAWD
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_init
</UL>

<P><STRONG><a name="[3f0]"></a>hal_tsi_getChannleValid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tsi_hal.o(i.hal_tsi_getChannleValid))
<BR><BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_transferFineData
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_loadCbaseCoarse
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_checkFine
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_adjustRegister
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_updateTouch
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_updateBase
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_preprocess
</UL>

<P><STRONG><a name="[383]"></a>hal_tsi_getIFAWD</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tsi_hal.o(i.hal_tsi_getIFAWD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_tsi_getIFAWD
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GET_IF_AWD
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_IRQHandler
</UL>

<P><STRONG><a name="[386]"></a>hal_tsi_getIFScanFinish</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tsi_hal.o(i.hal_tsi_getIFScanFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_tsi_getIFScanFinish
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GET_IF_SCANFINISH
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_IRQHandler
</UL>

<P><STRONG><a name="[3ec]"></a>hal_tsi_loadCbaseCoarse</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, tsi_hal.o(i.hal_tsi_loadCbaseCoarse))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_tsi_loadCbaseCoarse
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_getChannleValid
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_init
</UL>

<P><STRONG><a name="[427]"></a>hal_tsi_loadDelta</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, tsi_hal.o(i.hal_tsi_loadDelta))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_tsi_loadDelta
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_switchLowpower
</UL>

<P><STRONG><a name="[3e9]"></a>hal_tsi_rememberConfiguration</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tsi_hal.o(i.hal_tsi_rememberConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_tsi_rememberConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_init
</UL>

<P><STRONG><a name="[3ea]"></a>hal_tsi_reset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tsi_hal.o(i.hal_tsi_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_init
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_adjustRegister
</UL>

<P><STRONG><a name="[3ed]"></a>hal_tsi_switchFineMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tsi_hal.o(i.hal_tsi_switchFineMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_tsi_switchFineMode &rArr; hal_tsi_waitScanFinished
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_waitScanFinished
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_clearScanFinishFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_init
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_adjustRegister
</UL>

<P><STRONG><a name="[3ef]"></a>hal_tsi_switchInterrupt</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, tsi_hal.o(i.hal_tsi_switchInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_tsi_switchInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SET_SCANTIME
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SET_DISABLETIME
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_closeIEScan
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_closeIEAWD
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_clearIFAWD
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_clearIFScanFinish
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_init
</UL>

<P><STRONG><a name="[3f6]"></a>hal_tsi_switchLowpower</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, tsi_hal.o(i.hal_tsi_switchLowpower))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hal_tsi_switchLowpower &rArr; hal_tsi_loadDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SET_SCANTIME
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SET_DISABLETIME
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_loadDelta
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_closeIEScan
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_closeIEAWD
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_clearIFAWD
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_clearIFScanFinish
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_sleep
</UL>

<P><STRONG><a name="[428]"></a>hal_tsi_transferFineData</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, tsi_hal.o(i.hal_tsi_transferFineData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_tsi_transferFineData
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_getChannleValid
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsi_callback
</UL>

<P><STRONG><a name="[425]"></a>hal_tsi_waitScanFinished</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tsi_hal.o(i.hal_tsi_waitScanFinished))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_tsi_waitScanFinished
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GET_IF_SCANFINISH
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_switchFineMode
</UL>

<P><STRONG><a name="[42b]"></a>hex_to_string</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, id2_util.o(i.hex_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hex_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_id
</UL>

<P><STRONG><a name="[304]"></a>id2_client_decrypt</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, id2_client.o(i.id2_client_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1220 + Unknown Stack Size
<LI>Call Chain = id2_client_decrypt &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_malloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_free
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_id2_client_inited
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sym_cipher
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerTokenVerify
</UL>

<P><STRONG><a name="[302]"></a>id2_client_get_challenge_auth_code</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, id2_client.o(i.id2_client_get_challenge_auth_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 1516 + Unknown Stack Size
<LI>Call Chain = id2_client_get_challenge_auth_code &rArr; _id2_gen_auth_code &rArr; _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_id2_client_inited
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerIssueChallenge
</UL>

<P><STRONG><a name="[307]"></a>id2_client_get_id</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, id2_client.o(i.id2_client_get_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052 + Unknown Stack Size
<LI>Call Chain = id2_client_get_id &rArr; km_get_id2 &rArr; irot_hal_get_id2 &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;km_get_id2
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_string
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_id2_client_inited
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerTokenVerify
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
</UL>

<P><STRONG><a name="[11e]"></a>id2_client_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, id2_client.o(i.id2_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = id2_client_init &rArr; km_init &rArr; irot_hal_init &rArr; open_session &rArr; ls_osa_print &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;km_init
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dump_id2_conf_info
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[3ba]"></a>id2_log_hex_dump</STRONG> (Thumb, 190 bytes, Stack size 112 bytes, id2_util.o(i.id2_log_hex_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = id2_log_hex_dump &rArr; ls_osa_print &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_snprintf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sym_cipher
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sign
</UL>

<P><STRONG><a name="[3b6]"></a>id2_plat_base64_encode</STRONG> (Thumb, 248 bytes, Stack size 36 bytes, id2_plat.o(i.id2_plat_base64_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = id2_plat_base64_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
</UL>

<P><STRONG><a name="[3b2]"></a>id2_plat_get_random</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, id2_plat.o(i.id2_plat_get_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = id2_plat_get_random &rArr; ali_rand_gen &rArr; ls_hal_get_random &rArr; ls_osa_print &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_seed
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rand_gen
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_get_time_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
</UL>

<P><STRONG><a name="[3b9]"></a>id2_plat_hash_sum</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, id2_plat.o(i.id2_plat_hash_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = id2_plat_hash_sum &rArr; ali_sha256_final &rArr; ls_hal_sha256_finish &rArr; impl_sha256_finish &rArr; impl_sha256_update &rArr; impl_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_update
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_init
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_get_ctx_size
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_final
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_malloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_hash
</UL>

<P><STRONG><a name="[306]"></a>impl_sha256</STRONG> (Thumb, 54 bytes, Stack size 128 bytes, sha256.o(i.impl_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = impl_sha256 &rArr; impl_sha256_finish &rArr; impl_sha256_update &rArr; impl_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_free
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_update
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_starts
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_init
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerTokenVerify
</UL>

<P><STRONG><a name="[431]"></a>impl_sha256_finish</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, sha256.o(i.impl_sha256_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = impl_sha256_finish &rArr; impl_sha256_update &rArr; impl_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_update
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_finish
</UL>

<P><STRONG><a name="[432]"></a>impl_sha256_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sha256.o(i.impl_sha256_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = impl_sha256_free &rArr; zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256
</UL>

<P><STRONG><a name="[42e]"></a>impl_sha256_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sha256.o(i.impl_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = impl_sha256_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_init
</UL>

<P><STRONG><a name="[434]"></a>impl_sha256_process</STRONG> (Thumb, 3532 bytes, Stack size 312 bytes, sha256.o(i.impl_sha256_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = impl_sha256_process
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_update
</UL>

<P><STRONG><a name="[42f]"></a>impl_sha256_starts</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, sha256.o(i.impl_sha256_starts))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_init
</UL>

<P><STRONG><a name="[430]"></a>impl_sha256_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sha256.o(i.impl_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = impl_sha256_update &rArr; impl_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_update
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_finish
</UL>

<P><STRONG><a name="[291]"></a>input_AesKey</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, aes_drv.o(i.input_AesKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = input_AesKey
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID2_sym_op
</UL>

<P><STRONG><a name="[435]"></a>inv_sub_sbox</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rijndael.o(i.inv_sub_sbox))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sub_bytes
</UL>

<P><STRONG><a name="[407]"></a>invalid_page_DCache</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cache.o(i.invalid_page_DCache))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eflash_page_erase_withkey
</UL>

<P><STRONG><a name="[436]"></a>irot_hal_get_id2</STRONG> (Thumb, 170 bytes, Stack size 552 bytes, std_se_adapter.o(i.irot_hal_get_id2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012 + Unknown Stack Size
<LI>Call Chain = irot_hal_get_id2 &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_application
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_session
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_transmit_wrap
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;km_get_id2
</UL>

<P><STRONG><a name="[439]"></a>irot_hal_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, std_se_adapter.o(i.irot_hal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = irot_hal_init &rArr; open_session &rArr; ls_osa_print &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_application
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_session
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;km_init
</UL>

<P><STRONG><a name="[43a]"></a>irot_hal_sym_crypto</STRONG> (Thumb, 296 bytes, Stack size 576 bytes, std_se_adapter.o(i.irot_hal_sym_crypto))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + Unknown Stack Size
<LI>Call Chain = irot_hal_sym_crypto &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_application
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_transmit_wrap
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;km_cipher
</UL>

<P><STRONG><a name="[429]"></a>is_id2_client_inited</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, id2_client.o(i.is_id2_client_inited))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_id
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_challenge_auth_code
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_decrypt
</UL>

<P><STRONG><a name="[3bc]"></a>km_cipher</STRONG> (Thumb, 188 bytes, Stack size 80 bytes, km_to_irot.o(i.km_cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 1116 + Unknown Stack Size
<LI>Call Chain = km_cipher &rArr; irot_hal_sym_crypto &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_sym_crypto
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_km_key_name
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sym_cipher
</UL>

<P><STRONG><a name="[42a]"></a>km_get_id2</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, km_to_irot.o(i.km_get_id2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028 + Unknown Stack Size
<LI>Call Chain = km_get_id2 &rArr; irot_hal_get_id2 &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_get_id2
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_id
</UL>

<P><STRONG><a name="[42c]"></a>km_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, km_to_irot.o(i.km_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = km_init &rArr; irot_hal_init &rArr; open_session &rArr; ls_osa_print &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_init
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dump_chip_conf_info
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_init
</UL>

<P><STRONG><a name="[3d3]"></a>ls_hal_get_random</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ls_hal_rand.o(i.ls_hal_get_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ls_hal_get_random &rArr; ls_osa_print &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rand_gen
</UL>

<P><STRONG><a name="[3d6]"></a>ls_hal_sha256_finish</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ls_hal_hash.o(i.ls_hal_sha256_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ls_hal_sha256_finish &rArr; impl_sha256_finish &rArr; impl_sha256_update &rArr; impl_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_final
</UL>

<P><STRONG><a name="[3d9]"></a>ls_hal_sha256_get_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ls_hal_hash.o(i.ls_hal_sha256_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_init
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_get_ctx_size
</UL>

<P><STRONG><a name="[3db]"></a>ls_hal_sha256_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ls_hal_hash.o(i.ls_hal_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ls_hal_sha256_init &rArr; ls_osa_print &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_starts
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_init
</UL>

<P><STRONG><a name="[3dd]"></a>ls_hal_sha256_update</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ls_hal_hash.o(i.ls_hal_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ls_hal_sha256_update &rArr; impl_sha256_update &rArr; impl_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_update
</UL>

<P><STRONG><a name="[3b7]"></a>ls_osa_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_osa.o(i.ls_osa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ls_osa_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_decrypt
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_plat_hash_sum
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
</UL>

<P><STRONG><a name="[42d]"></a>ls_osa_get_time_ms</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ls_osa.o(i.ls_osa_get_time_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ls_osa_get_time_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_plat_get_random
</UL>

<P><STRONG><a name="[3b4]"></a>ls_osa_malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_osa.o(i.ls_osa_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ls_osa_malloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_decrypt
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_plat_hash_sum
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
</UL>

<P><STRONG><a name="[3ae]"></a>ls_osa_print</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ls_osa.o(i.ls_osa_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ls_osa_print &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_init
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_id
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_challenge_auth_code
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_decrypt
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_get_random
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_seed
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rand_gen
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_update
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_finish
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_update
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_init
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_get_ctx_size
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_final
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dump_chip_conf_info
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;km_cipher
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_plat_hash_sum
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_log_hex_dump
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sym_cipher
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sign
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dump_id2_conf_info
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_log_hex_dump
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_session
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_transmit_wrap
</UL>

<P><STRONG><a name="[3b3]"></a>ls_osa_snprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, ls_osa.o(i.ls_osa_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ls_osa_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_log_hex_dump
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_log_hex_dump
</UL>

<P><STRONG><a name="[9f]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2084 + Unknown Stack Size
<LI>Call Chain = main &rArr; AppUser_Init &rArr; APP_Power_Init &rArr; APP_GetBackBat &rArr; Menu_Comm_Service &rArr; Menu_Comm_BleRecvDeal &rArr; Menu_Comm_BleServerIssueChallenge &rArr; id2_client_get_challenge_auth_code &rArr; _id2_gen_auth_code &rArr; _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUser_Service
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUser_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[303]"></a>my_base64_decode</STRONG> (Thumb, 224 bytes, Stack size 528 bytes, base64.o(i.my_base64_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = my_base64_decode &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerTokenVerify
</UL>

<P><STRONG><a name="[305]"></a>my_int2char</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, id2_client.o(i.my_int2char))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Comm_BleServerTokenVerify
</UL>

<P><STRONG><a name="[395]"></a>read_ep_buf</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, usbdev_control.o(i.read_ep_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = read_ep_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRx
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Data_BulkOut
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VendorWriteData
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Ep0Handler
</UL>

<P><STRONG><a name="[43b]"></a>se_open_session</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, se_driver.o(i.se_open_session))
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_session
</UL>

<P><STRONG><a name="[3e3]"></a>se_transmit</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, apdu_dispatcher.o(i.se_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 420 + Unknown Stack Size
<LI>Call Chain = se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_sym_op
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_hash
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_get_ID
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_transmit_wrap
</UL>

<P><STRONG><a name="[1af]"></a>sensorSpiInit</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, sensorspi.o(i.sensorSpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sensorSpiInit &rArr; SPI_PinIOConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WritePin
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBaudrate
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ResetTXFIFO
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ResetRXFIFO
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PinIOConfig
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FrameConfig
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Disable
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ControlConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_HardWareInit
</UL>

<P><STRONG><a name="[64]"></a>sensorSpiWriteRead</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, sensorspi.o(i.sensorSpiWriteRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sensorSpiWriteRead &rArr; EDMAC_ControlConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMAC_IsDone
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMAC_Enable
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMAC_Disable
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMAC_ControlConfig
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bin_lib_table.o(.constdata)
</UL>
<P><STRONG><a name="[205]"></a>set_edmac_new</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, edma_drv.o(i.set_edmac_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_edmac_new
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMAC_2ALG
</UL>

<P><STRONG><a name="[360]"></a>sha_read_mid_data</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sha_drv.o(i.sha_read_mid_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sha_read_mid_data &rArr; sha_read_mid_result
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha_read_mid_result
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha_read_mid_length
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA_Update_Algo
</UL>

<P><STRONG><a name="[35f]"></a>sha_read_result</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sha_drv.o(i.sha_read_result))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha_read_mid_result
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA_Final_Algo
</UL>

<P><STRONG><a name="[35e]"></a>sha_resume</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, sha_drv.o(i.sha_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA_Update_Algo
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA_Final_Algo
</UL>

<P><STRONG><a name="[63]"></a>systemTickMs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer_1.o(i.systemTickMs))
<BR>[Address Reference Count : 1]<UL><LI> bin_lib_table.o(.constdata)
</UL>
<P><STRONG><a name="[1ad]"></a>timerInit</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, timer_1.o(i.timerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timerInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_WritePMR
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_EnableInterrupt
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Enable
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_DisableInterrupt
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ControlConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Finger_HardWareInit
</UL>

<P><STRONG><a name="[388]"></a>tsi_callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tsi_app.o(i.tsi_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tsi_callback &rArr; hal_tsi_transferFineData
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tsi_transferFineData
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSI_IRQHandler
</UL>

<P><STRONG><a name="[62]"></a>uartSendBuff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(i.uartSendBuff))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsmSendFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bin_lib_table.o(.constdata)
</UL>
<P><STRONG><a name="[3a2]"></a>write_ep0_buf</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbdev_control.o(i.write_ep0_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_ep0_buf &rArr; write_ep_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ep_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_GetStatus
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_GetDescriptor
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Ep0Handler
</UL>

<P><STRONG><a name="[3a5]"></a>write_ep_buf</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbdev_control.o(i.write_ep_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_ep_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Packet_BulkIn
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ep0_buf
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_TestMode
</UL>

<P><STRONG><a name="[55]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[41b]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f_clz.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_algorithm_variance
</UL>

<P><STRONG><a name="[452]"></a>_d2f</STRONG> (Thumb, 700 bytes, Stack size 32 bytes, d2f_clz.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__funder
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[45d]"></a>__dflt_normalise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltn), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[455]"></a>__fpl_dnaninf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder_d
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[49e]"></a>__fpl_drenorm2</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, drenorm_clz.o(x$fpl$drenorm), UNUSED)

<P><STRONG><a name="[45a]"></a>__fpl_drenorm1</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, drenorm_clz.o(x$fpl$drenorm), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder_d
</UL>

<P><STRONG><a name="[45f]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[459]"></a>__dunder</STRONG> (Thumb, 314 bytes, Stack size 4 bytes, dunder_clz.o(x$fpl$dunder), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL>

<P><STRONG><a name="[458]"></a>__dunder_d</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, dunder_clz.o(x$fpl$dunder), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_drenorm1
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[453]"></a>__fpl_exception</STRONG> (Thumb, 454 bytes, Stack size 16 bytes, except.o(x$fpl$exception), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__funder
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[419]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_algorithm_variance
</UL>

<P><STRONG><a name="[45c]"></a>_f2d</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[45e]"></a>__fpl_fnaninf</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__funder_d
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[92]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[49f]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[4a0]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[454]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[457]"></a>__funder</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, funder_clz.o(x$fpl$funder), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[460]"></a>__funder_d</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, funder_clz.o(x$fpl$funder), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[d0]"></a>__ieee_status</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[74]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[78]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[45b]"></a>__fpl_return_NaN</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL>

<P><STRONG><a name="[456]"></a>_fp_trapveneer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, trapv.o(x$fpl$trapveneer), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trap
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__funder_d
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder_d
</UL>

<P><STRONG><a name="[461]"></a>__fpl_cmpreturn</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ed]"></a>APP_Comm_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_power.o(i.APP_Comm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = APP_Comm_Init &rArr; HAL_Comm_Init &rArr; DRV_Comm_Init &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_InitBack
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Power_Init
</UL>

<P><STRONG><a name="[33e]"></a>Menu_WakeUpLight</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, menu_keybacklight.o(i.Menu_WakeUpLight))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Menu_WakeUpLight &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLightOnce
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_KeyRandomLight
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_KeyRandomGet
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyBackLightUpdate
</UL>

<P><STRONG><a name="[343]"></a>Menu_KeyDeal_CloseLock</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, menu_keydeal.o(i.Menu_KeyDeal_CloseLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_KeyDeal_CloseLock &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDeal_VoiceAndLight
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDealService
</UL>

<P><STRONG><a name="[341]"></a>Menu_KeyDeal_IsEnable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, menu_keydeal.o(i.Menu_KeyDeal_IsEnable))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDealService
</UL>

<P><STRONG><a name="[342]"></a>Menu_KeyDeal_VoiceAndLight</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, menu_keydeal.o(i.Menu_KeyDeal_VoiceAndLight))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Menu_KeyDeal_VoiceAndLight &rArr; HAL_VoicePlayDir &rArr; DRV_Voice_Play &rArr; DRV_Voice_SendDataN &rArr; DRV_Voice_SendData &rArr; I2C_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeepTimeRefresh
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLightPressKey
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VoicePlayDir
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDeal_CloseLock
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyDealService
</UL>

<P><STRONG><a name="[348]"></a>fn_MenuEnter</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, menu.o(i.fn_MenuEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = fn_MenuEnter &rArr; fn_GetInputInfo &rArr; GetInputInfoMenuModPwdInputAgainFun &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_GetInputInfo
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuSwitchToParentIndex
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuSwitchToFrontIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyForMenu
</UL>

<P><STRONG><a name="[346]"></a>fn_MenuNum</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, menu.o(i.fn_MenuNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = fn_MenuNum &rArr; fn_GetInputInfo &rArr; GetInputInfoMenuModPwdInputAgainFun &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_GetInputInfo
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuSwitchToParentIndex
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuSwitchToFrontIndex
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyForMenu
</UL>

<P><STRONG><a name="[347]"></a>fn_MenuReturn</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, menu.o(i.fn_MenuReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = fn_MenuReturn &rArr; fn_GetInputInfo &rArr; GetInputInfoMenuModPwdInputAgainFun &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_GetInputInfo
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuSwitchToParentIndex
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuSwitchToFrontIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyForMenu
</UL>

<P><STRONG><a name="[40e]"></a>fn_MenuSwitchToFrontIndex</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu.o(i.fn_MenuSwitchToFrontIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = fn_MenuSwitchToFrontIndex &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuNum
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuEnter
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_TimeOutMenuReturn
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuReturn
</UL>

<P><STRONG><a name="[40d]"></a>fn_MenuSwitchToParentIndex</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menu.o(i.fn_MenuSwitchToParentIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = fn_MenuSwitchToParentIndex &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuNum
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuEnter
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_TimeOutMenuReturn
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuReturn
</UL>

<P><STRONG><a name="[29a]"></a>fn_TimeOutMenuReturn</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, menu.o(i.fn_TimeOutMenuReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = fn_TimeOutMenuReturn &rArr; fn_MenuSwitchToParentIndex &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuSwitchToParentIndex
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_MenuSwitchToFrontIndex
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AutoMenuReturn
</UL>

<P><STRONG><a name="[222]"></a>ChkPwdIsTooSimple</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, menu_getinputinfo.o(i.ChkPwdIsTooSimple))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ChkPwdIsTooSimple
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuModPwdInputAgainFun
</UL>

<P><STRONG><a name="[14e]"></a>ChkPwdNormal</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, menu_getinputinfo.o(i.ChkPwdNormal))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ChkPwdNormal &rArr; ChkPwd &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPwd
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesktopKeyEnter
</UL>

<P><STRONG><a name="[14f]"></a>ChkPwdSOS</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, menu_getinputinfo.o(i.ChkPwdSOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ChkPwdSOS &rArr; ChkPwd &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPwd
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesktopKeyEnter
</UL>

<P><STRONG><a name="[150]"></a>ChkPwdTmp</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, menu_getinputinfo.o(i.ChkPwdTmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = ChkPwdTmp &rArr; HAL_Storage_WriteSysData &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPwd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesktopKeyEnter
</UL>

<P><STRONG><a name="[152]"></a>ChkTestMode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, menu_getinputinfo.o(i.ChkTestMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ChkTestMode &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesktopKeyEnter
</UL>

<P><STRONG><a name="[201]"></a>DesktopKeyEnter</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, menu_getinputinfo.o(i.DesktopKeyEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = DesktopKeyEnter &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CheckCombine
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkTestMode
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPwdTmp
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPwdSOS
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPwdNormal
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuDesktopFun
</UL>

<P><STRONG><a name="[213]"></a>EnterProjectModeCheck</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, menu_getinputinfo.o(i.EnterProjectModeCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = EnterProjectModeCheck &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputInfoMenuDesktopFun
</UL>

<P><STRONG><a name="[21a]"></a>GetInputInfoMenuDesktopFun</STRONG> (Thumb, 334 bytes, Stack size 8 bytes, menu_getinputinfo.o(i.GetInputInfoMenuDesktopFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = GetInputInfoMenuDesktopFun &rArr; DesktopKeyEnter &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeepTimeRefresh
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_KeyLightOnce
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_KeyRandomLight
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VoicePlayDir
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CheckCombine
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterProjectModeCheck
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesktopKeyEnter
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_VerifyUserStop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_GetInputInfo
</UL>

<P><STRONG><a name="[21e]"></a>GetInputInfoMenuFactoryFun</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, menu_getinputinfo.o(i.GetInputInfoMenuFactoryFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = GetInputInfoMenuFactoryFun &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_GetInputInfo
</UL>

<P><STRONG><a name="[21f]"></a>GetInputInfoMenuModPwdFun</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, menu_getinputinfo.o(i.GetInputInfoMenuModPwdFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = GetInputInfoMenuModPwdFun &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_GetInputInfo
</UL>

<P><STRONG><a name="[220]"></a>GetInputInfoMenuModPwdInputAgainFun</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, menu_getinputinfo.o(i.GetInputInfoMenuModPwdInputAgainFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = GetInputInfoMenuModPwdInputAgainFun &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPwdIsTooSimple
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_GetInputInfo
</UL>

<P><STRONG><a name="[330]"></a>Menu_Finger_AddFingerStep</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, menu_finger.o(i.Menu_Finger_AddFingerStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Finger_AddFingerStep &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SysTimer_ClearCnt
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_SaveBufGet
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Reg
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FingerService
</UL>

<P><STRONG><a name="[331]"></a>Menu_Finger_AddFingerStepOK</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, menu_finger.o(i.Menu_Finger_AddFingerStepOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Finger_AddFingerStepOK &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_SaveBufGet
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_RegReStart
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_ChkFingerLeave
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FingerService
</UL>

<P><STRONG><a name="[32f]"></a>Menu_Finger_AdminChk</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, menu_finger.o(i.Menu_Finger_AdminChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Finger_AdminChk &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Verify
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FingerService
</UL>

<P><STRONG><a name="[337]"></a>Menu_Finger_BleAddFingerConfirmFail</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, menu_finger.o(i.Menu_Finger_BleAddFingerConfirmFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Finger_BleAddFingerConfirmFail &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Del
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FingerService
</UL>

<P><STRONG><a name="[336]"></a>Menu_Finger_BleAddFingerFaill</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, menu_finger.o(i.Menu_Finger_BleAddFingerFaill))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Finger_BleAddFingerFaill &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Del
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FingerService
</UL>

<P><STRONG><a name="[332]"></a>Menu_Finger_BleAddFingerStep</STRONG> (Thumb, 842 bytes, Stack size 8 bytes, menu_finger.o(i.Menu_Finger_BleAddFingerStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Finger_BleAddFingerStep &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_GetOneUserReg
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_SaveBufGet
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Reg
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendStart
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SaveOneUserReg
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FingerService
</UL>

<P><STRONG><a name="[338]"></a>Menu_Finger_BleDelFinger</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, menu_finger.o(i.Menu_Finger_BleDelFinger))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Finger_BleDelFinger &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Del
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FingerService
</UL>

<P><STRONG><a name="[335]"></a>Menu_Finger_ClearAll</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, menu_finger.o(i.Menu_Finger_ClearAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Menu_Finger_ClearAll &rArr; HAL_Finger_Empty &rArr; DRV_Finger_Empty &rArr; DRV_Finger_DeletChar &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Empty
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FingerService
</UL>

<P><STRONG><a name="[334]"></a>Menu_Finger_DelFinger</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, menu_finger.o(i.Menu_Finger_DelFinger))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = Menu_Finger_DelFinger &rArr; HAL_Storage_DelNUserReg &rArr; HAL_Storage_WriteOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_DelNUserReg
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Del
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FingerService
</UL>

<P><STRONG><a name="[32e]"></a>Menu_Finger_Desktop</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, menu_finger.o(i.Menu_Finger_Desktop))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = Menu_Finger_Desktop &rArr; Menu_Finger_VerifyOk &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_VerifyStart
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_Verify
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_HavePress
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_VerifyOk
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CheckCombine
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_VerifyUserStop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FingerService
</UL>

<P><STRONG><a name="[33c]"></a>Menu_Finger_VerifyOk</STRONG> (Thumb, 1608 bytes, Stack size 96 bytes, menu_finger.o(i.Menu_Finger_VerifyOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = Menu_Finger_VerifyOk &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CheckTimeVaild
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_GetOneUserReg
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CheckCombine
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Finger_Desktop
</UL>

<P><STRONG><a name="[29b]"></a>Menu_CatEyeConn</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, menu_face.o(i.Menu_CatEyeConn))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_CatEyeConn &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdDealStart
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdStop
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdDeal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[317]"></a>Menu_Face_AddFaceIng</STRONG> (Thumb, 402 bytes, Stack size 8 bytes, menu_face.o(i.Menu_Face_AddFaceIng))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Face_AddFaceIng &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SearchEmpty
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SaveOneUserReg
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_AddUser
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[318]"></a>Menu_Face_AdminChk</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, menu_face.o(i.Menu_Face_AdminChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = Menu_Face_AdminChk &rArr; Menu_Face_AdminChkVerifyOk &rArr; HAL_Storage_MatchId &rArr; HAL_Storage_ReadOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AdminChkVerifyOk
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_VerifyUserStop
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_VerifyUser
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[319]"></a>Menu_Face_AdminChkVerifyOk</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, menu_face.o(i.Menu_Face_AdminChkVerifyOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = Menu_Face_AdminChkVerifyOk &rArr; HAL_Storage_MatchId &rArr; HAL_Storage_ReadOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ClearError
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AddError
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_VerifyUserStop
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_MatchId
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_AdminChk
</UL>

<P><STRONG><a name="[31a]"></a>Menu_Face_Bell</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, menu_face.o(i.Menu_Face_Bell))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Face_Bell &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_LowPowerChk
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdDealStart
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdStop
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdDeal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[31b]"></a>Menu_Face_BleAddFaceIng</STRONG> (Thumb, 498 bytes, Stack size 8 bytes, menu_face.o(i.Menu_Face_BleAddFaceIng))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Face_BleAddFaceIng &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SearchEmpty
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SaveOneUserReg
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_AddUser
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[31c]"></a>Menu_Face_BleAddFaceUserFail</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, menu_face.o(i.Menu_Face_BleAddFaceUserFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Face_BleAddFaceUserFail &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_DelOneUser
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[31d]"></a>Menu_Face_BleAliyunSecretKeySetParm</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, menu_face.o(i.Menu_Face_BleAliyunSecretKeySetParm))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Face_BleAliyunSecretKeySetParm &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_SetLinkKey
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdStop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[31e]"></a>Menu_Face_BleCatEyeSN</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, menu_face.o(i.Menu_Face_BleCatEyeSN))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = Menu_Face_BleCatEyeSN &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_GetDeviceName
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdStop
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[31f]"></a>Menu_Face_BleConfigWifiData</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, menu_face.o(i.Menu_Face_BleConfigWifiData))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Face_BleConfigWifiData &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_ConfigWifiData
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdStop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[320]"></a>Menu_Face_BleFaceDelId</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, menu_face.o(i.Menu_Face_BleFaceDelId))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Face_BleFaceDelId &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_DelOneUser
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[321]"></a>Menu_Face_BleFaceVersionGet</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, menu_face.o(i.Menu_Face_BleFaceVersionGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = Menu_Face_BleFaceVersionGet &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_GetVersion
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[322]"></a>Menu_Face_BleModifFaceSafetyLevel</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, menu_face.o(i.Menu_Face_BleModifFaceSafetyLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Face_BleModifFaceSafetyLevel &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDirWithLen
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdStop
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdDeal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[323]"></a>Menu_Face_BleR8CatEyeOTA</STRONG> (Thumb, 370 bytes, Stack size 8 bytes, menu_face.o(i.Menu_Face_BleR8CatEyeOTA))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Face_BleR8CatEyeOTA &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleSendDir
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdStop
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdDeal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[324]"></a>Menu_Face_BleShangTangCatEyeSingleDouble</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, menu_face.o(i.Menu_Face_BleShangTangCatEyeSingleDouble))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Face_BleShangTangCatEyeSingleDouble &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[325]"></a>Menu_Face_Clear</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, menu_face.o(i.Menu_Face_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = Menu_Face_Clear &rArr; HAL_FaceId_CmdDeal &rArr; HAL_FaceId_Cmd &rArr; HAL_FaceId_CmdSend &rArr; DRV_FaceId_CmdSend &rArr; DRV_FaceId_PackDataAndSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_DelAllUserStop
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdDealStart
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_DelAllUser
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdStop
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdDeal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[327]"></a>Menu_Face_DelGeneralFace</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, menu_face.o(i.Menu_Face_DelGeneralFace))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Face_DelGeneralFace &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_GetOneUserReg
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteSysData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOnStart
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_DelOneUserReg
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_DelOneUserStart
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_DelOneUser
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[328]"></a>Menu_Face_Desktop</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, menu_face.o(i.Menu_Face_Desktop))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = Menu_Face_Desktop &rArr; Menu_Face_VerifyOk &rArr; HAL_Storage_MatchId &rArr; HAL_Storage_ReadOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VoicePlayDir
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyOk
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyFail
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_VerifyUserStop
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_VerifyUser
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdPowerOff
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[32a]"></a>Menu_Face_VerifyFail</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, menu_face.o(i.Menu_Face_VerifyFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Face_VerifyFail &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ChkError
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AppRegChk
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ClearError
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AddError
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CheckCombine
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyOk
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Desktop
</UL>

<P><STRONG><a name="[329]"></a>Menu_Face_VerifyOk</STRONG> (Thumb, 2038 bytes, Stack size 120 bytes, menu_face.o(i.Menu_Face_VerifyOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = Menu_Face_VerifyOk &rArr; HAL_Storage_MatchId &rArr; HAL_Storage_ReadOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VoicePlayDir
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_VerifyFail
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AppRegChk
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CheckTimeVaild
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Finger_VerifyStart
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ClearError
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_CheckCombine
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_RecordLockLog
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_MatchId
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Desktop
</UL>

<P><STRONG><a name="[32b]"></a>Menu_Face_WifiConnect</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, menu_face.o(i.Menu_Face_WifiConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Menu_Face_WifiConnect &rArr; fn_JumpMenu &rArr; fn_WhenEnterMenuOperation &rArr;  fn_JumpMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_JumpMenu
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_PowerOffStart
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Face_Service
</UL>

<P><STRONG><a name="[349]"></a>Menu_VoicePlay</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, menu_voice.o(i.Menu_VoicePlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Menu_VoicePlay &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VoicePlay
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_VoiceDesktop
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenExitMenu_VosGui
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_WhenEnterMenu_VosGui
</UL>

<P><STRONG><a name="[228]"></a>HAL_Comm_BleCmdSend</STRONG> (Thumb, 2168 bytes, Stack size 16 bytes, hal_comm.o(i.HAL_Comm_BleCmdSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Comm_BleCmdSend &rArr; HAL_Comm_BleDataPack &rArr; DRV_Comm_GetSumChk
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleDataPack
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_Send
</UL>

<P><STRONG><a name="[229]"></a>HAL_Comm_BleDataPack</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, hal_comm.o(i.HAL_Comm_BleDataPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Comm_BleDataPack &rArr; DRV_Comm_GetSumChk
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_GetSumChk
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_BleCmdSend
</UL>

<P><STRONG><a name="[230]"></a>HAL_Comm_CmdSend</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_comm.o(i.HAL_Comm_CmdSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = HAL_Comm_CmdSend &rArr; DRV_Comm_CmdSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_CmdSend
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Comm_Send
</UL>

<P><STRONG><a name="[154]"></a>Comm_WifiDataPack</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hal_faceid.o(i.Comm_WifiDataPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Comm_WifiDataPack &rArr; BasicFunc_GetSumChk
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BasicFunc_GetSumChk
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_WifiCmdSend
</UL>

<P><STRONG><a name="[23a]"></a>HAL_FaceId_Cmd</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, hal_faceid.o(i.HAL_FaceId_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = HAL_FaceId_Cmd &rArr; HAL_FaceId_CmdSend &rArr; DRV_FaceId_CmdSend &rArr; DRV_FaceId_PackDataAndSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdSend
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_SetLinkKey
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_GetDeviceName
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_ConfigWifiData
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdDeal
</UL>

<P><STRONG><a name="[23d]"></a>HAL_FaceId_CmdStart</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_faceid.o(i.HAL_FaceId_CmdStart))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_CmdDealStart
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_SetLinkKeyStart
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_GetDeviceNameStart
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FaceId_ConfigWifiDataStart
</UL>

<P><STRONG><a name="[284]"></a>HAL_Storage_ChkSum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_storage.o(i.HAL_Storage_ChkSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Storage_ChkSum
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_WriteOneUserReg
</UL>

<P><STRONG><a name="[279]"></a>HAL_Storage_GetAddressWithId</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_storage.o(i.HAL_Storage_GetAddressWithId))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_GetOneUserReg
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_DelNUserReg
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SearchEmpty
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SaveOneUserReg
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_DelOneUserReg
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_MatchId
</UL>

<P><STRONG><a name="[27d]"></a>HAL_Storage_ReadOneUserReg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hal_storage.o(i.HAL_Storage_ReadOneUserReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = HAL_Storage_ReadOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_Rw
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_GetOneUserReg
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_MatchId
</UL>

<P><STRONG><a name="[27a]"></a>HAL_Storage_WriteOneUserReg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hal_storage.o(i.HAL_Storage_WriteOneUserReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = HAL_Storage_WriteOneUserReg &rArr; HAL_Storage_Rw &rArr; DRV_Storage_ReadWrite &rArr; W25QXX_Write &rArr; W25QXX_Write_WithCheck &rArr; W25QXX_Write_Page &rArr; SSI_EFlash_QUAD_Program &rArr; SSI_EFlash_Prog_Status2 &rArr; SSI_EFlash_Write_Enable &rArr; SSI_EFlash_Get_Status1
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_Rw
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_ChkSum
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_DelNUserReg
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_SaveOneUserReg
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Storage_DelOneUserReg
</UL>

<P><STRONG><a name="[189]"></a>DRV_FaceId_ClearTxPar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_faceid.o(i.DRV_FaceId_ClearTxPar))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_CmdSend
</UL>

<P><STRONG><a name="[18c]"></a>DRV_FaceId_DataAddBatch</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_faceid.o(i.DRV_FaceId_DataAddBatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DRV_FaceId_DataAddBatch
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_CmdSend
</UL>

<P><STRONG><a name="[19d]"></a>DRV_FaceId_EncryptSizeSet</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, drv_faceid.o(i.DRV_FaceId_EncryptSizeSet))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_PackDataAndSend
</UL>

<P><STRONG><a name="[19e]"></a>DRV_FaceId_GetOrChk</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drv_faceid.o(i.DRV_FaceId_GetOrChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_FaceId_GetOrChk
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_RecvDataAndAnalysis
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_PackDataAndSend
</UL>

<P><STRONG><a name="[193]"></a>DRV_FaceId_GetRecvData</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_faceid.o(i.DRV_FaceId_GetRecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DRV_FaceId_GetRecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetRecvReplyMid
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetRecvReplyData
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetRecvNoteNid
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetRecvNoteData
</UL>

<P><STRONG><a name="[19c]"></a>DRV_FaceId_MoveData</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, drv_faceid.o(i.DRV_FaceId_MoveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DRV_FaceId_MoveData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_RecvDataAndAnalysis
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_PackDataAndSend
</UL>

<P><STRONG><a name="[18b]"></a>DRV_FaceId_MsgIdSet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drv_faceid.o(i.DRV_FaceId_MsgIdSet))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_CmdSend
</UL>

<P><STRONG><a name="[18e]"></a>DRV_FaceId_PackDataAndSend</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, drv_faceid.o(i.DRV_FaceId_PackDataAndSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = DRV_FaceId_PackDataAndSend &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_ecb
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_SendData
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_MoveData
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_GetOrChk
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_EncryptSizeSet
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_CmdSend
</UL>

<P><STRONG><a name="[19f]"></a>DRV_FaceId_SendData</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_faceid.o(i.DRV_FaceId_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DRV_FaceId_SendData &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_PackDataAndSend
</UL>

<P><STRONG><a name="[18d]"></a>DRV_FaceId_SizeSet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_faceid.o(i.DRV_FaceId_SizeSet))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_CmdSend
</UL>

<P><STRONG><a name="[18a]"></a>DRV_FaceId_SyncWordSet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drv_faceid.o(i.DRV_FaceId_SyncWordSet))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FaceId_CmdSend
</UL>

<P><STRONG><a name="[1c6]"></a>DRV_MBI5024_LEDInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_mbi5024.o(i.DRV_MBI5024_LEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DRV_MBI5024_LEDInit &rArr; EPORT_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_WriteGpioData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_MBI5024_Init
</UL>

<P><STRONG><a name="[3c2]"></a>aes_key_expansion</STRONG> (Thumb, 204 bytes, Stack size 28 bytes, rijndael.o(i.aes_key_expansion))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aes_key_expansion &rArr; aes_sub_dword
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_swap_dword
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_sub_dword
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_rot_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
</UL>

<P><STRONG><a name="[3c4]"></a>inv_mix_columns</STRONG> (Thumb, 124 bytes, Stack size 44 bytes, rijndael.o(i.inv_mix_columns))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inv_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
</UL>

<P><STRONG><a name="[3c5]"></a>inv_shift_rows</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, rijndael.o(i.inv_shift_rows))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_shift_rows
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
</UL>

<P><STRONG><a name="[3c6]"></a>inv_sub_bytes</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, rijndael.o(i.inv_sub_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_sub_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sub_sbox
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
</UL>

<P><STRONG><a name="[1be]"></a>TouchTask_ReadAction</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, drv_keysacn.o(i.TouchTask_ReadAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = TouchTask_ReadAction &rArr; Touch_GetKeyValue &rArr; app_tsi_handle &rArr; hal_tsi_adjustRegister &rArr; hal_tsi_switchFineMode &rArr; hal_tsi_waitScanFinished
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_GetKeyValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_KeySacn_GetValue
</UL>

<P><STRONG><a name="[389]"></a>Touch_GetKeyValue</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_keysacn.o(i.Touch_GetKeyValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Touch_GetKeyValue &rArr; app_tsi_handle &rArr; hal_tsi_adjustRegister &rArr; hal_tsi_switchFineMode &rArr; hal_tsi_waitScanFinished
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tsi_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchTask_ReadAction
</UL>

<P><STRONG><a name="[1fc]"></a>DRV_Voice_SendData</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, drv_voice.o(i.DRV_Voice_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DRV_Voice_SendData &rArr; I2C_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteGpioData
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_SendDataN
</UL>

<P><STRONG><a name="[1fb]"></a>DRV_Voice_SendDataN</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, drv_voice.o(i.DRV_Voice_SendDataN))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = DRV_Voice_SendDataN &rArr; DRV_Voice_SendData &rArr; I2C_WriteGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteGpioData
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ConfigGpio
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_VolumeSet
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Voice_Play
</UL>

<P><STRONG><a name="[358]"></a>RTC_Get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_rtc.o(i.RTC_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GuoXin2Date
</UL>

<P><STRONG><a name="[1eb]"></a>RTC_GuoXin2Date</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, drv_rtc.o(i.RTC_GuoXin2Date))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC_GuoXin2Date &rArr; RTC_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_RTC_TimeGet
</UL>

<P><STRONG><a name="[1e8]"></a>RTC_Seconds2Date</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, drv_rtc.o(i.RTC_Seconds2Date))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_RTC_SetByTick
</UL>

<P><STRONG><a name="[171]"></a>DRV_Comm_ClearTxPar</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_comm.o(i.DRV_Comm_ClearTxPar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_Comm_ClearTxPar
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_CmdSend
</UL>

<P><STRONG><a name="[16f]"></a>DRV_Comm_GetRecvData</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_comm.o(i.DRV_Comm_GetRecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DRV_Comm_GetRecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_COMM_GetRecvContent
</UL>

<P><STRONG><a name="[178]"></a>DRV_Comm_PackDataAndSend</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, drv_comm.o(i.DRV_Comm_PackDataAndSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DRV_Comm_PackDataAndSend &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_SendData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_CmdSend
</UL>

<P><STRONG><a name="[17d]"></a>DRV_Comm_SendData</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_comm.o(i.DRV_Comm_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DRV_Comm_SendData &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Comm_PackDataAndSend
</UL>

<P><STRONG><a name="[1cc]"></a>DRV_OnChipFlash_Lock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_onchipflash.o(i.DRV_OnChipFlash_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DRV_OnChipFlash_Lock &rArr; EFLASH_ClrWritePermission
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFLASH_ClrWritePermission
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_OnChipFlash_Write
</UL>

<P><STRONG><a name="[1ce]"></a>DRV_OnChipFlash_Unlock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_onchipflash.o(i.DRV_OnChipFlash_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DRV_OnChipFlash_Unlock &rArr; EFLASH_SetWritePermission
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFLASH_SetWritePermission
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_OnChipFlash_Write
</UL>

<P><STRONG><a name="[3d7]"></a>_trans_errno</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, api_hash.o(i._trans_errno))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_update
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_final
</UL>

<P><STRONG><a name="[3be]"></a>_crypt_rand_word</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, api_rand.o(i._crypt_rand_word))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_gen
</UL>

<P><STRONG><a name="[3bd]"></a>_rand_gen</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, api_rand.o(i._rand_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _rand_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_crypt_rand_word
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rand_gen
</UL>

<P><STRONG><a name="[3af]"></a>_dump_id2_conf_info</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, id2_client.o(i._dump_id2_conf_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = _dump_id2_conf_info &rArr; ls_osa_print &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_init
</UL>

<P><STRONG><a name="[3b0]"></a>_id2_gen_auth_code</STRONG> (Thumb, 780 bytes, Stack size 152 bytes, id2_client.o(i._id2_gen_auth_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 1476 + Unknown Stack Size
<LI>Call Chain = _id2_gen_auth_code &rArr; _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_id
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_malloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_free
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_plat_get_random
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_plat_base64_encode
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sign
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_snprintf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_challenge_auth_code
</UL>

<P><STRONG><a name="[3b8]"></a>_id2_hash</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, id2_client.o(i._id2_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = _id2_hash &rArr; id2_plat_hash_sum &rArr; ali_sha256_final &rArr; ls_hal_sha256_finish &rArr; impl_sha256_finish &rArr; impl_sha256_update &rArr; impl_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_plat_hash_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sign
</UL>

<P><STRONG><a name="[3b5]"></a>_id2_sign</STRONG> (Thumb, 158 bytes, Stack size 144 bytes, id2_client.o(i._id2_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324 + Unknown Stack Size
<LI>Call Chain = _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_log_hex_dump
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sym_cipher
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
</UL>

<P><STRONG><a name="[3bb]"></a>_id2_sym_cipher</STRONG> (Thumb, 306 bytes, Stack size 64 bytes, id2_client.o(i._id2_sym_cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 1180 + Unknown Stack Size
<LI>Call Chain = _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;km_cipher
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_log_hex_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_decrypt
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sign
</UL>

<P><STRONG><a name="[3ac]"></a>_check_km_key_name</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, km_to_irot.o(i._check_km_key_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _check_km_key_name &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;km_cipher
</UL>

<P><STRONG><a name="[3ad]"></a>_dump_chip_conf_info</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, km_to_irot.o(i._dump_chip_conf_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = _dump_chip_conf_info &rArr; ls_osa_print &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;km_init
</UL>

<P><STRONG><a name="[3c0]"></a>_crypt_rand_word</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ls_hal_rand.o(i._crypt_rand_word))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_gen
</UL>

<P><STRONG><a name="[3bf]"></a>_rand_gen</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ls_hal_rand.o(i._rand_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _rand_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_crypt_rand_word
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_get_random
</UL>

<P><STRONG><a name="[433]"></a>zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sha256.o(i.zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_free
</UL>

<P><STRONG><a name="[3e1]"></a>apdu_transmit_wrap</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, std_se_adapter.o(i.apdu_transmit_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = apdu_transmit_wrap &rArr; se_transmit &rArr; apdu_sym_op &rArr; ID2_sym_op &rArr; aes_encrypt_cbc1 &rArr; Aesop &rArr; EDMAC_2ALG &rArr; set_edmac_new
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_log_hex_dump
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_sym_crypto
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_get_id2
</UL>

<P><STRONG><a name="[437]"></a>open_session</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, std_se_adapter.o(i.open_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = open_session &rArr; ls_osa_print &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_print
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_open_session
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_get_id2
</UL>

<P><STRONG><a name="[438]"></a>select_application</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, std_se_adapter.o(i.select_application))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_sym_crypto
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_get_id2
</UL>

<P><STRONG><a name="[20c]"></a>FLASH_checkAddr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, eflash_drv.o(i.FLASH_checkAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFLASH_Write
</UL>

<P><STRONG><a name="[20f]"></a>EPORT_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, eport_drv.o(i.EPORT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = EPORT_IRQHandler &rArr; DRV_Alarm_InterrptService &rArr; EPORT_ReadGpioData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Alarm_InterrptService
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Power_ReuseInterrptService
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT1_7_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT1_6_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT1_5_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT1_4_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT1_3_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT1_2_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT1_1_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT1_0_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT0_7_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT0_6_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT0_5_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT0_4_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT0_3_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT0_2_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT0_1_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPORT0_0_IRQHandler
</UL>

<P><STRONG><a name="[287]"></a>I2C_ISR</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, i2c_drv.o(i.I2C_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[34d]"></a>Nvram_Init_Key</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pci_drv.o(i.Nvram_Init_Key))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvram_Init
</UL>

<P><STRONG><a name="[352]"></a>PCI_Clk_Init_Key</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pci_drv.o(i.PCI_Clk_Init_Key))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCI_Init
</UL>

<P><STRONG><a name="[351]"></a>PCI_Init_Key</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pci_drv.o(i.PCI_Init_Key))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCI_Init
</UL>

<P><STRONG><a name="[143]"></a>CPM_overwrite_test_mode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cpm_drv.o(i.CPM_overwrite_test_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPM_overwrite_test_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_Write_CoreTestKey
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_PowerOff_1p5
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_Sleep
</UL>

<P><STRONG><a name="[149]"></a>cpm_set_sysclk_div</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cpm_drv.o(i.cpm_set_sysclk_div))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPM_SysClkSelect
</UL>

<P><STRONG><a name="[353]"></a>PIT32_ISR</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pit32_drv.o(i.PIT32_ISR))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT2_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT1_IRQHandler
</UL>

<P><STRONG><a name="[361]"></a>SPI_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spi_drv.o(i.SPI_ISR))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[35d]"></a>UART_ISR</STRONG> (Thumb, 280 bytes, Stack size 12 bytes, uart_drv.o(i.UART_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI3_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI1_IRQHandler
</UL>

<P><STRONG><a name="[3a8]"></a>DMATransfer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_ms_control.o(i.DMATransfer))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbRead10
</UL>

<P><STRONG><a name="[3a9]"></a>DMAWaitDone</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_ms_control.o(i.DMAWaitDone))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbRead10
</UL>

<P><STRONG><a name="[392]"></a>UsbRead10</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, usb_ms_control.o(i.UsbRead10))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UsbRead10 &rArr; USBDev_Packet_BulkIn &rArr; UsbSetTXsize
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Packet_BulkIn
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbSetTXsize
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAWaitDone
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMATransfer
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTx
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Data_BulkIn
</UL>

<P><STRONG><a name="[39a]"></a>VendorWriteData</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, usb_ms_control.o(i.VendorWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VendorWriteData &rArr; USBDev_Packet_BulkIn &rArr; UsbSetTXsize
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Packet_BulkIn
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ep_buf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Data_BulkOut
</UL>

<P><STRONG><a name="[391]"></a>enum_realDisk</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, usb_ms_control.o(i.enum_realDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = enum_realDisk
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Data_BulkIn
</UL>

<P><STRONG><a name="[3a1]"></a>USBDev_GetDescriptor</STRONG> (Thumb, 410 bytes, Stack size 100 bytes, usbdev_control.o(i.USBDev_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBDev_GetDescriptor &rArr; write_ep0_buf &rArr; write_ep_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ep0_buf
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_EP0_SendStall
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Ep0Handler
</UL>

<P><STRONG><a name="[39f]"></a>USBDev_GetStatus</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbdev_control.o(i.USBDev_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBDev_GetStatus &rArr; write_ep0_buf &rArr; write_ep_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ep0_buf
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_EP0_SendStall
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDev_Ep0Handler
</UL>

<P><STRONG><a name="[416]"></a>frameSetPack</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, fsm.o(i.frameSetPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = frameSetPack &rArr; fsmCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsmCRC
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsmSendFrame
</UL>

<P><STRONG><a name="[44b]"></a>sha_read_mid_length</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, sha_drv.o(i.sha_read_mid_length))
<BR><BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha_read_mid_data
</UL>

<P><STRONG><a name="[44a]"></a>sha_read_mid_result</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sha_drv.o(i.sha_read_mid_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha_read_mid_result
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha_read_result
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha_read_mid_data
</UL>

<P><STRONG><a name="[3f8]"></a>disassembly_ins_is_bl_blx</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cm_backtrace.o(i.disassembly_ins_is_bl_blx))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
</UL>

<P><STRONG><a name="[3fb]"></a>dump_stack</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, cm_backtrace.o(i.dump_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dump_stack &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[3fc]"></a>fault_diagnosis</STRONG> (Thumb, 764 bytes, Stack size 8 bytes, cm_backtrace.o(i.fault_diagnosis))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = fault_diagnosis &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[3fd]"></a>print_call_stack</STRONG> (Thumb, 118 bytes, Stack size 88 bytes, cm_backtrace.o(i.print_call_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = print_call_stack &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[3fa]"></a>statck_del_fpu_regs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cm_backtrace.o(i.statck_del_fpu_regs))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[20e]"></a>eflash_set_rwsc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, eflash.o(i.eflash_set_rwsc))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Init
</UL>

<P><STRONG><a name="[ca]"></a>_tm_carry</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[cf]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[58]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
